import { Transaction as EthereumJsTransaction } from '@ethereumjs/tx';
import { PrefixedHexString } from 'ethereumjs-util';
import { ContractInteractor } from '@opengsn/common/dist/ContractInteractor';
import { VersionsManager } from '@opengsn/common/dist/VersionsManager';
import { BlockExplorerInterface } from './BlockExplorerInterface';
import { LoggerInterface } from '@opengsn/common/dist/LoggerInterface';
import { AuditRequest, AuditResponse } from '@opengsn/common/dist/types/AuditRequest';
import { TransactionManager } from '../TransactionManager';
import { ServerConfigParams } from '../ServerConfigParams';
export interface PenalizerDependencies {
    transactionManager: TransactionManager;
    contractInteractor: ContractInteractor;
    txByNonceService: BlockExplorerInterface;
}
/**
 * types of penalization supported by a penalizer
 * string values are for logging purposes only
 */
declare enum PenalizationTypes {
    ILLEGAL_TRANSACTION = "penalizeIllegalTransaction",
    REPEATED_NONCE = "penalizeRepeatedNonce"
}
interface DelayedPenalization {
    readyBlockNumber?: number;
    type: PenalizationTypes;
    commitHash: PrefixedHexString;
    methodArgs: PrefixedHexString[];
}
export declare class PenalizerService {
    private workerTask?;
    /** Maps block where commitment becomes valid to penalization details */
    scheduledPenalizations: DelayedPenalization[];
    transactionManager: TransactionManager;
    contractInteractor: ContractInteractor;
    txByNonceService: BlockExplorerInterface;
    versionManager: VersionsManager;
    logger: LoggerInterface;
    config: ServerConfigParams;
    initialized: boolean;
    managerAddress: string;
    constructor(params: PenalizerDependencies, logger: LoggerInterface, config: ServerConfigParams);
    init(startWorker?: boolean): Promise<void>;
    stop(): void;
    penalizeRepeatedNonce(req: AuditRequest): Promise<AuditResponse>;
    calculateCommitHash(method: any): PrefixedHexString;
    intervalHandler(): Promise<PrefixedHexString[]>;
    executeReadyPenalizations(): Promise<PrefixedHexString[]>;
    /**
     * Note: this method modifies elements of {@link scheduledPenalizations} in-place
     */
    queryReadyBlocksForMinedCommitments(): Promise<void>;
    penalizeIllegalTransaction(req: AuditRequest): Promise<AuditResponse>;
    commitAndScheduleReveal(delayedPenalization: DelayedPenalization): Promise<any>;
    executeDelayedPenalization(delayedPenalization: DelayedPenalization): Promise<PrefixedHexString>;
    broadcastTransaction(methodName: string, method: any): Promise<PrefixedHexString>;
    getPenalizeIllegalTransactionArguments(requestTx: EthereumJsTransaction, randomValue: string): PrefixedHexString[];
    getPenalizeRepeatedNonceArguments(minedTx: EthereumJsTransaction, requestTx: EthereumJsTransaction, randomValue: string): PrefixedHexString[];
    validateTransaction(requestTx: EthereumJsTransaction): Promise<{
        valid: boolean;
        error?: string;
    }>;
    isTransactionMined(requestTx: EthereumJsTransaction): Promise<boolean>;
    validatePenalization(method: any): Promise<{
        valid: boolean;
        error?: string;
    }>;
    getMethod(penalizationTypes: PenalizationTypes, methodArgs: PrefixedHexString[]): any;
}
export {};
