/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TestUniswapContract
  extends Truffle.Contract<TestUniswapInstance> {
  "new"(
    _rateMult: number | BN | string,
    _rateDiv: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TestUniswapInstance>;
}

type AllEvents = never;

export interface TestUniswapInstance extends Truffle.ContractInstance {
  rateDiv(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  rateMult(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenToEthSwapOutput: {
    (
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenToEthInputPrice(
    tokensSold: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokenToEthTransferOutput: {
    (
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ethBought: number | BN | string,
      maxTokens: number | BN | string,
      deadline: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getTokenToEthOutputPrice(
    ethBought: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    rateDiv(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    rateMult(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenToEthSwapOutput: {
      (
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTokenToEthInputPrice(
      tokensSold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    tokenToEthTransferOutput: {
      (
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ethBought: number | BN | string,
        maxTokens: number | BN | string,
        deadline: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getTokenToEthOutputPrice(
      ethBought: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
