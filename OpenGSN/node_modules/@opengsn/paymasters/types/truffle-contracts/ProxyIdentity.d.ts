/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ProxyIdentityContract
  extends Truffle.Contract<ProxyIdentityInstance> {
  "new"(
    _owner: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ProxyIdentityInstance>;
}

export interface ContractCreated {
  name: "ContractCreated";
  args: {
    contractAddress: string;
    0: string;
  };
}

export interface DataChanged {
  name: "DataChanged";
  args: {
    key: string;
    value: string;
    0: string;
    1: string;
  };
}

export interface OwnerChanged {
  name: "OwnerChanged";
  args: {
    ownerAddress: string;
    0: string;
  };
}

type AllEvents = ContractCreated | DataChanged | OwnerChanged;

export interface ProxyIdentityInstance extends Truffle.ContractInstance {
  getData(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
   */
  isTrustedForwarder(
    forwarder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (
      _trustedForwarder: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _trustedForwarder: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _trustedForwarder: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _trustedForwarder: string,
      tokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeOwner(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  setData(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  execute: {
    (
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getData(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
     */
    isTrustedForwarder(
      forwarder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialize: {
      (
        _trustedForwarder: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _trustedForwarder: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _trustedForwarder: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _trustedForwarder: string,
        tokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeOwner(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    setData(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    execute: {
      (
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
