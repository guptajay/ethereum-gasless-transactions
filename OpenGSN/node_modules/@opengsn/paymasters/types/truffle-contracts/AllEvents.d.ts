/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AllEventsContract extends Truffle.Contract<AllEventsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<AllEventsInstance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Received {
  name: "Received";
  args: {
    sender: string;
    eth: BN;
    0: string;
    1: BN;
  };
}

export interface Swap {
  name: "Swap";
  args: {
    sender: string;
    recipient: string;
    amount0: BN;
    amount1: BN;
    sqrtPriceX96: BN;
    liquidity: BN;
    tick: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface TokensCharged {
  name: "TokensCharged";
  args: {
    gasUseWithoutPost: BN;
    gasJustPost: BN;
    ethActualCharge: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Withdrawal {
  name: "Withdrawal";
  args: {
    src: string;
    wad: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | Approval
  | Received
  | Swap
  | TokensCharged
  | Transfer
  | Withdrawal;

export interface AllEventsInstance extends Truffle.ContractInstance {
  methods: {};

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
