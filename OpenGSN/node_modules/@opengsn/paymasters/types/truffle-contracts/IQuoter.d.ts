/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IQuoterContract extends Truffle.Contract<IQuoterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IQuoterInstance>;
}

type AllEvents = never;

export interface IQuoterInstance extends Truffle.ContractInstance {
  /**
   * Returns the amount out received for a given exact input swap without executing the swap
   * @param amountIn The amount of the first token to swap
   * @param path The path of the swap, i.e. each token pair and the pool fee
   */
  quoteExactInput: {
    (
      path: string,
      amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      path: string,
      amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the amount out received for a given exact input but for a swap of a single pool
   * @param amountIn The desired input amount
   * @param fee The fee of the token pool to consider for the pair
   * @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
   * @param tokenIn The token being swapped in
   * @param tokenOut The token being swapped out
   */
  quoteExactInputSingle: {
    (
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountIn: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountIn: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountIn: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountIn: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the amount in required for a given exact output swap without executing the swap
   * @param amountOut The amount of the last token to receive
   * @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order
   */
  quoteExactOutput: {
    (
      path: string,
      amountOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string,
      amountOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      path: string,
      amountOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string,
      amountOut: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the amount in required to receive the given exact output amount but for a swap of a single pool
   * @param amountOut The desired output amount
   * @param fee The fee of the token pool to consider for the pair
   * @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
   * @param tokenIn The token being swapped in
   * @param tokenOut The token being swapped out
   */
  quoteExactOutputSingle: {
    (
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountOut: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountOut: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountOut: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenIn: string,
      tokenOut: string,
      fee: number | BN | string,
      amountOut: number | BN | string,
      sqrtPriceLimitX96: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns the amount out received for a given exact input swap without executing the swap
     * @param amountIn The amount of the first token to swap
     * @param path The path of the swap, i.e. each token pair and the pool fee
     */
    quoteExactInput: {
      (
        path: string,
        amountIn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        amountIn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        path: string,
        amountIn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        amountIn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the amount out received for a given exact input but for a swap of a single pool
     * @param amountIn The desired input amount
     * @param fee The fee of the token pool to consider for the pair
     * @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
     * @param tokenIn The token being swapped in
     * @param tokenOut The token being swapped out
     */
    quoteExactInputSingle: {
      (
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountIn: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountIn: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountIn: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountIn: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the amount in required for a given exact output swap without executing the swap
     * @param amountOut The amount of the last token to receive
     * @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order
     */
    quoteExactOutput: {
      (
        path: string,
        amountOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string,
        amountOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        path: string,
        amountOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string,
        amountOut: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the amount in required to receive the given exact output amount but for a swap of a single pool
     * @param amountOut The desired output amount
     * @param fee The fee of the token pool to consider for the pair
     * @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap
     * @param tokenIn The token being swapped in
     * @param tokenOut The token being swapped out
     */
    quoteExactOutputSingle: {
      (
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountOut: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountOut: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountOut: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenIn: string,
        tokenOut: string,
        fee: number | BN | string,
        amountOut: number | BN | string,
        sqrtPriceLimitX96: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
