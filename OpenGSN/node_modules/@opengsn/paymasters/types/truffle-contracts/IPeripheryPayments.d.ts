/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPeripheryPaymentsContract
  extends Truffle.Contract<IPeripheryPaymentsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPeripheryPaymentsInstance>;
}

type AllEvents = never;

export interface IPeripheryPaymentsInstance extends Truffle.ContractInstance {
  /**
   * The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.
   * Unwraps the contract's WETH9 balance and sends it to recipient as ETH.
   * @param amountMinimum The minimum amount of WETH9 to unwrap
   * @param recipient The address receiving ETH
   */
  unwrapWETH9: {
    (
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount
   * Refunds any ETH balance held by this contract to the `msg.sender`
   */
  refundETH: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * The amountMinimum parameter prevents malicious contracts from stealing the token from users
   * Transfers the full amount of a token held by this contract to recipient
   * @param amountMinimum The minimum amount of token required for a transfer
   * @param recipient The destination address of the token
   * @param token The contract address of the token which will be transferred to `recipient`
   */
  sweepToken: {
    (
      token: string,
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token: string,
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token: string,
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token: string,
      amountMinimum: number | BN | string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.
     * Unwraps the contract's WETH9 balance and sends it to recipient as ETH.
     * @param amountMinimum The minimum amount of WETH9 to unwrap
     * @param recipient The address receiving ETH
     */
    unwrapWETH9: {
      (
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount
     * Refunds any ETH balance held by this contract to the `msg.sender`
     */
    refundETH: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * The amountMinimum parameter prevents malicious contracts from stealing the token from users
     * Transfers the full amount of a token held by this contract to recipient
     * @param amountMinimum The minimum amount of token required for a transfer
     * @param recipient The destination address of the token
     * @param token The contract address of the token which will be transferred to `recipient`
     */
    sweepToken: {
      (
        token: string,
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token: string,
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token: string,
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token: string,
        amountMinimum: number | BN | string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
