/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERC725Contract extends Truffle.Contract<IERC725Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC725Instance>;
}

export interface ContractCreated {
  name: "ContractCreated";
  args: {
    contractAddress: string;
    0: string;
  };
}

export interface DataChanged {
  name: "DataChanged";
  args: {
    key: string;
    value: string;
    0: string;
    1: string;
  };
}

export interface OwnerChanged {
  name: "OwnerChanged";
  args: {
    ownerAddress: string;
    0: string;
  };
}

type AllEvents = ContractCreated | DataChanged | OwnerChanged;

export interface IERC725Instance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  changeOwner: {
    (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_owner: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getData(
    _key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setData: {
    (
      _key: string,
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _key: string,
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _key: string,
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  execute: {
    (
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operationType: number | BN | string,
      _to: string,
      _value: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    changeOwner: {
      (_owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getData(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setData: {
      (
        _key: string,
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _key: string,
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _key: string,
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    execute: {
      (
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operationType: number | BN | string,
        _to: string,
        _value: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
