/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TokenGasCalculatorContract
  extends Truffle.Contract<TokenGasCalculatorInstance> {
  "new"(
    _stakeManager: string,
    _penalizer: string,
    _maxWorkerCount: number | BN | string,
    _gasReserve: number | BN | string,
    _postOverhead: number | BN | string,
    _gasOverhead: number | BN | string,
    _maximumRecipientDeposit: number | BN | string,
    _minimumUnstakeDelay: number | BN | string,
    _minimumStake: number | BN | string,
    _dataGasCostPerByte: number | BN | string,
    _externalCallDataCostOverhead: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TokenGasCalculatorInstance>;
}

export interface Deposited {
  name: "Deposited";
  args: {
    paymaster: string;
    from: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface GasUsed {
  name: "GasUsed";
  args: {
    gasUsedByPost: BN;
    0: BN;
  };
}

export interface HubDeprecated {
  name: "HubDeprecated";
  args: {
    fromBlock: BN;
    0: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface RelayHubConfigured {
  name: "RelayHubConfigured";
  args: {
    config: {
      maxWorkerCount: BN;
      gasReserve: BN;
      postOverhead: BN;
      gasOverhead: BN;
      maximumRecipientDeposit: BN;
      minimumUnstakeDelay: BN;
      minimumStake: BN;
      dataGasCostPerByte: BN;
      externalCallDataCostOverhead: BN;
    };
    0: {
      maxWorkerCount: BN;
      gasReserve: BN;
      postOverhead: BN;
      gasOverhead: BN;
      maximumRecipientDeposit: BN;
      minimumUnstakeDelay: BN;
      minimumStake: BN;
      dataGasCostPerByte: BN;
      externalCallDataCostOverhead: BN;
    };
  };
}

export interface RelayServerRegistered {
  name: "RelayServerRegistered";
  args: {
    relayManager: string;
    baseRelayFee: BN;
    pctRelayFee: BN;
    relayUrl: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface RelayWorkersAdded {
  name: "RelayWorkersAdded";
  args: {
    relayManager: string;
    newRelayWorkers: string[];
    workersCount: BN;
    0: string;
    1: string[];
    2: BN;
  };
}

export interface TransactionRejectedByPaymaster {
  name: "TransactionRejectedByPaymaster";
  args: {
    relayManager: string;
    paymaster: string;
    from: string;
    to: string;
    relayWorker: string;
    selector: string;
    innerGasUsed: BN;
    reason: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: BN;
    7: string;
  };
}

export interface TransactionRelayed {
  name: "TransactionRelayed";
  args: {
    relayManager: string;
    relayWorker: string;
    from: string;
    to: string;
    paymaster: string;
    selector: string;
    status: BN;
    charge: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: BN;
    7: BN;
  };
}

export interface TransactionResult {
  name: "TransactionResult";
  args: {
    status: BN;
    returnValue: string;
    0: BN;
    1: string;
  };
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    account: string;
    dest: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | Deposited
  | GasUsed
  | HubDeprecated
  | OwnershipTransferred
  | RelayHubConfigured
  | RelayServerRegistered
  | RelayWorkersAdded
  | TransactionRejectedByPaymaster
  | TransactionRelayed
  | TransactionResult
  | Withdrawn;

export interface TokenGasCalculatorInstance extends Truffle.ContractInstance {
  G_NONZERO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Add new worker addresses controlled by sender who must be a staked Relay Manager address. Emits a RelayWorkersAdded event. This function can be called multiple times, emitting new events
   */
  addRelayWorkers: {
    (
      newRelayWorkers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newRelayWorkers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newRelayWorkers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newRelayWorkers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.
   */
  balanceOf(
    target: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calculateCharge(
    gasUsed: number | BN | string,
    relayData: {
      gasPrice: number | BN | string;
      pctRelayFee: number | BN | string;
      baseRelayFee: number | BN | string;
      relayWorker: string;
      paymaster: string;
      forwarder: string;
      paymasterData: string;
      clientId: number | BN | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calldataGasCost(
    length: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only be withdrawn by the contract itself, by calling withdraw. Emits a Deposited event.
   */
  depositFor: {
    (target: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(target: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deprecateHub: {
    (
      fromBlock: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      fromBlock: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fromBlock: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fromBlock: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deprecationBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the whole hub configuration
   */
  getConfiguration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    maxWorkerCount: BN;
    gasReserve: BN;
    postOverhead: BN;
    gasOverhead: BN;
    maximumRecipientDeposit: BN;
    minimumUnstakeDelay: BN;
    minimumStake: BN;
    dataGasCostPerByte: BN;
    externalCallDataCostOverhead: BN;
  }>;

  innerRelayCall: {
    (
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      gasAndDataLimits: {
        acceptanceBudget: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
        calldataSizeLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      maxPossibleGas: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      gasAndDataLimits: {
        acceptanceBudget: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
        calldataSizeLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      maxPossibleGas: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string }>;
    sendTransaction(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      gasAndDataLimits: {
        acceptanceBudget: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
        calldataSizeLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      maxPossibleGas: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      gasAndDataLimits: {
        acceptanceBudget: number | BN | string;
        preRelayedCallGasLimit: number | BN | string;
        postRelayedCallGasLimit: number | BN | string;
        calldataSizeLimit: number | BN | string;
      },
      totalInitialGas: number | BN | string,
      maxPossibleGas: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isDeprecated(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Uses StakeManager info to decide if the Relay Manager can be considered staked
   */
  isRelayManagerStaked(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  penalize: {
    (
      relayWorker: string,
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayWorker: string,
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayWorker: string,
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayWorker: string,
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registerRelayServer: {
    (
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      baseRelayFee: number | BN | string,
      pctRelayFee: number | BN | string,
      url: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  relayCall: {
    (
      maxAcceptanceBudget: number | BN | string,
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxAcceptanceBudget: number | BN | string,
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: string }>;
    sendTransaction(
      maxAcceptanceBudget: number | BN | string,
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxAcceptanceBudget: number | BN | string,
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: number | BN | string;
          gas: number | BN | string;
          nonce: number | BN | string;
          data: string;
          validUntil: number | BN | string;
        };
        relayData: {
          gasPrice: number | BN | string;
          pctRelayFee: number | BN | string;
          baseRelayFee: number | BN | string;
          relayWorker: string;
          paymaster: string;
          forwarder: string;
          paymasterData: string;
          clientId: number | BN | string;
        };
      },
      signature: string,
      approvalData: string,
      externalGasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setConfiguration: {
    (
      _config: {
        maxWorkerCount: number | BN | string;
        gasReserve: number | BN | string;
        postOverhead: number | BN | string;
        gasOverhead: number | BN | string;
        maximumRecipientDeposit: number | BN | string;
        minimumUnstakeDelay: number | BN | string;
        minimumStake: number | BN | string;
        dataGasCostPerByte: number | BN | string;
        externalCallDataCostOverhead: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _config: {
        maxWorkerCount: number | BN | string;
        gasReserve: number | BN | string;
        postOverhead: number | BN | string;
        gasOverhead: number | BN | string;
        maximumRecipientDeposit: number | BN | string;
        minimumUnstakeDelay: number | BN | string;
        minimumStake: number | BN | string;
        dataGasCostPerByte: number | BN | string;
        externalCallDataCostOverhead: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _config: {
        maxWorkerCount: number | BN | string;
        gasReserve: number | BN | string;
        postOverhead: number | BN | string;
        gasOverhead: number | BN | string;
        maximumRecipientDeposit: number | BN | string;
        minimumUnstakeDelay: number | BN | string;
        minimumStake: number | BN | string;
        dataGasCostPerByte: number | BN | string;
        externalCallDataCostOverhead: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _config: {
        maxWorkerCount: number | BN | string;
        gasReserve: number | BN | string;
        postOverhead: number | BN | string;
        gasOverhead: number | BN | string;
        maximumRecipientDeposit: number | BN | string;
        minimumUnstakeDelay: number | BN | string;
        minimumStake: number | BN | string;
        dataGasCostPerByte: number | BN | string;
        externalCallDataCostOverhead: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  versionHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and contracts can also use it to reduce their funding. Emits a Withdrawn event.
   */
  withdraw: {
    (
      amount: number | BN | string,
      dest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      dest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      dest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      dest: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  workerCount(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  workerToManager(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * calculate actual cost of postRelayedCall. usage: - create this calculator. - create an instance of your TokenPaymaster, with your token's Uniswap instance. - move some tokens (1000 "wei") to the calculator (msg.sender is given approval to pull them back at the end) - set the calculator as owner of this calculator. - call this method. - use the returned values to set your real TokenPaymaster.setPostGasUsage() the above can be ran on a "forked" network, so that it will have the real token, uniswap instances, but still leave no side-effect on the network.
   */
  calculatePostGas: {
    (
      paymaster: string,
      ctx1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      paymaster: string,
      ctx1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      paymaster: string,
      ctx1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      paymaster: string,
      ctx1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    G_NONZERO(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Add new worker addresses controlled by sender who must be a staked Relay Manager address. Emits a RelayWorkersAdded event. This function can be called multiple times, emitting new events
     */
    addRelayWorkers: {
      (
        newRelayWorkers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newRelayWorkers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newRelayWorkers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newRelayWorkers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.
     */
    balanceOf(
      target: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calculateCharge(
      gasUsed: number | BN | string,
      relayData: {
        gasPrice: number | BN | string;
        pctRelayFee: number | BN | string;
        baseRelayFee: number | BN | string;
        relayWorker: string;
        paymaster: string;
        forwarder: string;
        paymasterData: string;
        clientId: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calldataGasCost(
      length: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only be withdrawn by the contract itself, by calling withdraw. Emits a Deposited event.
     */
    depositFor: {
      (target: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deprecateHub: {
      (
        fromBlock: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        fromBlock: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        fromBlock: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        fromBlock: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deprecationBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the whole hub configuration
     */
    getConfiguration(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      maxWorkerCount: BN;
      gasReserve: BN;
      postOverhead: BN;
      gasOverhead: BN;
      maximumRecipientDeposit: BN;
      minimumUnstakeDelay: BN;
      minimumStake: BN;
      dataGasCostPerByte: BN;
      externalCallDataCostOverhead: BN;
    }>;

    innerRelayCall: {
      (
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        gasAndDataLimits: {
          acceptanceBudget: number | BN | string;
          preRelayedCallGasLimit: number | BN | string;
          postRelayedCallGasLimit: number | BN | string;
          calldataSizeLimit: number | BN | string;
        },
        totalInitialGas: number | BN | string,
        maxPossibleGas: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        gasAndDataLimits: {
          acceptanceBudget: number | BN | string;
          preRelayedCallGasLimit: number | BN | string;
          postRelayedCallGasLimit: number | BN | string;
          calldataSizeLimit: number | BN | string;
        },
        totalInitialGas: number | BN | string,
        maxPossibleGas: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: string }>;
      sendTransaction(
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        gasAndDataLimits: {
          acceptanceBudget: number | BN | string;
          preRelayedCallGasLimit: number | BN | string;
          postRelayedCallGasLimit: number | BN | string;
          calldataSizeLimit: number | BN | string;
        },
        totalInitialGas: number | BN | string,
        maxPossibleGas: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        gasAndDataLimits: {
          acceptanceBudget: number | BN | string;
          preRelayedCallGasLimit: number | BN | string;
          postRelayedCallGasLimit: number | BN | string;
          calldataSizeLimit: number | BN | string;
        },
        totalInitialGas: number | BN | string,
        maxPossibleGas: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isDeprecated(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Uses StakeManager info to decide if the Relay Manager can be considered staked
     */
    isRelayManagerStaked(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    penalize: {
      (
        relayWorker: string,
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayWorker: string,
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayWorker: string,
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayWorker: string,
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;

    registerRelayServer: {
      (
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        baseRelayFee: number | BN | string,
        pctRelayFee: number | BN | string,
        url: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    relayCall: {
      (
        maxAcceptanceBudget: number | BN | string,
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        externalGasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxAcceptanceBudget: number | BN | string,
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        externalGasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: boolean; 1: string }>;
      sendTransaction(
        maxAcceptanceBudget: number | BN | string,
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        externalGasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxAcceptanceBudget: number | BN | string,
        relayRequest: {
          request: {
            from: string;
            to: string;
            value: number | BN | string;
            gas: number | BN | string;
            nonce: number | BN | string;
            data: string;
            validUntil: number | BN | string;
          };
          relayData: {
            gasPrice: number | BN | string;
            pctRelayFee: number | BN | string;
            baseRelayFee: number | BN | string;
            relayWorker: string;
            paymaster: string;
            forwarder: string;
            paymasterData: string;
            clientId: number | BN | string;
          };
        },
        signature: string,
        approvalData: string,
        externalGasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setConfiguration: {
      (
        _config: {
          maxWorkerCount: number | BN | string;
          gasReserve: number | BN | string;
          postOverhead: number | BN | string;
          gasOverhead: number | BN | string;
          maximumRecipientDeposit: number | BN | string;
          minimumUnstakeDelay: number | BN | string;
          minimumStake: number | BN | string;
          dataGasCostPerByte: number | BN | string;
          externalCallDataCostOverhead: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _config: {
          maxWorkerCount: number | BN | string;
          gasReserve: number | BN | string;
          postOverhead: number | BN | string;
          gasOverhead: number | BN | string;
          maximumRecipientDeposit: number | BN | string;
          minimumUnstakeDelay: number | BN | string;
          minimumStake: number | BN | string;
          dataGasCostPerByte: number | BN | string;
          externalCallDataCostOverhead: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _config: {
          maxWorkerCount: number | BN | string;
          gasReserve: number | BN | string;
          postOverhead: number | BN | string;
          gasOverhead: number | BN | string;
          maximumRecipientDeposit: number | BN | string;
          minimumUnstakeDelay: number | BN | string;
          minimumStake: number | BN | string;
          dataGasCostPerByte: number | BN | string;
          externalCallDataCostOverhead: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _config: {
          maxWorkerCount: number | BN | string;
          gasReserve: number | BN | string;
          postOverhead: number | BN | string;
          gasOverhead: number | BN | string;
          maximumRecipientDeposit: number | BN | string;
          minimumUnstakeDelay: number | BN | string;
          minimumStake: number | BN | string;
          dataGasCostPerByte: number | BN | string;
          externalCallDataCostOverhead: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    versionHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and contracts can also use it to reduce their funding. Emits a Withdrawn event.
     */
    withdraw: {
      (
        amount: number | BN | string,
        dest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        dest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        dest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        dest: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    workerCount(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    workerToManager(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * calculate actual cost of postRelayedCall. usage: - create this calculator. - create an instance of your TokenPaymaster, with your token's Uniswap instance. - move some tokens (1000 "wei") to the calculator (msg.sender is given approval to pull them back at the end) - set the calculator as owner of this calculator. - call this method. - use the returned values to set your real TokenPaymaster.setPostGasUsage() the above can be ran on a "forked" network, so that it will have the real token, uniswap instances, but still leave no side-effect on the network.
     */
    calculatePostGas: {
      (
        paymaster: string,
        ctx1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        paymaster: string,
        ctx1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        paymaster: string,
        ctx1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        paymaster: string,
        ctx1: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
