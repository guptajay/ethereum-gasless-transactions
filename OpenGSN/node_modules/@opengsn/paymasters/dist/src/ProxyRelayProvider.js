"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const provider_1 = require("@opengsn/provider");
const web3_eth_contract_1 = __importDefault(require("web3-eth-contract"));
const ProxyIdentity_json_1 = __importDefault(require("@opengsn/paymasters/build/contracts/ProxyIdentity.json"));
const ProxyFactory_json_1 = __importDefault(require("@opengsn/paymasters/build/contracts/ProxyFactory.json"));
class ProxyRelayProvider extends provider_1.RelayProvider {
    constructor(proxyFactoryAddress, relayClient) {
        super(relayClient);
        this.proxyFactoryAddress = proxyFactoryAddress;
    }
    static newProvider(input) {
        throw new Error('Use newProxyRelayProvider() instead');
    }
    static newProxyRelayProvider(proxyFactoryAddress, input) {
        return new ProxyRelayProvider(proxyFactoryAddress, new provider_1.RelayClient(input));
    }
    _ethSendTransaction(payload, callback) {
        const gsnTransactionDetails = payload.params[0];
        this.calculateProxyAddress(gsnTransactionDetails.from).then(proxyAddress => {
            var _a;
            // @ts-ignore
            const proxy = new web3_eth_contract_1.default(ProxyIdentity_json_1.default.abi, proxyAddress);
            const value = (_a = gsnTransactionDetails.value) !== null && _a !== void 0 ? _a : '0';
            payload.params[0].data = proxy.methods.execute(0, gsnTransactionDetails.to, value, gsnTransactionDetails.data).encodeABI();
            payload.params[0].to = proxyAddress;
            super._ethSendTransaction(payload, callback);
        })
            .catch(reason => {
            console.log('Failed to calculate proxy address', reason);
        });
    }
    async calculateProxyAddress(owner) {
        // @ts-ignore
        const proxyFactory = new web3_eth_contract_1.default(ProxyFactory_json_1.default.abi, this.proxyFactoryAddress);
        proxyFactory.setProvider(this.origProvider);
        // eslint-disable-next-line @typescript-eslint/return-await
        return await proxyFactory.methods.calculateAddress(owner).call();
    }
}
exports.default = ProxyRelayProvider;
//# sourceMappingURL=ProxyRelayProvider.js.map