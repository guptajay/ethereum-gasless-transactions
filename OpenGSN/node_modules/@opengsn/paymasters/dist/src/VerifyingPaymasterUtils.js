"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereumjs_util_1 = require("ethereumjs-util");
const web3_eth_abi_1 = __importDefault(require("web3-eth-abi"));
const abi = web3_eth_abi_1.default;
/**
 * sign a relay request, so that VerifyingPaymaster will accept it.
 * This method should be called on a server after performing verification of the request.
 * the signerPrivateKey is the private-key of the signer passed to VerifyingPaymaster.setSigner()
 */
function signRelayRequest(relayRequest, signerPrivateKey) {
    const sig = ethereumjs_util_1.ecsign(getRequestHash(relayRequest), signerPrivateKey);
    return ethereumjs_util_1.toRpcSig(sig.v, sig.r, sig.s);
}
exports.signRelayRequest = signRelayRequest;
function getRequestHash(relayRequest) {
    return ethereumjs_util_1.keccak256(Buffer.concat([
        Buffer.from(packForwardRequest(relayRequest.request).slice(2), 'hex'),
        Buffer.from(packRelayData(relayRequest.relayData).slice(2), 'hex')
    ]));
}
exports.getRequestHash = getRequestHash;
function packForwardRequest(req) {
    return abi.encodeParameters(['address', 'address', 'uint256', 'uint256', 'uint256', 'bytes'], [req.from, req.to, req.value, req.gas, req.nonce, req.data]);
}
exports.packForwardRequest = packForwardRequest;
function packRelayData(data) {
    return abi.encodeParameters(['uint256', 'uint256', 'uint256', 'address', 'address', 'bytes', 'uint256'], [data.gasPrice, data.pctRelayFee, data.baseRelayFee, data.relayWorker, data.paymaster, data.paymasterData, data.clientId]);
}
exports.packRelayData = packRelayData;
//# sourceMappingURL=VerifyingPaymasterUtils.js.map