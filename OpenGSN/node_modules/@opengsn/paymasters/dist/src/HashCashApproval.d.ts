import { RelayRequest } from '@opengsn/common/dist/EIP712/RelayRequest';
/**
 * low-level hashcash calculation for the given address and nonce
 * This value should be passed as approvalData for the HashcashPaymaster
 * @param senderAddress the address of the sender
 * @param senderNonce the current nonce of the sender
 * @param difficulty target difficulty to meet
 * @param interval call the callback every that many iterations
 * @param callback async callback to call. return "false" to abort. true to continue
 * @return the approvalData value (bytes32 hash, uint256 counter)
 */
export declare function calculateHashcash(senderAddress: string, senderNonce: string, difficulty: any, interval?: number, callback?: any): Promise<string>;
/**
 * RelayProvider Helper: use to initialize
 * the asyncApprovalData, when using HashcashProvider.
 * NOTE: this will cause the method call to block until the calculation is finished.
 * @param difficulty level this hashcash instance requires. make sure this value is
 *  the same (or higher) as the provider requires, otherwise, you'll get a revert of
 *  "difficulty not met"
 *  @param interval call the callback function every that many iterations
 *  @param callback async callback to call. return false to abort calculation
 * @returns - an async function to pass as a parameter for "asyncApprovalData" of the
 *  RelayProvider. see the HashcashPaymaster.test.ts for usage example.
 */
export declare function createHashcashAsyncApproval(difficulty: any, interval?: number, callback?: any): (relayRequest: RelayRequest) => Promise<string>;
/**
 * calculate in advance async approval.
 * @param web3
 * @param senderAddr
 * @param recipientAddr the recipient address to use
 * @param forwarderAddress
 * @param hashcashPaymasterAddr the hashcash paymaster to work with
 * @param interval
 * @param callback
 */
export declare function calculateHashcashApproval(web3: Web3, senderAddr: string, recipientAddr: string, forwarderAddress: string, hashcashPaymasterAddr?: string, interval?: number, callback?: any): Promise<string | null>;
