{
  "contractName": "WhitelistPaymaster",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLDATA_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORWARDER_HUB_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYMASTER_ACCEPTANCE_BUDGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POST_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRE_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "gasPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        }
      ],
      "name": "_verifyForwarder",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasAndDataLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "acceptanceBudget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calldataSizeLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymaster.GasAndDataLimits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHubAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayHubDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gasUseWithoutPost",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pctRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayWorker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "clientId",
              "type": "uint256"
            }
          ],
          "internalType": "struct GsnTypes.RelayData",
          "name": "relayData",
          "type": "tuple"
        }
      ],
      "name": "postRelayedCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "senderWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRelayHub",
          "name": "hub",
          "type": "address"
        }
      ],
      "name": "setRelayHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IForwarder",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "targetWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "contract IForwarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useSenderWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useTargetWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPaymaster",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "withdrawRelayHubDepositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "whitelistSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "whitelistTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "gasPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "approvalData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxPossibleGas",
          "type": "uint256"
        }
      ],
      "name": "preRelayedCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "revertOnRecipientRevert",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLDATA_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORWARDER_HUB_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMASTER_ACCEPTANCE_BUDGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POST_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"}],\"name\":\"_verifyForwarder\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAndDataLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acceptanceBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSizeLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymaster.GasAndDataLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayHubDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUseWithoutPost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleGas\",\"type\":\"uint256\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"revertOnRecipientRevert\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setRelayHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IForwarder\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"contract IForwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSenderWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useTargetWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPaymaster\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"whitelistSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"whitelistTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawRelayHubDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"params\":{\"context\":\"- the call context, as returned by the preRelayedCall\",\"gasUseWithoutPost\":\"- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.\",\"relayData\":\"- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.\",\"success\":\"- true if the relayed call succeeded, false if it reverted\"}},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"params\":{\"approvalData\":\"- extra dapp-specific data (e.g. signature from trusted party)\",\"maxPossibleGas\":\"- based on values returned from {@link getGasAndDataLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\",\"relayRequest\":\"- the full relay request structure\",\"signature\":\"- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGasAndDataLimits()\":{\"notice\":\"Return the Gas Limits and msg.data max size constants used by the Paymaster.\"},\"getHubAddr()\":{\"notice\":\"return the relayHub of this contract.\"},\"getRelayHubDeposit()\":{\"notice\":\"check current deposit on relay hub.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"notice\":\"This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state.\"},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"notice\":\"Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \\\"revert\\\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster.\"},\"withdrawRelayHubDepositTo(uint256,address)\":{\"notice\":\"withdraw deposit from relayHub\"}},\"notice\":\"a sample paymaster that has whitelists for senders and targets. - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed. - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/WhitelistPaymaster.sol\":\"WhitelistPaymaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/AcceptEverythingPaymaster.sol\":{\"keccak256\":\"0x4652f951248160bb6e5dc87311422202a683f984e6ac6fcbaaa718d458efe492\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a95bab423ce7a71c212a5abafa0eefe962ae630828f7b8768df7014e21da41a\",\"dweb:/ipfs/Qmf4giJXUbz1Z5GeLFbPEtBGM9FPuyNztTS4Nq3VBDpvAx\"]},\"/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/WhitelistPaymaster.sol\":{\"keccak256\":\"0xa3bf53962417c3bf3acf5aee52e8dc57592a7e122d6e68eb6f461a24f8e38dc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://797ab8c91ee38dcfb47a11c784e86eca0759e7c1f98cc8311e4e80cd71d468fc\",\"dweb:/ipfs/Qmf9TvTwxdV8sTBxECs9yk5Prxyywv8tAp8c4DtbbPq9Fg\"]},\"@opengsn/contracts/src/BasePaymaster.sol\":{\"keccak256\":\"0xd914685ceab88a06d4a1c94d7dd11167bec794106b4c25554bce6491d0df6ec8\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://7a4881660c732e5f08254d3cc8c76480e5a878c15cb28dc96e8132aaa0a01b3a\",\"dweb:/ipfs/QmXeRywWUcKxpu1y465Vf5LxXdk8F1VNveCjdSFN4CsgFv\"]},\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"keccak256\":\"0xca05fe8ee1d0bbdd9edd83f16b8481fa67704f0ed5a42d5c0f76c8a3a47d73f4\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://e42577c586894c9fc9e11a3281c0e2d4183121714fd1101380b6b2b66c144ba3\",\"dweb:/ipfs/QmPQphvUxhvnYGXtNRbU7WcmbEP2N7mMDgC5R8R9AqC9xG\"]},\"@opengsn/contracts/src/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x4cf49c343b72cd8dac257e8b49009347dc2465d5d191c6d1f9455e74f331f5d9\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://9d851b3712a9931da139d1bab1f02fccafc313bcc754f2d88831699edf9bea20\",\"dweb:/ipfs/QmPxqoiiLiwFTVw6JZLet2Q5BtL2wDcbtF1UhZ6J7oryhT\"]},\"@opengsn/contracts/src/interfaces/IRelayHub.sol\":{\"keccak256\":\"0x3497133a7147174c498d2feeb2569b973396a8c2c220b5876fd9eb3b59841c85\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://32bb285a0f675310ee87647d00717e2dee9dbc7179e5455a3e1d7a2e121b6bf7\",\"dweb:/ipfs/QmZABWeS7pi5KfhoDUKyZHEvwqiAL4sYvjr3UcWZ7SvqCX\"]},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"keccak256\":\"0x6243d3a925653ed0bde57e9fae7fb87f12c58a2376b27ae23b53502322532e00\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://928801ac8ceac377f326cd48de8e0056db9a7f8767b60efee5dfca035f326702\",\"dweb:/ipfs/QmYFkKXZcSVmmLNpDF1hvsLwAnhjmVSZuvEueaJgp1aVSg\"]},\"@opengsn/contracts/src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0x86fcc2f265ba3c2f987fe47823121b4df3ddc86b834d89a67aca585d0721747f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://3712113b0f9d49cc3e9ef7096de90aabc719c1d40bb2796930e1f891325fcc3c\",\"dweb:/ipfs/QmZPbxY2idt9DuXHXGxK3GFf1bXHj1CDB1WBAhtenStrjj\"]},\"@opengsn/contracts/src/utils/GsnEip712Library.sol\":{\"keccak256\":\"0xeabda17c0116022fba48a5be922c093fd721fc21e400a8158a2d2c9ae1c0ac4f\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://d2632a6bfa1675269a04a28a26a3bde247f537ecc7a671fd6b1bb0f34a11ec4d\",\"dweb:/ipfs/QmaqwWq3RtvHFC55DmpwWsxwibKCroG6PvMrrsag8skMyY\"]},\"@opengsn/contracts/src/utils/GsnTypes.sol\":{\"keccak256\":\"0x813b12755ca7e69d3f269b5ab801d36d208274c26ea2764a416c3033e61bc130\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://f3b0de24eae014d96adac3946984f3f3b769b3d74c3b46ccdb6b93d516b6916d\",\"dweb:/ipfs/QmRVmrAzeYGve3sQ2qksDknA5MVmmJpgZiRZ7VWCQCehNz\"]},\"@opengsn/contracts/src/utils/GsnUtils.sol\":{\"keccak256\":\"0xeb0c5992c7c2648e414a14605a72e773e09c554036e9c9cd9aca34e292b195d7\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://5d35afd557b1b9a02ad97bfcb5ff06b7cebde782d10c63258fd724413fee0419\",\"dweb:/ipfs/QmcDVREDjsxkeaDif7nM9ammFfGcgEQR684jEsayk2Gkm1\"]},\"@opengsn/contracts/src/utils/MinLibBytes.sol\":{\"keccak256\":\"0x73c837126ff5369c63b7a71828b6d5c9e5bc8a6477f8d4fc97f8e28142380cd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c4a7846ef4c46fcd3fcc36dc4d49f70470391da1da83102eb48ea6428fd5cdee\",\"dweb:/ipfs/QmdvZvjhTAYAzKzjeNrWM9sToiPuo6XaQs7AeKUG9aKrRy\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xc005d5d0c00724c37876c56a59ccde49fc681edce11e67a8a7ff53a36a042f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bc2cd1d2877d2711b9f4c0375324e1528cb0127820837a163b14760b3a1b3bb\",\"dweb:/ipfs/QmNde8JwkcNsxhjR43iNrou6wMvJknN1CeXjB4cDsKHzHV\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "376:1194:5:-:0;;;;;;;;;;;;-1:-1:-1;888:17:36;908:12;:10;:12::i;:::-;930:6;:18;;-1:-1:-1;;;;;;930:18:36;-1:-1:-1;;;;;930:18:36;;;;;;;963:43;;930:18;;-1:-1:-1;930:18:36;963:43;;930:6;;963:43;850:163;376:1194:5;;598:104:43;685:10;598:104;:::o;376:1194:5:-;;;;;;;",
  "deployedSourceMap": "376:1194:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:8:18;;-1:-1:-1;;;;;2907:8:18;2891:69;;;;-1:-1:-1;;;2891:69:18;;;;;;;:::i;:::-;;;;;;;;;2970:8;;:51;;-1:-1:-1;;;2970:51:18;;-1:-1:-1;;;;;2970:8:18;;;;:19;;2996:9;;2970:51;;3015:4;;2970:51;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;376:1194:5;;;;;904:664;;;;;;;;;;-1:-1:-1;904:664:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;760:138;;;;;;;;;;-1:-1:-1;760:138:5;;;;;:::i;:::-;;:::i;:::-;;2524:139:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3073:::-;;;;;;;;;;-1:-1:-1;3073:139:18;;;;;:::i;:::-;;:::i;617:138:5:-;;;;;;;;;;-1:-1:-1;617:138:5;;;;;:::i;:::-;;:::i;476:30::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1158:51:18:-;;;;;;;;;;;;;:::i;1721:145:36:-;;;;;;;;;;;;;:::i;613:102:18:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;932:258:0:-;;;;;;;;;;-1:-1:-1;932:258:0;;;;;:::i;:::-;;:::i;2271:84:18:-;;;;;;;;;;-1:-1:-1;2271:84:18;;;;;:::i;:::-;;:::i;563:43::-;;;;;;;;;;;;;:::i;512:46:5:-;;;;;;;;;;-1:-1:-1;512:46:5;;;;;:::i;:::-;;:::i;564:::-;;;;;;;;;;-1:-1:-1;564:46:5;;;;;:::i;:::-;;:::i;1089:85:36:-;;;;;;;;;;;;;:::i;382:149:0:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1743:273:18:-;;;;;;;;;;-1:-1:-1;1743:273:18;;;;;:::i;:::-;;:::i;1216:362::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;786:54::-;;;;;;;;;;;;;:::i;981:60::-;;;;;;;;;;;;;:::i;2361:113::-;;;;;;;;;;-1:-1:-1;2361:113:18;;;;;:::i;:::-;;:::i;440:30:5:-;;;;;;;;;;;;;:::i;1047:105:18:-;;;;;;;;;;;;;:::i;2015:240:36:-;;;;;;;;;;-1:-1:-1;2015:240:36;;;;;:::i;:::-;;:::i;916:59:18:-;;;;;;;;;;;;;:::i;904:664:5:-;1274:18;;1141:20;;1163:28;;-1:-1:-1;;;1274:18:5;;;;1269:129;;;1318:15;:42;1334:20;:12;;:20;:::i;:::-;:25;;;;;;;:::i;:::-;-1:-1:-1;;;;;1318:42:5;;;;;;;;;;;;-1:-1:-1;1318:42:5;;;;1309:78;;;;-1:-1:-1;;;1309:78:5;;;;;;;:::i;:::-;1412:18;;-1:-1:-1;;;1412:18:5;;;;1407:127;;;1456:15;:40;1472:20;:12;;:20;:::i;:::-;:23;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1456:40:5;;;;;;;;;;;;-1:-1:-1;1456:40:5;;;;1447:76;;;;-1:-1:-1;;;1447:76:5;;;;;;;:::i;:::-;-1:-1:-1;;1543:18:5;;;;;;;;;1555:5;1543:18;;;904:664;;;;;;;;;:::o;760:138::-;1312:12:36;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;-1:-1:-1;;;;;828:23:5::1;;::::0;;;:15:::1;:23;::::0;;;;:28;;-1:-1:-1;;828:28:5::1;852:4;828:28;::::0;;866:18:::1;:25:::0;;-1:-1:-1;;;;866:25:5::1;-1:-1:-1::0;;;866:25:5::1;::::0;;760:138::o;2524:139:18:-;2623:8;;:33;;-1:-1:-1;;;2623:33:18;;2600:4;;-1:-1:-1;;;;;2623:8:18;;:18;;:33;;2650:4;;2623:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2616:40;;2524:139;:::o;3073:::-;1312:12:36;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;3172:8:18::1;::::0;:33:::1;::::0;-1:-1:-1;;;3172:33:18;;-1:-1:-1;;;;;3172:8:18;;::::1;::::0;:17:::1;::::0;:33:::1;::::0;3190:6;;3198;;3172:33:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3073:139:::0;;:::o;617:138:5:-;1312:12:36;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;-1:-1:-1;;;;;685:23:5::1;;::::0;;;:15:::1;:23;::::0;;;;:28;;-1:-1:-1;;685:28:5::1;709:4;685:28;::::0;;723:18:::1;:25:::0;;-1:-1:-1;;;;723:25:5::1;-1:-1:-1::0;;;723:25:5::1;::::0;;617:138::o;476:30::-;;;-1:-1:-1;;;476:30:5;;;;;:::o;1158:51:18:-;1204:5;1158:51;:::o;1721:145:36:-;1312:12;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;1827:1:::1;1811:6:::0;;1790:40:::1;::::0;-1:-1:-1;;;;;1811:6:36;;::::1;::::0;1790:40:::1;::::0;1827:1;;1790:40:::1;1857:1;1840:19:::0;;-1:-1:-1;;;;;;1840:19:36::1;::::0;;1721:145::o;613:102:18:-;699:8;;-1:-1:-1;;;;;699:8:18;613:102;:::o;932:258:0:-;;;;;;:::o;2271:84:18:-;1312:12:36;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;2334:8:18::1;:14:::0;;-1:-1:-1;;;;;;2334:14:18::1;-1:-1:-1::0;;;;;2334:14:18;;;::::1;::::0;;;::::1;::::0;;2271:84::o;563:43::-;;;-1:-1:-1;;;;;563:43:18;;:::o;512:46:5:-;;;;;;;;;;;;;;;:::o;564:::-;;;;;;;;;;;;;;;:::o;1089:85:36:-;1135:7;1161:6;-1:-1:-1;;;;;1161:6:36;1089:85;:::o;382:149:0:-;450:13;474:50;;;;;;;;;;;;;;;;;;;382:149;:::o;1743:273:18:-;1885:22;;;;:12;:22;:::i;:::-;:32;;;;;;;;;:::i;:::-;1864:16;;-1:-1:-1;;;;;1864:16:18;;;1856:61;;;1848:98;;;;-1:-1:-1;;;1848:98:18;;;;;;;:::i;:::-;1956:53;1996:12;1956:39;:53::i;:::-;1743:273;:::o;1216:362::-;1314:41;;:::i;:::-;-1:-1:-1;1379:192:18;;;;;;;;1101:51;1379:192;;969:6;1379:192;;;;1035:6;1379:192;;;;;;;1204:5;1379:192;;;;1216:362;:::o;786:54::-;835:5;786:54;:::o;981:60::-;1035:6;981:60;:::o;2361:113::-;1312:12:36;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;2439:16:18::1;:28:::0;;-1:-1:-1;;;;;;2439:28:18::1;-1:-1:-1::0;;;;;2439:28:18;;;::::1;::::0;;;::::1;::::0;;2361:113::o;440:30:5:-;;;-1:-1:-1;;;440:30:5;;;;;:::o;1047:105:18:-;1101:51;1047:105;:::o;2015:240:36:-;1312:12;:10;:12::i;:::-;-1:-1:-1;;;;;1301:23:36;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1301:23:36;;1293:68;;;;;-1:-1:-1;;;1293:68:36;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1293:68:36;;;;;;;;;;;;;;;-1:-1:-1;;;;;2103:22:36;::::1;2095:73;;;;-1:-1:-1::0;;;2095:73:36::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2204:6;::::0;;2183:38:::1;::::0;-1:-1:-1;;;;;2183:38:36;;::::1;::::0;2204:6;::::1;::::0;2183:38:::1;::::0;::::1;2231:6;:17:::0;;-1:-1:-1;;;;;;2231:17:36::1;-1:-1:-1::0;;;;;2231:17:36;;;::::1;::::0;;;::::1;::::0;;2015:240::o;916:59:18:-;969:6;916:59;:::o;598:104:43:-;685:10;598:104;:::o;2052:538:30:-;2154:12;;2188:20;:12;;:20;:::i;:::-;:23;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2188:34:30;-1:-1:-1;;;2321:22:30;;;;:12;:22;:::i;:::-;:32;;;;;;;;;:::i;:::-;2236:131;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2236:131:30;;;;;;;;;;;;;;-1:-1:-1;;;;;2236:131:30;-1:-1:-1;;;;;;2236:131:30;;;;;;;;;;2188:189;;;;2236:131;2188:189;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:224;;;;2395:7;2387:48;;;;-1:-1:-1;;;2387:48:30;;;;;;;:::i;:::-;2453:3;:10;2467:2;2453:16;2445:61;;;;-1:-1:-1;;;2445:61:30;;;;;;;:::i;:::-;2535:3;2524:23;;;;;;;;;;;;:::i;:::-;2516:67;;;;-1:-1:-1;;;2516:67:30;;;;;;;:::i;:::-;2052:538;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:377:44:-;;;131:3;124:4;116:6;112:17;108:27;98:2;;156:8;146;139:26;98:2;-1:-1:-1;186:20:44;;229:18;218:30;;215:2;;;268:8;258;251:26;215:2;312:4;304:6;300:17;288:29;;364:3;357:4;348:6;340;336:19;332:30;329:39;326:2;;;381:1;378;371:12;326:2;88:303;;;;;:::o;396:171::-;;509:2;500:6;495:3;491:16;487:25;484:2;;;529:5;522;515:20;484:2;-1:-1:-1;555:6:44;474:93;-1:-1:-1;474:93:44:o;572:259::-;;684:2;672:9;663:7;659:23;655:32;652:2;;;705:6;697;690:22;652:2;749:9;736:23;768:33;795:5;768:33;:::i;:::-;820:5;642:189;-1:-1:-1;;;642:189:44:o;836:257::-;;956:2;944:9;935:7;931:23;927:32;924:2;;;977:6;969;962:22;924:2;1014:9;1008:16;1033:30;1057:5;1033:30;:::i;1098:939::-;;;;;;1306:3;1294:9;1285:7;1281:23;1277:33;1274:2;;;1328:6;1320;1313:22;1274:2;1373:9;1360:23;1402:18;1443:2;1435:6;1432:14;1429:2;;;1464:6;1456;1449:22;1429:2;1508:60;1560:7;1551:6;1540:9;1536:22;1508:60;:::i;:::-;1587:8;;-1:-1:-1;1482:86:44;-1:-1:-1;1672:2:44;1657:18;;1644:32;;-1:-1:-1;1685:30:44;1644:32;1685:30;:::i;:::-;1734:5;;-1:-1:-1;1786:2:44;1771:18;;1758:32;;-1:-1:-1;1843:2:44;1828:18;;1815:32;;1859:16;;;1856:2;;;1893:6;1885;1878:22;1856:2;-1:-1:-1;1921:24:44;;1979:3;1961:16;;;1957:26;1954:2;;;2001:6;1993;1986:22;1954:2;2029;2019:12;;;1264:773;;;;;;;;:::o;2607:389::-;;2751:2;2739:9;2730:7;2726:23;2722:32;2719:2;;;2772:6;2764;2757:22;2719:2;2817:9;2804:23;2850:18;2842:6;2839:30;2836:2;;;2887:6;2879;2872:22;2836:2;2915:75;2982:7;2973:6;2962:9;2958:22;2915:75;:::i;:::-;2905:85;2709:287;-1:-1:-1;;;;2709:287:44:o;3001:1077::-;;;;;;;3234:3;3222:9;3213:7;3209:23;3205:33;3202:2;;;3256:6;3248;3241:22;3202:2;3301:9;3288:23;3330:18;3371:2;3363:6;3360:14;3357:2;;;3392:6;3384;3377:22;3357:2;3420:75;3487:7;3478:6;3467:9;3463:22;3420:75;:::i;:::-;3410:85;;3548:2;3537:9;3533:18;3520:32;3504:48;;3577:2;3567:8;3564:16;3561:2;;;3598:6;3590;3583:22;3561:2;3642:62;3696:7;3685:8;3674:9;3670:24;3642:62;:::i;:::-;3723:8;;-1:-1:-1;3616:88:44;-1:-1:-1;3811:2:44;3796:18;;3783:32;;-1:-1:-1;3827:16:44;;;3824:2;;;3861:6;3853;3846:22;3824:2;;3905:62;3959:7;3948:8;3937:9;3933:24;3905:62;:::i;:::-;3192:886;;;;-1:-1:-1;3192:886:44;;;;;4068:2;4053:18;;;4040:32;;3192:886;-1:-1:-1;;;;3192:886:44:o;4083:194::-;;4206:2;4194:9;4185:7;4181:23;4177:32;4174:2;;;4227:6;4219;4212:22;4174:2;-1:-1:-1;4255:16:44;;4164:113;-1:-1:-1;4164:113:44:o;4282:335::-;;;4419:2;4407:9;4398:7;4394:23;4390:32;4387:2;;;4440:6;4432;4425:22;4387:2;4481:9;4468:23;4458:33;;4541:2;4530:9;4526:18;4513:32;4554:33;4581:5;4554:33;:::i;:::-;4606:5;4596:15;;;4377:240;;;;;:::o;4622:259::-;;4703:5;4697:12;4730:6;4725:3;4718:19;4746:63;4802:6;4795:4;4790:3;4786:14;4779:4;4772:5;4768:16;4746:63;:::i;:::-;4863:2;4842:15;-1:-1:-1;;4838:29:44;4829:39;;;;4870:4;4825:50;;4673:208;-1:-1:-1;;4673:208:44:o;4886:274::-;;5053:6;5047:13;5069:53;5115:6;5110:3;5103:4;5095:6;5091:17;5069:53;:::i;:::-;5138:16;;;;;5023:137;-1:-1:-1;;5023:137:44:o;5165:203::-;-1:-1:-1;;;;;5329:32:44;;;;5311:51;;5299:2;5284:18;;5266:102::o;5589:187::-;5754:14;;5747:22;5729:41;;5717:2;5702:18;;5684:92::o;5781:300::-;;5950:2;5939:9;5932:21;5970:46;6012:2;6001:9;5997:18;5989:6;5970:46;:::i;:::-;5962:54;;6066:6;6059:14;6052:22;6047:2;6036:9;6032:18;6025:50;5922:159;;;;;:::o;6313:221::-;;6462:2;6451:9;6444:21;6482:46;6524:2;6513:9;6509:18;6501:6;6482:46;:::i;6539:346::-;6741:2;6723:21;;;6780:2;6760:18;;;6753:30;-1:-1:-1;;;6814:2:44;6799:18;;6792:52;6876:2;6861:18;;6713:172::o;6890:355::-;7092:2;7074:21;;;7131:2;7111:18;;;7104:30;7170:33;7165:2;7150:18;;7143:61;7236:2;7221:18;;7064:181::o;7250:352::-;7452:2;7434:21;;;7491:2;7471:18;;;7464:30;7530;7525:2;7510:18;;7503:58;7593:2;7578:18;;7424:178::o;7607:349::-;7809:2;7791:21;;;7848:2;7828:18;;;7821:30;7887:27;7882:2;7867:18;;7860:55;7947:2;7932:18;;7781:175::o;7961:348::-;8163:2;8145:21;;;8202:2;8182:18;;;8175:30;8241:26;8236:2;8221:18;;8214:54;8300:2;8285:18;;8135:174::o;8314:356::-;8516:2;8498:21;;;8535:18;;;8528:30;8594:34;8589:2;8574:18;;8567:62;8661:2;8646:18;;8488:182::o;8675:346::-;8877:2;8859:21;;;8916:2;8896:18;;;8889:30;-1:-1:-1;;;8950:2:44;8935:18;;8928:52;9012:2;8997:18;;8849:172::o;9026:442::-;9259:13;;9241:32;;9329:4;9317:17;;;9311:24;9289:20;;;9282:54;9392:4;9380:17;;;9374:24;9352:20;;;9345:54;9455:4;9443:17;;;9437:24;9415:20;;;9408:54;;;;9228:3;9213:19;;9195:273::o;9473:177::-;9619:25;;;9607:2;9592:18;;9574:76::o;9655:290::-;9845:25;;;-1:-1:-1;;;;;9906:32:44;9901:2;9886:18;;9879:60;9833:2;9818:18;;9800:145::o;9950:338::-;;10108:11;10095:25;10202:3;10198:8;10187;10171:14;10167:29;10163:44;10143:18;10139:69;10129:2;;10225:4;10219;10212:18;10293:333;;10446:11;10433:25;10540:3;10536:8;10525;10509:14;10505:29;10501:44;10481:18;10477:69;10467:2;;10563:4;10557;10550:18;10631:258;10703:1;10713:113;10727:6;10724:1;10721:13;10713:113;;;10803:11;;;10797:18;10784:11;;;10777:39;10749:2;10742:10;10713:113;;;10844:6;10841:1;10838:13;10835:2;;;10879:1;10870:6;10865:3;10861:16;10854:27;10835:2;;10684:205;;;:::o;10894:133::-;-1:-1:-1;;;;;10971:31:44;;10961:42;;10951:2;;11017:1;11014;11007:12;11032:120;11120:5;11113:13;11106:21;11099:5;11096:32;11086:2;;11142:1;11139;11132:12",
  "source": "//SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"./AcceptEverythingPaymaster.sol\";\n\n///a sample paymaster that has whitelists for senders and targets.\n/// - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n/// - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.\ncontract WhitelistPaymaster is AcceptEverythingPaymaster {\n\n    bool public useSenderWhitelist;\n    bool public useTargetWhitelist;\n    mapping (address=>bool) public senderWhitelist;\n    mapping (address=>bool) public targetWhitelist;\n\n    function whitelistSender(address sender) public onlyOwner {\n        senderWhitelist[sender]=true;\n        useSenderWhitelist = true;\n    }\n    function whitelistTarget(address target) public onlyOwner {\n        targetWhitelist[target]=true;\n        useTargetWhitelist = true;\n    }\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (relayRequest, signature, approvalData, maxPossibleGas);\n\n        if ( useSenderWhitelist ) {\n            require( senderWhitelist[relayRequest.request.from], \"sender not whitelisted\");\n        }\n        if ( useTargetWhitelist ) {\n            require( targetWhitelist[relayRequest.request.to], \"target not whitelisted\");\n        }\n        return (\"\", false);\n    }\n}\n",
  "sourcePath": "/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/WhitelistPaymaster.sol",
  "ast": {
    "absolutePath": "/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/WhitelistPaymaster.sol",
    "exportedSymbols": {
      "AcceptEverythingPaymaster": [
        61
      ],
      "BasePaymaster": [
        2575
      ],
      "Context": [
        9170
      ],
      "GsnEip712Library": [
        6706
      ],
      "GsnTypes": [
        6732
      ],
      "GsnUtils": [
        6779
      ],
      "IForwarder": [
        5737
      ],
      "IPaymaster": [
        5807
      ],
      "IRelayHub": [
        6146
      ],
      "IRelayRecipient": [
        6175
      ],
      "IStakeManager": [
        6338
      ],
      "MinLibBytes": [
        6894
      ],
      "Ownable": [
        7733
      ],
      "SafeMath": [
        8204
      ],
      "WhitelistPaymaster": [
        988
      ]
    },
    "id": 989,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 883,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:5"
      },
      {
        "id": 884,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "55:33:5"
      },
      {
        "absolutePath": "/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/AcceptEverythingPaymaster.sol",
        "file": "./AcceptEverythingPaymaster.sol",
        "id": 885,
        "nodeType": "ImportDirective",
        "scope": 989,
        "sourceUnit": 62,
        "src": "90:41:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 887,
              "name": "AcceptEverythingPaymaster",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 61,
              "src": "407:25:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AcceptEverythingPaymaster_$61",
                "typeString": "contract AcceptEverythingPaymaster"
              }
            },
            "id": 888,
            "nodeType": "InheritanceSpecifier",
            "src": "407:25:5"
          }
        ],
        "contractDependencies": [
          61,
          2575,
          5807,
          7733,
          9170
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 886,
          "nodeType": "StructuredDocumentation",
          "src": "133:243:5",
          "text": "a sample paymaster that has whitelists for senders and targets.\n - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n - if at least one target is whitelisted, then ONLY whitelisted targets are allowed."
        },
        "fullyImplemented": true,
        "id": 988,
        "linearizedBaseContracts": [
          988,
          61,
          2575,
          7733,
          9170,
          5807
        ],
        "name": "WhitelistPaymaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "dd1bcaa1",
            "id": 890,
            "mutability": "mutable",
            "name": "useSenderWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "440:30:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 889,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "440:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "4f28bfb9",
            "id": 892,
            "mutability": "mutable",
            "name": "useTargetWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "476:30:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 891,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "476:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8222f07d",
            "id": 896,
            "mutability": "mutable",
            "name": "senderWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "512:46:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 895,
              "keyType": {
                "id": 893,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "521:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "512:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 894,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "530:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "858437b0",
            "id": 900,
            "mutability": "mutable",
            "name": "targetWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "564:46:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 899,
              "keyType": {
                "id": 897,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "573:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "564:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 898,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "582:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 917,
              "nodeType": "Block",
              "src": "675:80:5",
              "statements": [
                {
                  "expression": {
                    "id": 911,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 907,
                        "name": "senderWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 896,
                        "src": "685:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 909,
                      "indexExpression": {
                        "id": 908,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 902,
                        "src": "701:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "685:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 910,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "685:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 912,
                  "nodeType": "ExpressionStatement",
                  "src": "685:28:5"
                },
                {
                  "expression": {
                    "id": 915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 913,
                      "name": "useSenderWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 890,
                      "src": "723:18:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 914,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "744:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "723:25:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 916,
                  "nodeType": "ExpressionStatement",
                  "src": "723:25:5"
                }
              ]
            },
            "functionSelector": "2f10a6c6",
            "id": 918,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 905,
                "modifierName": {
                  "id": 904,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7682,
                  "src": "665:9:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "665:9:5"
              }
            ],
            "name": "whitelistSender",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 902,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 918,
                  "src": "642:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 901,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "641:16:5"
            },
            "returnParameters": {
              "id": 906,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "675:0:5"
            },
            "scope": 988,
            "src": "617:138:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 935,
              "nodeType": "Block",
              "src": "818:80:5",
              "statements": [
                {
                  "expression": {
                    "id": 929,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 925,
                        "name": "targetWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 900,
                        "src": "828:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 927,
                      "indexExpression": {
                        "id": 926,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 920,
                        "src": "844:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "828:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 928,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "852:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "828:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 930,
                  "nodeType": "ExpressionStatement",
                  "src": "828:28:5"
                },
                {
                  "expression": {
                    "id": 933,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 931,
                      "name": "useTargetWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 892,
                      "src": "866:18:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 932,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "887:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "866:25:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 934,
                  "nodeType": "ExpressionStatement",
                  "src": "866:25:5"
                }
              ]
            },
            "functionSelector": "1cfda9fa",
            "id": 936,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 923,
                "modifierName": {
                  "id": 922,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7682,
                  "src": "808:9:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "808:9:5"
              }
            ],
            "name": "whitelistTarget",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 920,
                  "mutability": "mutable",
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 936,
                  "src": "785:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 919,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:16:5"
            },
            "returnParameters": {
              "id": 924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "818:0:5"
            },
            "scope": 988,
            "src": "760:138:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              41
            ],
            "body": {
              "id": 986,
              "nodeType": "Block",
              "src": "1193:375:5",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 952,
                        "name": "relayRequest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 938,
                        "src": "1204:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                          "typeString": "struct GsnTypes.RelayRequest calldata"
                        }
                      },
                      {
                        "id": 953,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 940,
                        "src": "1218:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 954,
                        "name": "approvalData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 942,
                        "src": "1229:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 955,
                        "name": "maxPossibleGas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 944,
                        "src": "1243:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 956,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1203:55:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_struct$_RelayRequest_$6731_calldata_ptr_$_t_bytes_calldata_ptr_$_t_bytes_calldata_ptr_$_t_uint256_$",
                      "typeString": "tuple(struct GsnTypes.RelayRequest calldata,bytes calldata,bytes calldata,uint256)"
                    }
                  },
                  "id": 957,
                  "nodeType": "ExpressionStatement",
                  "src": "1203:55:5"
                },
                {
                  "condition": {
                    "id": 958,
                    "name": "useSenderWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 890,
                    "src": "1274:18:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 969,
                  "nodeType": "IfStatement",
                  "src": "1269:129:5",
                  "trueBody": {
                    "id": 968,
                    "nodeType": "Block",
                    "src": "1295:103:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 960,
                                "name": "senderWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 896,
                                "src": "1318:15:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 964,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 961,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "1334:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 962,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6728,
                                  "src": "1334:20:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$5669_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 963,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "from",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 5656,
                                "src": "1334:25:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1318:42:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73656e646572206e6f742077686974656c6973746564",
                              "id": 965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1362:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              },
                              "value": "sender not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              }
                            ],
                            "id": 959,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1309:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1309:78:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 967,
                        "nodeType": "ExpressionStatement",
                        "src": "1309:78:5"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "id": 970,
                    "name": "useTargetWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 892,
                    "src": "1412:18:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 981,
                  "nodeType": "IfStatement",
                  "src": "1407:127:5",
                  "trueBody": {
                    "id": 980,
                    "nodeType": "Block",
                    "src": "1433:101:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 972,
                                "name": "targetWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 900,
                                "src": "1456:15:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 976,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 973,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "1472:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 974,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6728,
                                  "src": "1472:20:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$5669_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 975,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "to",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 5658,
                                "src": "1472:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1456:40:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "746172676574206e6f742077686974656c6973746564",
                              "id": 977,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1498:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              },
                              "value": "target not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              }
                            ],
                            "id": 971,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1447:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1447:76:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 979,
                        "nodeType": "ExpressionStatement",
                        "src": "1447:76:5"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "",
                        "id": 982,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1551:2:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 983,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1555:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 984,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1550:11:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$_t_bool_$",
                      "typeString": "tuple(literal_string \"\",bool)"
                    }
                  },
                  "functionReturnParameters": 951,
                  "id": 985,
                  "nodeType": "Return",
                  "src": "1543:18:5"
                }
              ]
            },
            "functionSelector": "00be5dd4",
            "id": 987,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "preRelayedCall",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 946,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1107:8:5"
            },
            "parameters": {
              "id": 945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 938,
                  "mutability": "mutable",
                  "name": "relayRequest",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "937:43:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                    "typeString": "struct GsnTypes.RelayRequest"
                  },
                  "typeName": {
                    "id": 937,
                    "name": "GsnTypes.RelayRequest",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 6731,
                    "src": "937:21:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RelayRequest_$6731_storage_ptr",
                      "typeString": "struct GsnTypes.RelayRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 940,
                  "mutability": "mutable",
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "990:24:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 939,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "990:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 942,
                  "mutability": "mutable",
                  "name": "approvalData",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1024:27:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 941,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1024:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 944,
                  "mutability": "mutable",
                  "name": "maxPossibleGas",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1061:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 943,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "927:162:5"
            },
            "returnParameters": {
              "id": 951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 948,
                  "mutability": "mutable",
                  "name": "context",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1141:20:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 947,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1141:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 950,
                  "mutability": "mutable",
                  "name": "revertOnRecipientRevert",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1163:28:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 949,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1140:52:5"
            },
            "scope": 988,
            "src": "904:664:5",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 989,
        "src": "376:1194:5"
      }
    ],
    "src": "31:1540:5"
  },
  "legacyAST": {
    "absolutePath": "/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/WhitelistPaymaster.sol",
    "exportedSymbols": {
      "AcceptEverythingPaymaster": [
        61
      ],
      "BasePaymaster": [
        2575
      ],
      "Context": [
        9170
      ],
      "GsnEip712Library": [
        6706
      ],
      "GsnTypes": [
        6732
      ],
      "GsnUtils": [
        6779
      ],
      "IForwarder": [
        5737
      ],
      "IPaymaster": [
        5807
      ],
      "IRelayHub": [
        6146
      ],
      "IRelayRecipient": [
        6175
      ],
      "IStakeManager": [
        6338
      ],
      "MinLibBytes": [
        6894
      ],
      "Ownable": [
        7733
      ],
      "SafeMath": [
        8204
      ],
      "WhitelistPaymaster": [
        988
      ]
    },
    "id": 989,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 883,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:5"
      },
      {
        "id": 884,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "55:33:5"
      },
      {
        "absolutePath": "/Users/dror/IdeaProjects/depl/gsn/packages/paymasters/contracts/AcceptEverythingPaymaster.sol",
        "file": "./AcceptEverythingPaymaster.sol",
        "id": 885,
        "nodeType": "ImportDirective",
        "scope": 989,
        "sourceUnit": 62,
        "src": "90:41:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 887,
              "name": "AcceptEverythingPaymaster",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 61,
              "src": "407:25:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AcceptEverythingPaymaster_$61",
                "typeString": "contract AcceptEverythingPaymaster"
              }
            },
            "id": 888,
            "nodeType": "InheritanceSpecifier",
            "src": "407:25:5"
          }
        ],
        "contractDependencies": [
          61,
          2575,
          5807,
          7733,
          9170
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 886,
          "nodeType": "StructuredDocumentation",
          "src": "133:243:5",
          "text": "a sample paymaster that has whitelists for senders and targets.\n - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n - if at least one target is whitelisted, then ONLY whitelisted targets are allowed."
        },
        "fullyImplemented": true,
        "id": 988,
        "linearizedBaseContracts": [
          988,
          61,
          2575,
          7733,
          9170,
          5807
        ],
        "name": "WhitelistPaymaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "dd1bcaa1",
            "id": 890,
            "mutability": "mutable",
            "name": "useSenderWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "440:30:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 889,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "440:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "4f28bfb9",
            "id": 892,
            "mutability": "mutable",
            "name": "useTargetWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "476:30:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 891,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "476:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8222f07d",
            "id": 896,
            "mutability": "mutable",
            "name": "senderWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "512:46:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 895,
              "keyType": {
                "id": 893,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "521:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "512:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 894,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "530:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "858437b0",
            "id": 900,
            "mutability": "mutable",
            "name": "targetWhitelist",
            "nodeType": "VariableDeclaration",
            "scope": 988,
            "src": "564:46:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 899,
              "keyType": {
                "id": 897,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "573:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "564:23:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 898,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "582:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 917,
              "nodeType": "Block",
              "src": "675:80:5",
              "statements": [
                {
                  "expression": {
                    "id": 911,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 907,
                        "name": "senderWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 896,
                        "src": "685:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 909,
                      "indexExpression": {
                        "id": 908,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 902,
                        "src": "701:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "685:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 910,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "685:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 912,
                  "nodeType": "ExpressionStatement",
                  "src": "685:28:5"
                },
                {
                  "expression": {
                    "id": 915,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 913,
                      "name": "useSenderWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 890,
                      "src": "723:18:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 914,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "744:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "723:25:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 916,
                  "nodeType": "ExpressionStatement",
                  "src": "723:25:5"
                }
              ]
            },
            "functionSelector": "2f10a6c6",
            "id": 918,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 905,
                "modifierName": {
                  "id": 904,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7682,
                  "src": "665:9:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "665:9:5"
              }
            ],
            "name": "whitelistSender",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 902,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 918,
                  "src": "642:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 901,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "641:16:5"
            },
            "returnParameters": {
              "id": 906,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "675:0:5"
            },
            "scope": 988,
            "src": "617:138:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 935,
              "nodeType": "Block",
              "src": "818:80:5",
              "statements": [
                {
                  "expression": {
                    "id": 929,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 925,
                        "name": "targetWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 900,
                        "src": "828:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 927,
                      "indexExpression": {
                        "id": 926,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 920,
                        "src": "844:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "828:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 928,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "852:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "828:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 930,
                  "nodeType": "ExpressionStatement",
                  "src": "828:28:5"
                },
                {
                  "expression": {
                    "id": 933,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 931,
                      "name": "useTargetWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 892,
                      "src": "866:18:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 932,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "887:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "866:25:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 934,
                  "nodeType": "ExpressionStatement",
                  "src": "866:25:5"
                }
              ]
            },
            "functionSelector": "1cfda9fa",
            "id": 936,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 923,
                "modifierName": {
                  "id": 922,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 7682,
                  "src": "808:9:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "808:9:5"
              }
            ],
            "name": "whitelistTarget",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 920,
                  "mutability": "mutable",
                  "name": "target",
                  "nodeType": "VariableDeclaration",
                  "scope": 936,
                  "src": "785:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 919,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:16:5"
            },
            "returnParameters": {
              "id": 924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "818:0:5"
            },
            "scope": 988,
            "src": "760:138:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              41
            ],
            "body": {
              "id": 986,
              "nodeType": "Block",
              "src": "1193:375:5",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 952,
                        "name": "relayRequest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 938,
                        "src": "1204:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                          "typeString": "struct GsnTypes.RelayRequest calldata"
                        }
                      },
                      {
                        "id": 953,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 940,
                        "src": "1218:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 954,
                        "name": "approvalData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 942,
                        "src": "1229:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 955,
                        "name": "maxPossibleGas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 944,
                        "src": "1243:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 956,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1203:55:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_struct$_RelayRequest_$6731_calldata_ptr_$_t_bytes_calldata_ptr_$_t_bytes_calldata_ptr_$_t_uint256_$",
                      "typeString": "tuple(struct GsnTypes.RelayRequest calldata,bytes calldata,bytes calldata,uint256)"
                    }
                  },
                  "id": 957,
                  "nodeType": "ExpressionStatement",
                  "src": "1203:55:5"
                },
                {
                  "condition": {
                    "id": 958,
                    "name": "useSenderWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 890,
                    "src": "1274:18:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 969,
                  "nodeType": "IfStatement",
                  "src": "1269:129:5",
                  "trueBody": {
                    "id": 968,
                    "nodeType": "Block",
                    "src": "1295:103:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 960,
                                "name": "senderWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 896,
                                "src": "1318:15:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 964,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 961,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "1334:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 962,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6728,
                                  "src": "1334:20:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$5669_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 963,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "from",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 5656,
                                "src": "1334:25:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1318:42:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73656e646572206e6f742077686974656c6973746564",
                              "id": 965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1362:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              },
                              "value": "sender not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              }
                            ],
                            "id": 959,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1309:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1309:78:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 967,
                        "nodeType": "ExpressionStatement",
                        "src": "1309:78:5"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "id": 970,
                    "name": "useTargetWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 892,
                    "src": "1412:18:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 981,
                  "nodeType": "IfStatement",
                  "src": "1407:127:5",
                  "trueBody": {
                    "id": 980,
                    "nodeType": "Block",
                    "src": "1433:101:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 972,
                                "name": "targetWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 900,
                                "src": "1456:15:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 976,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 973,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 938,
                                    "src": "1472:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 974,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 6728,
                                  "src": "1472:20:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$5669_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 975,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "to",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 5658,
                                "src": "1472:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1456:40:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "746172676574206e6f742077686974656c6973746564",
                              "id": 977,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1498:24:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              },
                              "value": "target not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              }
                            ],
                            "id": 971,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1447:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1447:76:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 979,
                        "nodeType": "ExpressionStatement",
                        "src": "1447:76:5"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "",
                        "id": 982,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1551:2:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 983,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1555:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 984,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1550:11:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$_t_bool_$",
                      "typeString": "tuple(literal_string \"\",bool)"
                    }
                  },
                  "functionReturnParameters": 951,
                  "id": 985,
                  "nodeType": "Return",
                  "src": "1543:18:5"
                }
              ]
            },
            "functionSelector": "00be5dd4",
            "id": 987,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "preRelayedCall",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 946,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1107:8:5"
            },
            "parameters": {
              "id": 945,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 938,
                  "mutability": "mutable",
                  "name": "relayRequest",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "937:43:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RelayRequest_$6731_calldata_ptr",
                    "typeString": "struct GsnTypes.RelayRequest"
                  },
                  "typeName": {
                    "id": 937,
                    "name": "GsnTypes.RelayRequest",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 6731,
                    "src": "937:21:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RelayRequest_$6731_storage_ptr",
                      "typeString": "struct GsnTypes.RelayRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 940,
                  "mutability": "mutable",
                  "name": "signature",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "990:24:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 939,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "990:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 942,
                  "mutability": "mutable",
                  "name": "approvalData",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1024:27:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 941,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1024:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 944,
                  "mutability": "mutable",
                  "name": "maxPossibleGas",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1061:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 943,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "927:162:5"
            },
            "returnParameters": {
              "id": 951,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 948,
                  "mutability": "mutable",
                  "name": "context",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1141:20:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 947,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1141:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 950,
                  "mutability": "mutable",
                  "name": "revertOnRecipientRevert",
                  "nodeType": "VariableDeclaration",
                  "scope": 987,
                  "src": "1163:28:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 949,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1140:52:5"
            },
            "scope": 988,
            "src": "904:664:5",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 989,
        "src": "376:1194:5"
      }
    ],
    "src": "31:1540:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.1.0",
  "updatedAt": "2021-06-09T09:33:44.094Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "params": {
          "context": "- the call context, as returned by the preRelayedCall",
          "gasUseWithoutPost": "- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.",
          "relayData": "- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.",
          "success": "- true if the relayed call succeeded, false if it reverted"
        }
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "params": {
          "approvalData": "- extra dapp-specific data (e.g. signature from trusted party)",
          "maxPossibleGas": "- based on values returned from {@link getGasAndDataLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).",
          "relayRequest": "- the full relay request structure",
          "signature": "- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getGasAndDataLimits()": {
        "notice": "Return the Gas Limits and msg.data max size constants used by the Paymaster."
      },
      "getHubAddr()": {
        "notice": "return the relayHub of this contract."
      },
      "getRelayHubDeposit()": {
        "notice": "check current deposit on relay hub."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "notice": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state."
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "notice": "Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \"revert\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \"rejectOnRecipientRevert\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \"delegate\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster."
      },
      "withdrawRelayHubDepositTo(uint256,address)": {
        "notice": "withdraw deposit from relayHub"
      }
    },
    "notice": "a sample paymaster that has whitelists for senders and targets. - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed. - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.",
    "version": 1
  }
}