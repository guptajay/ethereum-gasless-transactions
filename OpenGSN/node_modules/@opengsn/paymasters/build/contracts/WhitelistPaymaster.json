{
  "contractName": "WhitelistPaymaster",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLDATA_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORWARDER_HUB_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYMASTER_ACCEPTANCE_BUDGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POST_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRE_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "gasPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        }
      ],
      "name": "_verifyForwarder",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasAndDataLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "acceptanceBudget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calldataSizeLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymaster.GasAndDataLimits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHubAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayHubDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gasUseWithoutPost",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pctRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayWorker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "clientId",
              "type": "uint256"
            }
          ],
          "internalType": "struct GsnTypes.RelayData",
          "name": "relayData",
          "type": "tuple"
        }
      ],
      "name": "postRelayedCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "senderWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRelayHub",
          "name": "hub",
          "type": "address"
        }
      ],
      "name": "setRelayHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "targetWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useSenderWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useTargetWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPaymaster",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "withdrawRelayHubDepositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "whitelistSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "whitelistTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "gasPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "approvalData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxPossibleGas",
          "type": "uint256"
        }
      ],
      "name": "preRelayedCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "revertOnRecipientRevert",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLDATA_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORWARDER_HUB_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMASTER_ACCEPTANCE_BUDGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POST_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"}],\"name\":\"_verifyForwarder\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAndDataLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acceptanceBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSizeLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymaster.GasAndDataLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayHubDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUseWithoutPost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleGas\",\"type\":\"uint256\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"revertOnRecipientRevert\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setRelayHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSenderWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useTargetWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPaymaster\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"whitelistSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"whitelistTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawRelayHubDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"params\":{\"context\":\"- the call context, as returned by the preRelayedCall\",\"gasUseWithoutPost\":\"- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.\",\"relayData\":\"- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.\",\"success\":\"- true if the relayed call succeeded, false if it reverted\"}},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"params\":{\"approvalData\":\"- extra dapp-specific data (e.g. signature from trusted party)\",\"maxPossibleGas\":\"- based on values returned from {@link getGasAndDataLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\",\"relayRequest\":\"- the full relay request structure\",\"signature\":\"- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGasAndDataLimits()\":{\"notice\":\"Return the Gas Limits and msg.data max size constants used by the Paymaster.\"},\"getHubAddr()\":{\"notice\":\"return the relayHub of this contract.\"},\"getRelayHubDeposit()\":{\"notice\":\"check current deposit on relay hub.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"notice\":\"This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state.\"},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"notice\":\"Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \\\"revert\\\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster.\"},\"withdrawRelayHubDepositTo(uint256,address)\":{\"notice\":\"withdraw deposit from relayHub\"}},\"notice\":\"a sample paymaster that has whitelists for senders and targets. - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed. - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/WhitelistPaymaster.sol\":\"WhitelistPaymaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/AcceptEverythingPaymaster.sol\":{\"keccak256\":\"0x8bba6bff1c25e5dc1cc7ae77ef1845682454cf4520d0b62d4db36dd4f377ecd8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8888bb62506059b196f64088f1ff3d58dd3835f2ab014649c6c73389cb0ca76e\",\"dweb:/ipfs/QmZGWiusQYYf8LUpP5zEr7UkcvwsZFkeYtFtJpEig2QZn9\"]},\"/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/WhitelistPaymaster.sol\":{\"keccak256\":\"0xbc638a90a4ec98a94d04115fefb55fe4ea8493a4b5be0aaea5cabf53715c56c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29ba520ed1f9218dac9ef0d996e094410af8daa831e1e8db159a848904085a4b\",\"dweb:/ipfs/QmdgDevgNknNfoeF6mEB9oudsdPpidZB6vLxUWgCqaVLB1\"]},\"@opengsn/contracts/src/BasePaymaster.sol\":{\"keccak256\":\"0x037963afa348ba25ed25d26f07a1b3545534e5447262eac8218f92246797569e\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://482ab51f9c7a4fc86d3d1540a2465b1f5bf0a7244cc61de186233321dddbcdee\",\"dweb:/ipfs/QmY4geP56GPzkHADJ5xdks1ztrtFeVHqMu2SabHn8E3uuB\"]},\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"keccak256\":\"0xca05fe8ee1d0bbdd9edd83f16b8481fa67704f0ed5a42d5c0f76c8a3a47d73f4\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://e42577c586894c9fc9e11a3281c0e2d4183121714fd1101380b6b2b66c144ba3\",\"dweb:/ipfs/QmPQphvUxhvnYGXtNRbU7WcmbEP2N7mMDgC5R8R9AqC9xG\"]},\"@opengsn/contracts/src/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x9c717edb87debd2e6d3a7291ae1b2ec3248776617f20dbc2cbba66c7f1bf749c\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://ef2ce174df7e8dd8ac15c112768028bd89a517e21c354d5d35aa071f923e721d\",\"dweb:/ipfs/QmYHFK3FzfiiDRWhM8Q6KdT6YKmaA5JfDNKj6am7EymJU3\"]},\"@opengsn/contracts/src/interfaces/IRelayHub.sol\":{\"keccak256\":\"0x3497133a7147174c498d2feeb2569b973396a8c2c220b5876fd9eb3b59841c85\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://32bb285a0f675310ee87647d00717e2dee9dbc7179e5455a3e1d7a2e121b6bf7\",\"dweb:/ipfs/QmZABWeS7pi5KfhoDUKyZHEvwqiAL4sYvjr3UcWZ7SvqCX\"]},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92112fc87990f2d55c538946266c48f43e6ca442186ef3b8172eb4632deb0db3\",\"dweb:/ipfs/QmU6pqFXYT8fYfyhw7viRA775eBH4W7PAd589DVFGtSgxo\"]},\"@opengsn/contracts/src/interfaces/IStakeManager.sol\":{\"keccak256\":\"0x834859879435b9032dc629a03baaa0d7ce645c184997985a7b8da944086753bb\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://08ac05ead3b791dc42287fdfb3ac1a3734876ed19971ddfedc904910dc88ee72\",\"dweb:/ipfs/QmSPBuZtdr8QtLWQSzX7eQo754bxzR2wnxoeWJxGWzK8Qb\"]},\"@opengsn/contracts/src/utils/GsnEip712Library.sol\":{\"keccak256\":\"0x329a0634ba63c397bde0cf2b003b577cacf1bfbab9616bbf415781de243730d3\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://a6e52a2b8598d3478272f8791be1493645a14d850fac70c8a7180d72f00a45d2\",\"dweb:/ipfs/QmQmbSNNBU1LEgxEmhpVqhbts3RjEn9Zavwv5PmQJEdfoZ\"]},\"@opengsn/contracts/src/utils/GsnTypes.sol\":{\"keccak256\":\"0x632b33731c279b0a14b00ceeaaed067e0570881bf31ef383b6970cb595566269\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://c4ef0205cbfd132c978dac437b361749caecd2e69ae339b5826cb65a086bdbc1\",\"dweb:/ipfs/Qme5emF1fkmqfTWydJ4S97CbTidEx72VYvKLzTbapH3nGB\"]},\"@opengsn/contracts/src/utils/GsnUtils.sol\":{\"keccak256\":\"0x93465757df9b5721f0dde979be1675f82296b8f3cd196c6eee29d828698cb0de\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://b9a5628093b0cffc70f851a64aef968e4a379b98d60a7855fa9afce102dad052\",\"dweb:/ipfs/QmaQZXC9vxMrhwXXsr8C6fNpYPQx1PfiAbfmweL3aHZCy5\"]},\"@opengsn/contracts/src/utils/MinLibBytes.sol\":{\"keccak256\":\"0x8063af8e0f134be3d794ad39bdc0041f33a16c91a4ee7abb968d4c15c8d10c54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c56adf5ddc717546e922b5f0cdb1d2bf084b070d2256b684a746d535cefdfa23\",\"dweb:/ipfs/QmbGgdbkpg4fz79c8tgKFJB4afXHRYgL3iMRf9KBQSVkWu\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2ebbbe6d0011175bd9e7268b83de3f9c2f9d8d4cbfbaef12aff977d7d727163\",\"dweb:/ipfs/Qmd5c7Vxtis9wzkDNhxwc6A2QT5H9xn9kfjhx7qx44vpro\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7fec968dcd68e13961521fa3c7dd87baecad91a2653b19240e81f21cc4f3ba85\",\"dweb:/ipfs/QmaXtsYt4Mphm8XHNUfk2me1cF3ssS2SqDBNFpYAzMjomC\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://163776cbf565c722232393aa2d62cbe8a2ffb5805986abf4906c00e1e07450a6\",\"dweb:/ipfs/QmPZoN9T3cb6o8bGhjBPZcz7im8T8DWhpr3tjLwhJJHx9N\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "376:1341:7:-:0;;;;;;;;;;;;-1:-1:-1;867:23:45;665:10:51;867:9:45;:23::i;:::-;376:1341:7;;2041:169:45;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:45;;;-1:-1:-1;;;;;;2131:17:45;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2086:124;2041:169;:::o;376:1341:7:-;;;;;;;",
  "deployedSourceMap": "376:1341:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3026:8:27;;-1:-1:-1;;;;;3026:8:27;3010:69;;;;-1:-1:-1;;;3010:69:27;;7271:2:58;3010:69:27;;;7253:21:58;7310:2;7290:18;;;7283:30;7349:27;7329:18;;;7322:55;7394:18;;3010:69:27;;;;;;;;;3089:8;;:51;;-1:-1:-1;;;3089:51:27;;3134:4;3089:51;;;4813::58;-1:-1:-1;;;;;3089:8:27;;;;:19;;3115:9;;4786:18:58;;3089:51:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;376:1341:7;;;;;904:811;;;;;;;;;;-1:-1:-1;904:811:7;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;760:138;;;;;;;;;;-1:-1:-1;760:138:7;;;;;:::i;:::-;;:::i;:::-;;2643:139:27;;;;;;;;;;;;;:::i;:::-;;;10157:25:58;;;10145:2;10130:18;2643:139:27;10011:177:58;3192:139:27;;;;;;;;;;-1:-1:-1;3192:139:27;;;;;:::i;:::-;;:::i;617:138:7:-;;;;;;;;;;-1:-1:-1;617:138:7;;;;;:::i;:::-;;:::i;476:30::-;;;;;;;;;;-1:-1:-1;476:30:7;;;;-1:-1:-1;;;476:30:7;;;;;;;;;5040:14:58;;5033:22;5015:41;;5003:2;4988:18;476:30:7;4875:187:58;1148:51:27;;;;;;;;;;;;1194:5;1148:51;;1605:92:45;;;;;;;;;;;;;:::i;603:102:27:-;;;;;;;;;;-1:-1:-1;689:8:27;;-1:-1:-1;;;;;689:8:27;603:102;;;-1:-1:-1;;;;;4831:32:58;;;4813:51;;4801:2;4786:18;603:102:27;4667:203:58;932:258:0;;;;;;;;;;-1:-1:-1;932:258:0;;;;;:::i;:::-;;;;;;;2262:84:27;;;;;;;;;;-1:-1:-1;2262:84:27;;;;;:::i;:::-;;:::i;2477:115::-;;;;;;;;;;-1:-1:-1;2568:17:27;;-1:-1:-1;;;;;2568:17:27;2477:115;;512:46:7;;;;;;;;;;-1:-1:-1;512:46:7;;;;;:::i;:::-;;;;;;;;;;;;;;;;564;;;;;;;;;;-1:-1:-1;564:46:7;;;;;:::i;:::-;;;;;;;;;;;;;;;;973:85:45;;;;;;;;;;-1:-1:-1;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;973:85;;382:149:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1733:274:27:-;;;;;;;;;;-1:-1:-1;1733:274:27;;;;;:::i;:::-;;:::i;1206:362::-;;;;;;;;;;;;;:::i;:::-;;;;;;9797:13:58;;9779:32;;9867:4;9855:17;;;9849:24;9827:20;;;9820:54;9930:4;9918:17;;;9912:24;9890:20;;;9883:54;9993:4;9981:17;;;9975:24;9953:20;;;9946:54;;;;9766:3;9751:19;;9564:442;776:54:27;;;;;;;;;;;;825:5;776:54;;971:60;;;;;;;;;;;;1025:6;971:60;;2352:119;;;;;;;;;;-1:-1:-1;2352:119:27;;;;;:::i;:::-;;:::i;440:30:7:-;;;;;;;;;;-1:-1:-1;440:30:7;;;;-1:-1:-1;;;440:30:7;;;;;;1037:105:27;;;;;;;;;;;;;:::i;1846:189:45:-;;;;;;;;;;-1:-1:-1;1846:189:45;;;;;:::i;:::-;;:::i;906:59:27:-;;;;;;;;;;;;959:6;906:59;;904:811:7;1141:20;1163:28;1248:24;;1240:65;;;;-1:-1:-1;;;1240:65:7;;7978:2:58;1240:65:7;;;7960:21:58;8017:2;7997:18;;;7990:30;8056;8036:18;;;8029:58;8104:18;;1240:65:7;7776:352:58;1240:65:7;1323:22;;;;:12;:22;:::i;:::-;:36;;;;;;;:::i;:::-;:48;;-1:-1:-1;1315:90:7;;;;-1:-1:-1;;;1315:90:7;;9408:2:58;1315:90:7;;;9390:21:58;9447:2;9427:18;;;9420:30;9486:31;9466:18;;;9459:59;9535:18;;1315:90:7;9206:353:58;1315:90:7;1421:18;;-1:-1:-1;;;1421:18:7;;;;1416:129;;;1465:15;:42;1481:20;:12;;:20;:::i;:::-;:25;;;;;;;:::i;:::-;-1:-1:-1;;;;;1465:42:7;;;;;;;;;;;;-1:-1:-1;1465:42:7;;;;1456:78;;;;-1:-1:-1;;;1456:78:7;;9057:2:58;1456:78:7;;;9039:21:58;9096:2;9076:18;;;9069:30;-1:-1:-1;;;9115:18:58;;;9108:52;9177:18;;1456:78:7;8855:346:58;1456:78:7;1559:18;;-1:-1:-1;;;1559:18:7;;;;1554:127;;;1603:15;:40;1619:20;:12;;:20;:::i;:::-;:23;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1603:40:7;;;;;;;;;;;;-1:-1:-1;1603:40:7;;;;1594:76;;;;-1:-1:-1;;;1594:76:7;;5796:2:58;1594:76:7;;;5778:21:58;5835:2;5815:18;;;5808:30;-1:-1:-1;;;5854:18:58;;;5847:52;5916:18;;1594:76:7;5594:346:58;1594:76:7;-1:-1:-1;;1690:18:7;;;;;;;;;1702:5;1690:18;;;904:811;;;;;;;;;:::o;760:138::-;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;-1:-1:-1;;;;;828:23:7::1;;::::0;;;:15:::1;:23;::::0;;;;:28;;-1:-1:-1;;828:28:7::1;852:4;828:28;::::0;;866:18:::1;:25:::0;;-1:-1:-1;;;;866:25:7::1;-1:-1:-1::0;;;866:25:7::1;::::0;;760:138::o;2643:139:27:-;2742:8;;:33;;-1:-1:-1;;;2742:33:27;;2769:4;2742:33;;;4813:51:58;2719:4:27;;-1:-1:-1;;;;;2742:8:27;;:18;;4786::58;;2742:33:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2735:40;;2643:139;:::o;3192:::-;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;3291:8:27::1;::::0;:33:::1;::::0;-1:-1:-1;;;3291:33:27;;::::1;::::0;::::1;10383:25:58::0;;;-1:-1:-1;;;;;10444:32:58;;;10424:18;;;10417:60;3291:8:27;;::::1;::::0;:17:::1;::::0;10356:18:58;;3291:33:27::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3192:139:::0;;:::o;617:138:7:-;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;-1:-1:-1;;;;;685:23:7::1;;::::0;;;:15:::1;:23;::::0;;;;:28;;-1:-1:-1;;685:28:7::1;709:4;685:28;::::0;;723:18:::1;:25:::0;;-1:-1:-1;;;;723:25:7::1;-1:-1:-1::0;;;723:25:7::1;::::0;;617:138::o;1605:92:45:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;2262:84:27:-;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;2325:8:27::1;:14:::0;;-1:-1:-1;;;;;;2325:14:27::1;-1:-1:-1::0;;;;;2325:14:27;;;::::1;::::0;;;::::1;::::0;;2262:84::o;382:149:0:-;450:13;474:50;;;;;;;;;;;;;;;;;;;382:149;:::o;1733:274:27:-;1876:22;;;;:12;:22;:::i;:::-;:32;;;;;;;;;:::i;:::-;1854:17;;-1:-1:-1;;;;;1854:17:27;;;1846:62;;;1838:99;;;;-1:-1:-1;;;1838:99:27;;7625:2:58;1838:99:27;;;7607:21:58;7664:2;7644:18;;;7637:30;7703:26;7683:18;;;7676:54;7747:18;;1838:99:27;7423:348:58;1838:99:27;1947:53;1987:12;1947:39;:53::i;:::-;1733:274;:::o;1206:362::-;1304:41;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1304:41:27;1369:192;;;;;;;;825:5;959:6;1091:51;;;;:::i;:::-;1369:192;;;;959:6;1369:192;;;;1025:6;1369:192;;;;1194:5;1369:192;;;1362:199;;1206:362;:::o;2352:119::-;1019:7:45;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;2435:17:27::1;:29:::0;;-1:-1:-1;;;;;;2435:29:27::1;-1:-1:-1::0;;;;;2435:29:27;;;::::1;::::0;;;::::1;::::0;;2352:119::o;1037:105::-;1091:51;825:5;959:6;1091:51;:::i;:::-;1037:105;:::o;1846:189:45:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:45;665:10:51;1185:23:45;1177:68;;;;-1:-1:-1;;;1177:68:45;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:45;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:45;;6507:2:58;1926:73:45::1;::::0;::::1;6489:21:58::0;6546:2;6526:18;;;6519:30;6585:34;6565:18;;;6558:62;-1:-1:-1;;;6636:18:58;;;6629:36;6682:19;;1926:73:45::1;6305:402:58::0;1926:73:45::1;2009:19;2019:8;2041:169:::0;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:45;;;-1:-1:-1;;;;;;2131:17:45;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2086:124;2041:169;:::o;2051:538:39:-;2153:12;;2187:20;:12;;:20;:::i;:::-;:23;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2187:34:39;-1:-1:-1;;;2320:22:39;;;;:12;:22;:::i;:::-;:32;;;;;;;;;:::i;:::-;2235:131;;-1:-1:-1;;;;;4831:32:58;;;2235:131:39;;;4813:51:58;4786:18;;2235:131:39;;;-1:-1:-1;;2235:131:39;;;;;;;;;;;;;;-1:-1:-1;;;;;2235:131:39;-1:-1:-1;;;;;;2235:131:39;;;;;;;;;;2187:189;;;;2235:131;2187:189;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2152:224;;;;2394:7;2386:48;;;;-1:-1:-1;;;2386:48:39;;6914:2:58;2386:48:39;;;6896:21:58;6953:2;6933:18;;;6926:30;6992;6972:18;;;6965:58;7040:18;;2386:48:39;6712:352:58;2386:48:39;2452:3;:10;2466:2;2452:16;2444:61;;;;-1:-1:-1;;;2444:61:39;;8335:2:58;2444:61:39;;;8317:21:58;;;8354:18;;;8347:30;8413:34;8393:18;;;8386:62;8465:18;;2444:61:39;8133:356:58;2444:61:39;2534:3;2523:23;;;;;;;;;;;;:::i;:::-;2515:67;;;;-1:-1:-1;;;2515:67:39;;6147:2:58;2515:67:39;;;6129:21:58;6186:2;6166:18;;;6159:30;6225:33;6205:18;;;6198:61;6276:18;;2515:67:39;5945:355:58;2515:67:39;2142:447;;2051:538;:::o;14:347:58:-;65:8;75:6;129:3;122:4;114:6;110:17;106:27;96:55;;147:1;144;137:12;96:55;-1:-1:-1;170:20:58;;213:18;202:30;;199:50;;;245:1;242;235:12;199:50;282:4;274:6;270:17;258:29;;334:3;327:4;318:6;310;306:19;302:30;299:39;296:59;;;351:1;348;341:12;296:59;14:347;;;;;:::o;366:160::-;431:5;476:2;467:6;462:3;458:16;454:25;451:45;;;492:1;489;482:12;451:45;-1:-1:-1;514:6:58;366:160;-1:-1:-1;366:160:58:o;531:247::-;590:6;643:2;631:9;622:7;618:23;614:32;611:52;;;659:1;656;649:12;611:52;698:9;685:23;717:31;742:5;717:31;:::i;:::-;767:5;531:247;-1:-1:-1;;;531:247:58:o;783:245::-;850:6;903:2;891:9;882:7;878:23;874:32;871:52;;;919:1;916;909:12;871:52;951:9;945:16;970:28;992:5;970:28;:::i;1033:895::-;1156:6;1164;1172;1180;1188;1241:3;1229:9;1220:7;1216:23;1212:33;1209:53;;;1258:1;1255;1248:12;1209:53;1298:9;1285:23;1327:18;1368:2;1360:6;1357:14;1354:34;;;1384:1;1381;1374:12;1354:34;1423:58;1473:7;1464:6;1453:9;1449:22;1423:58;:::i;:::-;1500:8;;-1:-1:-1;1397:84:58;-1:-1:-1;1585:2:58;1570:18;;1557:32;;-1:-1:-1;1598:28:58;1557:32;1598:28;:::i;:::-;1645:5;;-1:-1:-1;1697:2:58;1682:18;;1669:32;;-1:-1:-1;1754:2:58;1739:18;;1726:32;;1770:16;;;1767:36;;;1799:1;1796;1789:12;1767:36;-1:-1:-1;1822:24:58;;1880:3;1862:16;;;1858:26;1855:46;;;1897:1;1894;1887:12;1855:46;1920:2;1910:12;;;1033:895;;;;;;;;:::o;2203:366::-;2294:6;2347:2;2335:9;2326:7;2322:23;2318:32;2315:52;;;2363:1;2360;2353:12;2315:52;2403:9;2390:23;2436:18;2428:6;2425:30;2422:50;;;2468:1;2465;2458:12;2422:50;2491:72;2555:7;2546:6;2535:9;2531:22;2491:72;:::i;:::-;2481:82;2203:366;-1:-1:-1;;;;2203:366:58:o;2574:1030::-;2714:6;2722;2730;2738;2746;2754;2807:3;2795:9;2786:7;2782:23;2778:33;2775:53;;;2824:1;2821;2814:12;2775:53;2864:9;2851:23;2893:18;2934:2;2926:6;2923:14;2920:34;;;2950:1;2947;2940:12;2920:34;2973:72;3037:7;3028:6;3017:9;3013:22;2973:72;:::i;:::-;2963:82;;3098:2;3087:9;3083:18;3070:32;3054:48;;3127:2;3117:8;3114:16;3111:36;;;3143:1;3140;3133:12;3111:36;3182:60;3234:7;3223:8;3212:9;3208:24;3182:60;:::i;:::-;3261:8;;-1:-1:-1;3156:86:58;-1:-1:-1;3349:2:58;3334:18;;3321:32;;-1:-1:-1;3365:16:58;;;3362:36;;;3394:1;3391;3384:12;3362:36;;3433:60;3485:7;3474:8;3463:9;3459:24;3433:60;:::i;:::-;2574:1030;;;;-1:-1:-1;2574:1030:58;;;;;3594:2;3579:18;;;3566:32;;2574:1030;-1:-1:-1;;;;2574:1030:58:o;3609:184::-;3679:6;3732:2;3720:9;3711:7;3707:23;3703:32;3700:52;;;3748:1;3745;3738:12;3700:52;-1:-1:-1;3771:16:58;;3609:184;-1:-1:-1;3609:184:58:o;3798:323::-;3874:6;3882;3935:2;3923:9;3914:7;3910:23;3906:32;3903:52;;;3951:1;3948;3941:12;3903:52;3987:9;3974:23;3964:33;;4047:2;4036:9;4032:18;4019:32;4060:31;4085:5;4060:31;:::i;:::-;4110:5;4100:15;;;3798:323;;;;;:::o;4126:257::-;4167:3;4205:5;4199:12;4232:6;4227:3;4220:19;4248:63;4304:6;4297:4;4292:3;4288:14;4281:4;4274:5;4270:16;4248:63;:::i;:::-;4365:2;4344:15;-1:-1:-1;;4340:29:58;4331:39;;;;4372:4;4327:50;;4126:257;-1:-1:-1;;4126:257:58:o;4388:274::-;4517:3;4555:6;4549:13;4571:53;4617:6;4612:3;4605:4;4597:6;4593:17;4571:53;:::i;:::-;4640:16;;;;;4388:274;-1:-1:-1;;4388:274:58:o;5067:298::-;5236:2;5225:9;5218:21;5199:4;5256:44;5296:2;5285:9;5281:18;5273:6;5256:44;:::i;:::-;5248:52;;5350:6;5343:14;5336:22;5331:2;5320:9;5316:18;5309:50;5067:298;;;;;:::o;5370:219::-;5519:2;5508:9;5501:21;5482:4;5539:44;5579:2;5568:9;5564:18;5556:6;5539:44;:::i;8494:356::-;8696:2;8678:21;;;8715:18;;;8708:30;8774:34;8769:2;8754:18;;8747:62;8841:2;8826:18;;8494:356::o;10488:521::-;10565:4;10571:6;10631:11;10618:25;10725:2;10721:7;10710:8;10694:14;10690:29;10686:43;10666:18;10662:68;10652:96;;10744:1;10741;10734:12;10652:96;10771:33;;10823:20;;;-1:-1:-1;10866:18:58;10855:30;;10852:50;;;10898:1;10895;10888:12;10852:50;10931:4;10919:17;;-1:-1:-1;10962:14:58;10958:27;;;10948:38;;10945:58;;;10999:1;10996;10989:12;11014:332;11114:4;11172:11;11159:25;11266:3;11262:8;11251;11235:14;11231:29;11227:44;11207:18;11203:69;11193:97;;11286:1;11283;11276:12;11351:327;11446:4;11504:11;11491:25;11598:3;11594:8;11583;11567:14;11563:29;11559:44;11539:18;11535:69;11525:97;;11618:1;11615;11608:12;11683:225;11723:3;11754:1;11750:6;11747:1;11744:13;11741:136;;;11799:10;11794:3;11790:20;11787:1;11780:31;11834:4;11831:1;11824:15;11862:4;11859:1;11852:15;11741:136;-1:-1:-1;11893:9:58;;11683:225::o;11913:258::-;11985:1;11995:113;12009:6;12006:1;12003:13;11995:113;;;12085:11;;;12079:18;12066:11;;;12059:39;12031:2;12024:10;11995:113;;;12126:6;12123:1;12120:13;12117:48;;;12161:1;12152:6;12147:3;12143:16;12136:27;12117:48;;11913:258;;;:::o;12176:131::-;-1:-1:-1;;;;;12251:31:58;;12241:42;;12231:70;;12297:1;12294;12287:12;12312:118;12398:5;12391:13;12384:21;12377:5;12374:32;12364:60;;12420:1;12417;12410:12",
  "source": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./AcceptEverythingPaymaster.sol\";\n\n///a sample paymaster that has whitelists for senders and targets.\n/// - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n/// - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.\ncontract WhitelistPaymaster is AcceptEverythingPaymaster {\n\n    bool public useSenderWhitelist;\n    bool public useTargetWhitelist;\n    mapping (address=>bool) public senderWhitelist;\n    mapping (address=>bool) public targetWhitelist;\n\n    function whitelistSender(address sender) public onlyOwner {\n        senderWhitelist[sender]=true;\n        useSenderWhitelist = true;\n    }\n    function whitelistTarget(address target) public onlyOwner {\n        targetWhitelist[target]=true;\n        useTargetWhitelist = true;\n    }\n\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (signature, maxPossibleGas);\n        require(approvalData.length == 0, \"approvalData: invalid length\");\n        require(relayRequest.relayData.paymasterData.length == 0, \"paymasterData: invalid length\");\n\n        if ( useSenderWhitelist ) {\n            require( senderWhitelist[relayRequest.request.from], \"sender not whitelisted\");\n        }\n        if ( useTargetWhitelist ) {\n            require( targetWhitelist[relayRequest.request.to], \"target not whitelisted\");\n        }\n        return (\"\", false);\n    }\n}\n",
  "sourcePath": "/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/WhitelistPaymaster.sol",
  "ast": {
    "absolutePath": "/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/WhitelistPaymaster.sol",
    "exportedSymbols": {
      "AcceptEverythingPaymaster": [
        63
      ],
      "BasePaymaster": [
        3530
      ],
      "Context": [
        9928
      ],
      "GsnEip712Library": [
        7813
      ],
      "GsnTypes": [
        7841
      ],
      "GsnUtils": [
        7888
      ],
      "IForwarder": [
        6824
      ],
      "IPaymaster": [
        6897
      ],
      "IRelayHub": [
        7244
      ],
      "IRelayRecipient": [
        7273
      ],
      "IStakeManager": [
        7437
      ],
      "MinLibBytes": [
        8003
      ],
      "Ownable": [
        8916
      ],
      "SafeMath": [
        10423
      ],
      "WhitelistPaymaster": [
        1712
      ]
    },
    "id": 1713,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1590,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:7"
      },
      {
        "id": 1591,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "55:33:7"
      },
      {
        "absolutePath": "/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/AcceptEverythingPaymaster.sol",
        "file": "./AcceptEverythingPaymaster.sol",
        "id": 1592,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1713,
        "sourceUnit": 64,
        "src": "90:41:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1594,
              "name": "AcceptEverythingPaymaster",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 63,
              "src": "407:25:7"
            },
            "id": 1595,
            "nodeType": "InheritanceSpecifier",
            "src": "407:25:7"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1593,
          "nodeType": "StructuredDocumentation",
          "src": "133:243:7",
          "text": "a sample paymaster that has whitelists for senders and targets.\n - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n - if at least one target is whitelisted, then ONLY whitelisted targets are allowed."
        },
        "fullyImplemented": true,
        "id": 1712,
        "linearizedBaseContracts": [
          1712,
          63,
          3530,
          8916,
          9928,
          6897
        ],
        "name": "WhitelistPaymaster",
        "nameLocation": "385:18:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "dd1bcaa1",
            "id": 1597,
            "mutability": "mutable",
            "name": "useSenderWhitelist",
            "nameLocation": "452:18:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "440:30:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1596,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "440:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "4f28bfb9",
            "id": 1599,
            "mutability": "mutable",
            "name": "useTargetWhitelist",
            "nameLocation": "488:18:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "476:30:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1598,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "476:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8222f07d",
            "id": 1603,
            "mutability": "mutable",
            "name": "senderWhitelist",
            "nameLocation": "543:15:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "512:46:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1602,
              "keyType": {
                "id": 1600,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "521:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "512:23:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1601,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "530:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "858437b0",
            "id": 1607,
            "mutability": "mutable",
            "name": "targetWhitelist",
            "nameLocation": "595:15:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "564:46:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1606,
              "keyType": {
                "id": 1604,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "573:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "564:23:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1605,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "582:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1624,
              "nodeType": "Block",
              "src": "675:80:7",
              "statements": [
                {
                  "expression": {
                    "id": 1618,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1614,
                        "name": "senderWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1603,
                        "src": "685:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1616,
                      "indexExpression": {
                        "id": 1615,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1609,
                        "src": "701:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "685:23:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1617,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "685:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1619,
                  "nodeType": "ExpressionStatement",
                  "src": "685:28:7"
                },
                {
                  "expression": {
                    "id": 1622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1620,
                      "name": "useSenderWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1597,
                      "src": "723:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1621,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "744:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "723:25:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1623,
                  "nodeType": "ExpressionStatement",
                  "src": "723:25:7"
                }
              ]
            },
            "functionSelector": "2f10a6c6",
            "id": 1625,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1612,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1611,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8859,
                  "src": "665:9:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "665:9:7"
              }
            ],
            "name": "whitelistSender",
            "nameLocation": "626:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1609,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "650:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1625,
                  "src": "642:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1608,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "641:16:7"
            },
            "returnParameters": {
              "id": 1613,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "675:0:7"
            },
            "scope": 1712,
            "src": "617:138:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1642,
              "nodeType": "Block",
              "src": "818:80:7",
              "statements": [
                {
                  "expression": {
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1632,
                        "name": "targetWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1607,
                        "src": "828:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1634,
                      "indexExpression": {
                        "id": 1633,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1627,
                        "src": "844:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "828:23:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1635,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "852:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "828:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "828:28:7"
                },
                {
                  "expression": {
                    "id": 1640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1638,
                      "name": "useTargetWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1599,
                      "src": "866:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1639,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "887:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "866:25:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1641,
                  "nodeType": "ExpressionStatement",
                  "src": "866:25:7"
                }
              ]
            },
            "functionSelector": "1cfda9fa",
            "id": 1643,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1630,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1629,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8859,
                  "src": "808:9:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "808:9:7"
              }
            ],
            "name": "whitelistTarget",
            "nameLocation": "769:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1628,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1627,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "793:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1643,
                  "src": "785:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1626,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:16:7"
            },
            "returnParameters": {
              "id": 1631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "818:0:7"
            },
            "scope": 1712,
            "src": "760:138:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              42
            ],
            "body": {
              "id": 1710,
              "nodeType": "Block",
              "src": "1193:522:7",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 1660,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1648,
                        "src": "1204:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 1661,
                        "name": "maxPossibleGas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1652,
                        "src": "1215:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1662,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1203:27:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_calldata_ptr_$_t_uint256_$",
                      "typeString": "tuple(bytes calldata,uint256)"
                    }
                  },
                  "id": 1663,
                  "nodeType": "ExpressionStatement",
                  "src": "1203:27:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1668,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1665,
                            "name": "approvalData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1650,
                            "src": "1248:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 1666,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1248:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1271:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1248:24:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "617070726f76616c446174613a20696e76616c6964206c656e677468",
                        "id": 1669,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1274:30:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7d8c0e673c54c705986df4dd7c55d4166770d9449a60c6ca1c12bca8c8c62ee5",
                          "typeString": "literal_string \"approvalData: invalid length\""
                        },
                        "value": "approvalData: invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7d8c0e673c54c705986df4dd7c55d4166770d9449a60c6ca1c12bca8c8c62ee5",
                          "typeString": "literal_string \"approvalData: invalid length\""
                        }
                      ],
                      "id": 1664,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1240:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1670,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1240:65:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1671,
                  "nodeType": "ExpressionStatement",
                  "src": "1240:65:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1678,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 1673,
                                "name": "relayRequest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1646,
                                "src": "1323:12:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                  "typeString": "struct GsnTypes.RelayRequest calldata"
                                }
                              },
                              "id": 1674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "relayData",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 7839,
                              "src": "1323:22:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RelayData_$7833_calldata_ptr",
                                "typeString": "struct GsnTypes.RelayData calldata"
                              }
                            },
                            "id": 1675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "paymasterData",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7830,
                            "src": "1323:36:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 1676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1323:43:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1370:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1323:48:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7061796d6173746572446174613a20696e76616c6964206c656e677468",
                        "id": 1679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1373:31:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f0e0f7202abe3d2a01449ea8ef8fc9c6d541b7841e2ddaf2496bb00930e3bc54",
                          "typeString": "literal_string \"paymasterData: invalid length\""
                        },
                        "value": "paymasterData: invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f0e0f7202abe3d2a01449ea8ef8fc9c6d541b7841e2ddaf2496bb00930e3bc54",
                          "typeString": "literal_string \"paymasterData: invalid length\""
                        }
                      ],
                      "id": 1672,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1315:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1315:90:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1681,
                  "nodeType": "ExpressionStatement",
                  "src": "1315:90:7"
                },
                {
                  "condition": {
                    "id": 1682,
                    "name": "useSenderWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "1421:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1693,
                  "nodeType": "IfStatement",
                  "src": "1416:129:7",
                  "trueBody": {
                    "id": 1692,
                    "nodeType": "Block",
                    "src": "1442:103:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1684,
                                "name": "senderWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1603,
                                "src": "1465:15:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1688,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 1685,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1646,
                                    "src": "1481:12:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 1686,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 7836,
                                  "src": "1481:20:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$6754_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 1687,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "from",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 6741,
                                "src": "1481:25:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1465:42:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73656e646572206e6f742077686974656c6973746564",
                              "id": 1689,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1509:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              },
                              "value": "sender not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              }
                            ],
                            "id": 1683,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1456:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1456:78:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1691,
                        "nodeType": "ExpressionStatement",
                        "src": "1456:78:7"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "id": 1694,
                    "name": "useTargetWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1599,
                    "src": "1559:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1705,
                  "nodeType": "IfStatement",
                  "src": "1554:127:7",
                  "trueBody": {
                    "id": 1704,
                    "nodeType": "Block",
                    "src": "1580:101:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1696,
                                "name": "targetWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1607,
                                "src": "1603:15:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1700,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 1697,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1646,
                                    "src": "1619:12:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 1698,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 7836,
                                  "src": "1619:20:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$6754_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 1699,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "to",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 6743,
                                "src": "1619:23:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1603:40:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "746172676574206e6f742077686974656c6973746564",
                              "id": 1701,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1645:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              },
                              "value": "target not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              }
                            ],
                            "id": 1695,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1594:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1702,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1594:76:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1703,
                        "nodeType": "ExpressionStatement",
                        "src": "1594:76:7"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "",
                        "id": 1706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1698:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 1707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1702:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 1708,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1697:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$_t_bool_$",
                      "typeString": "tuple(literal_string \"\",bool)"
                    }
                  },
                  "functionReturnParameters": 1659,
                  "id": 1709,
                  "nodeType": "Return",
                  "src": "1690:18:7"
                }
              ]
            },
            "functionSelector": "00be5dd4",
            "id": 1711,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "preRelayedCall",
            "nameLocation": "913:14:7",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1654,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1107:8:7"
            },
            "parameters": {
              "id": 1653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1646,
                  "mutability": "mutable",
                  "name": "relayRequest",
                  "nameLocation": "968:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "937:43:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                    "typeString": "struct GsnTypes.RelayRequest"
                  },
                  "typeName": {
                    "id": 1645,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1644,
                      "name": "GsnTypes.RelayRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7840,
                      "src": "937:21:7"
                    },
                    "referencedDeclaration": 7840,
                    "src": "937:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RelayRequest_$7840_storage_ptr",
                      "typeString": "struct GsnTypes.RelayRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1648,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "1005:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "990:24:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1647,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "990:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1650,
                  "mutability": "mutable",
                  "name": "approvalData",
                  "nameLocation": "1039:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1024:27:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1649,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1024:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1652,
                  "mutability": "mutable",
                  "name": "maxPossibleGas",
                  "nameLocation": "1069:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1061:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1651,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "927:162:7"
            },
            "returnParameters": {
              "id": 1659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1656,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "1154:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1141:20:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1655,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1141:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1658,
                  "mutability": "mutable",
                  "name": "revertOnRecipientRevert",
                  "nameLocation": "1168:23:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1163:28:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1657,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1140:52:7"
            },
            "scope": 1712,
            "src": "904:811:7",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 1713,
        "src": "376:1341:7",
        "usedErrors": []
      }
    ],
    "src": "31:1687:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/WhitelistPaymaster.sol",
    "exportedSymbols": {
      "AcceptEverythingPaymaster": [
        63
      ],
      "BasePaymaster": [
        3530
      ],
      "Context": [
        9928
      ],
      "GsnEip712Library": [
        7813
      ],
      "GsnTypes": [
        7841
      ],
      "GsnUtils": [
        7888
      ],
      "IForwarder": [
        6824
      ],
      "IPaymaster": [
        6897
      ],
      "IRelayHub": [
        7244
      ],
      "IRelayRecipient": [
        7273
      ],
      "IStakeManager": [
        7437
      ],
      "MinLibBytes": [
        8003
      ],
      "Ownable": [
        8916
      ],
      "SafeMath": [
        10423
      ],
      "WhitelistPaymaster": [
        1712
      ]
    },
    "id": 1713,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1590,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:7"
      },
      {
        "id": 1591,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "55:33:7"
      },
      {
        "absolutePath": "/Users/dror/IdeaProjects/gsn223/packages/paymasters/contracts/AcceptEverythingPaymaster.sol",
        "file": "./AcceptEverythingPaymaster.sol",
        "id": 1592,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1713,
        "sourceUnit": 64,
        "src": "90:41:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1594,
              "name": "AcceptEverythingPaymaster",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 63,
              "src": "407:25:7"
            },
            "id": 1595,
            "nodeType": "InheritanceSpecifier",
            "src": "407:25:7"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1593,
          "nodeType": "StructuredDocumentation",
          "src": "133:243:7",
          "text": "a sample paymaster that has whitelists for senders and targets.\n - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n - if at least one target is whitelisted, then ONLY whitelisted targets are allowed."
        },
        "fullyImplemented": true,
        "id": 1712,
        "linearizedBaseContracts": [
          1712,
          63,
          3530,
          8916,
          9928,
          6897
        ],
        "name": "WhitelistPaymaster",
        "nameLocation": "385:18:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "dd1bcaa1",
            "id": 1597,
            "mutability": "mutable",
            "name": "useSenderWhitelist",
            "nameLocation": "452:18:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "440:30:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1596,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "440:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "4f28bfb9",
            "id": 1599,
            "mutability": "mutable",
            "name": "useTargetWhitelist",
            "nameLocation": "488:18:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "476:30:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1598,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "476:4:7",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8222f07d",
            "id": 1603,
            "mutability": "mutable",
            "name": "senderWhitelist",
            "nameLocation": "543:15:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "512:46:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1602,
              "keyType": {
                "id": 1600,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "521:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "512:23:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1601,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "530:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "858437b0",
            "id": 1607,
            "mutability": "mutable",
            "name": "targetWhitelist",
            "nameLocation": "595:15:7",
            "nodeType": "VariableDeclaration",
            "scope": 1712,
            "src": "564:46:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 1606,
              "keyType": {
                "id": 1604,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "573:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "564:23:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 1605,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "582:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1624,
              "nodeType": "Block",
              "src": "675:80:7",
              "statements": [
                {
                  "expression": {
                    "id": 1618,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1614,
                        "name": "senderWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1603,
                        "src": "685:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1616,
                      "indexExpression": {
                        "id": 1615,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1609,
                        "src": "701:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "685:23:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1617,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "709:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "685:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1619,
                  "nodeType": "ExpressionStatement",
                  "src": "685:28:7"
                },
                {
                  "expression": {
                    "id": 1622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1620,
                      "name": "useSenderWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1597,
                      "src": "723:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1621,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "744:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "723:25:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1623,
                  "nodeType": "ExpressionStatement",
                  "src": "723:25:7"
                }
              ]
            },
            "functionSelector": "2f10a6c6",
            "id": 1625,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1612,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1611,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8859,
                  "src": "665:9:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "665:9:7"
              }
            ],
            "name": "whitelistSender",
            "nameLocation": "626:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1609,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "650:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1625,
                  "src": "642:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1608,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "641:16:7"
            },
            "returnParameters": {
              "id": 1613,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "675:0:7"
            },
            "scope": 1712,
            "src": "617:138:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1642,
              "nodeType": "Block",
              "src": "818:80:7",
              "statements": [
                {
                  "expression": {
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1632,
                        "name": "targetWhitelist",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1607,
                        "src": "828:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 1634,
                      "indexExpression": {
                        "id": 1633,
                        "name": "target",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1627,
                        "src": "844:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "828:23:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1635,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "852:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "828:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "828:28:7"
                },
                {
                  "expression": {
                    "id": 1640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1638,
                      "name": "useTargetWhitelist",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1599,
                      "src": "866:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1639,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "887:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "866:25:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1641,
                  "nodeType": "ExpressionStatement",
                  "src": "866:25:7"
                }
              ]
            },
            "functionSelector": "1cfda9fa",
            "id": 1643,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1630,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1629,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8859,
                  "src": "808:9:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "808:9:7"
              }
            ],
            "name": "whitelistTarget",
            "nameLocation": "769:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1628,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1627,
                  "mutability": "mutable",
                  "name": "target",
                  "nameLocation": "793:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1643,
                  "src": "785:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1626,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:16:7"
            },
            "returnParameters": {
              "id": 1631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "818:0:7"
            },
            "scope": 1712,
            "src": "760:138:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              42
            ],
            "body": {
              "id": 1710,
              "nodeType": "Block",
              "src": "1193:522:7",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "id": 1660,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1648,
                        "src": "1204:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 1661,
                        "name": "maxPossibleGas",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1652,
                        "src": "1215:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1662,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1203:27:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes_calldata_ptr_$_t_uint256_$",
                      "typeString": "tuple(bytes calldata,uint256)"
                    }
                  },
                  "id": 1663,
                  "nodeType": "ExpressionStatement",
                  "src": "1203:27:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1668,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1665,
                            "name": "approvalData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1650,
                            "src": "1248:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 1666,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1248:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1271:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1248:24:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "617070726f76616c446174613a20696e76616c6964206c656e677468",
                        "id": 1669,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1274:30:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7d8c0e673c54c705986df4dd7c55d4166770d9449a60c6ca1c12bca8c8c62ee5",
                          "typeString": "literal_string \"approvalData: invalid length\""
                        },
                        "value": "approvalData: invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7d8c0e673c54c705986df4dd7c55d4166770d9449a60c6ca1c12bca8c8c62ee5",
                          "typeString": "literal_string \"approvalData: invalid length\""
                        }
                      ],
                      "id": 1664,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1240:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1670,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1240:65:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1671,
                  "nodeType": "ExpressionStatement",
                  "src": "1240:65:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1678,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "expression": {
                              "expression": {
                                "id": 1673,
                                "name": "relayRequest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1646,
                                "src": "1323:12:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                  "typeString": "struct GsnTypes.RelayRequest calldata"
                                }
                              },
                              "id": 1674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "relayData",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 7839,
                              "src": "1323:22:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RelayData_$7833_calldata_ptr",
                                "typeString": "struct GsnTypes.RelayData calldata"
                              }
                            },
                            "id": 1675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "paymasterData",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7830,
                            "src": "1323:36:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          },
                          "id": 1676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1323:43:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1370:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1323:48:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "7061796d6173746572446174613a20696e76616c6964206c656e677468",
                        "id": 1679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1373:31:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f0e0f7202abe3d2a01449ea8ef8fc9c6d541b7841e2ddaf2496bb00930e3bc54",
                          "typeString": "literal_string \"paymasterData: invalid length\""
                        },
                        "value": "paymasterData: invalid length"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f0e0f7202abe3d2a01449ea8ef8fc9c6d541b7841e2ddaf2496bb00930e3bc54",
                          "typeString": "literal_string \"paymasterData: invalid length\""
                        }
                      ],
                      "id": 1672,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1315:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1315:90:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1681,
                  "nodeType": "ExpressionStatement",
                  "src": "1315:90:7"
                },
                {
                  "condition": {
                    "id": 1682,
                    "name": "useSenderWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1597,
                    "src": "1421:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1693,
                  "nodeType": "IfStatement",
                  "src": "1416:129:7",
                  "trueBody": {
                    "id": 1692,
                    "nodeType": "Block",
                    "src": "1442:103:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1684,
                                "name": "senderWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1603,
                                "src": "1465:15:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1688,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 1685,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1646,
                                    "src": "1481:12:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 1686,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 7836,
                                  "src": "1481:20:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$6754_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 1687,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "from",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 6741,
                                "src": "1481:25:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1465:42:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73656e646572206e6f742077686974656c6973746564",
                              "id": 1689,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1509:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              },
                              "value": "sender not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e2c1867c7a7169848f7afd303de5603a0c807d938979b5d9c6964a60c4386eb8",
                                "typeString": "literal_string \"sender not whitelisted\""
                              }
                            ],
                            "id": 1683,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1456:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1456:78:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1691,
                        "nodeType": "ExpressionStatement",
                        "src": "1456:78:7"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "id": 1694,
                    "name": "useTargetWhitelist",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1599,
                    "src": "1559:18:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1705,
                  "nodeType": "IfStatement",
                  "src": "1554:127:7",
                  "trueBody": {
                    "id": 1704,
                    "nodeType": "Block",
                    "src": "1580:101:7",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 1696,
                                "name": "targetWhitelist",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1607,
                                "src": "1603:15:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 1700,
                              "indexExpression": {
                                "expression": {
                                  "expression": {
                                    "id": 1697,
                                    "name": "relayRequest",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1646,
                                    "src": "1619:12:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                                      "typeString": "struct GsnTypes.RelayRequest calldata"
                                    }
                                  },
                                  "id": 1698,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "request",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 7836,
                                  "src": "1619:20:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ForwardRequest_$6754_calldata_ptr",
                                    "typeString": "struct IForwarder.ForwardRequest calldata"
                                  }
                                },
                                "id": 1699,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "to",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 6743,
                                "src": "1619:23:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1603:40:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "746172676574206e6f742077686974656c6973746564",
                              "id": 1701,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1645:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              },
                              "value": "target not whitelisted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_033d36364bde6cb8bbf6777680999d20f88931a816a90ceb423209d9073b7882",
                                "typeString": "literal_string \"target not whitelisted\""
                              }
                            ],
                            "id": 1695,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1594:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1702,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1594:76:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1703,
                        "nodeType": "ExpressionStatement",
                        "src": "1594:76:7"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "",
                        "id": 1706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1698:2:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 1707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1702:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 1708,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "1697:11:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$_t_bool_$",
                      "typeString": "tuple(literal_string \"\",bool)"
                    }
                  },
                  "functionReturnParameters": 1659,
                  "id": 1709,
                  "nodeType": "Return",
                  "src": "1690:18:7"
                }
              ]
            },
            "functionSelector": "00be5dd4",
            "id": 1711,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "preRelayedCall",
            "nameLocation": "913:14:7",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1654,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1107:8:7"
            },
            "parameters": {
              "id": 1653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1646,
                  "mutability": "mutable",
                  "name": "relayRequest",
                  "nameLocation": "968:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "937:43:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RelayRequest_$7840_calldata_ptr",
                    "typeString": "struct GsnTypes.RelayRequest"
                  },
                  "typeName": {
                    "id": 1645,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1644,
                      "name": "GsnTypes.RelayRequest",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 7840,
                      "src": "937:21:7"
                    },
                    "referencedDeclaration": 7840,
                    "src": "937:21:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RelayRequest_$7840_storage_ptr",
                      "typeString": "struct GsnTypes.RelayRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1648,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "1005:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "990:24:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1647,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "990:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1650,
                  "mutability": "mutable",
                  "name": "approvalData",
                  "nameLocation": "1039:12:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1024:27:7",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1649,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1024:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1652,
                  "mutability": "mutable",
                  "name": "maxPossibleGas",
                  "nameLocation": "1069:14:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1061:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1651,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1061:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "927:162:7"
            },
            "returnParameters": {
              "id": 1659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1656,
                  "mutability": "mutable",
                  "name": "context",
                  "nameLocation": "1154:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1141:20:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1655,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1141:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1658,
                  "mutability": "mutable",
                  "name": "revertOnRecipientRevert",
                  "nameLocation": "1168:23:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "1163:28:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1657,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1140:52:7"
            },
            "scope": 1712,
            "src": "904:811:7",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 1713,
        "src": "376:1341:7",
        "usedErrors": []
      }
    ],
    "src": "31:1687:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.1.0",
  "updatedAt": "2021-10-19T22:54:44.147Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "params": {
          "context": "- the call context, as returned by the preRelayedCall",
          "gasUseWithoutPost": "- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.",
          "relayData": "- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.",
          "success": "- true if the relayed call succeeded, false if it reverted"
        }
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "params": {
          "approvalData": "- extra dapp-specific data (e.g. signature from trusted party)",
          "maxPossibleGas": "- based on values returned from {@link getGasAndDataLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).",
          "relayRequest": "- the full relay request structure",
          "signature": "- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getGasAndDataLimits()": {
        "notice": "Return the Gas Limits and msg.data max size constants used by the Paymaster."
      },
      "getHubAddr()": {
        "notice": "return the relayHub of this contract."
      },
      "getRelayHubDeposit()": {
        "notice": "check current deposit on relay hub."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "notice": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state."
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "notice": "Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \"revert\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \"rejectOnRecipientRevert\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \"delegate\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster."
      },
      "withdrawRelayHubDepositTo(uint256,address)": {
        "notice": "withdraw deposit from relayHub"
      }
    },
    "notice": "a sample paymaster that has whitelists for senders and targets. - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed. - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.",
    "version": 1
  }
}