{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = asyncify;\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _setImmediate = require('./internal/setImmediate');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\n\n\nfunction asyncify(func) {\n  if ((0, _wrapAsync.isAsync)(func)) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const callback = args.pop();\n      const promise = func.apply(this, args);\n      return handlePromise(promise, callback);\n    };\n  }\n\n  return (0, _initialParams2.default)(function (args, callback) {\n    var result;\n\n    try {\n      result = func.apply(this, args);\n    } catch (e) {\n      return callback(e);\n    } // if result is Promise object\n\n\n    if (result && typeof result.then === 'function') {\n      return handlePromise(result, callback);\n    } else {\n      callback(null, result);\n    }\n  });\n}\n\nfunction handlePromise(promise, callback) {\n  return promise.then(value => {\n    invokeCallback(callback, null, value);\n  }, err => {\n    invokeCallback(callback, err && err.message ? err : new Error(err));\n  });\n}\n\nfunction invokeCallback(callback, error, value) {\n  try {\n    callback(error, value);\n  } catch (err) {\n    (0, _setImmediate2.default)(e => {\n      throw e;\n    }, err);\n  }\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston/node_modules/async/asyncify.js"],"names":["Object","defineProperty","exports","value","default","asyncify","_initialParams","require","_initialParams2","_interopRequireDefault","_setImmediate","_setImmediate2","_wrapAsync","obj","__esModule","func","isAsync","args","callback","pop","promise","apply","handlePromise","result","e","then","invokeCallback","err","message","Error","error","module"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = asyncify;\r\n\r\nvar _initialParams = require('./internal/initialParams');\r\n\r\nvar _initialParams2 = _interopRequireDefault(_initialParams);\r\n\r\nvar _setImmediate = require('./internal/setImmediate');\r\n\r\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\r\n\r\nvar _wrapAsync = require('./internal/wrapAsync');\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\r\nfunction asyncify(func) {\r\n    if ((0, _wrapAsync.isAsync)(func)) {\r\n        return function (...args /*, callback*/) {\r\n            const callback = args.pop();\r\n            const promise = func.apply(this, args);\r\n            return handlePromise(promise, callback);\r\n        };\r\n    }\r\n\r\n    return (0, _initialParams2.default)(function (args, callback) {\r\n        var result;\r\n        try {\r\n            result = func.apply(this, args);\r\n        } catch (e) {\r\n            return callback(e);\r\n        }\r\n        // if result is Promise object\r\n        if (result && typeof result.then === 'function') {\r\n            return handlePromise(result, callback);\r\n        } else {\r\n            callback(null, result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction handlePromise(promise, callback) {\r\n    return promise.then(value => {\r\n        invokeCallback(callback, null, value);\r\n    }, err => {\r\n        invokeCallback(callback, err && err.message ? err : new Error(err));\r\n    });\r\n}\r\n\r\nfunction invokeCallback(callback, error, value) {\r\n    try {\r\n        callback(error, value);\r\n    } catch (err) {\r\n        (0, _setImmediate2.default)(e => {\r\n            throw e;\r\n        }, err);\r\n    }\r\n}\r\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}