{"ast":null,"code":"const ethers = require('ethers');\n\nconst {\n  formatEther\n} = require('ethers/lib/utils');\n\nconst {\n  RelayProvider\n} = require('@opengsn/provider');\n\nconst contractArtifact = require('../../build/contracts/TargetContract.json');\n\nconst noFeePaymasterArtifact = require('../../build/contracts/NoFeePaymaster.json');\n\nconst tokenFeePaymasterArtifact = require('../../build/contracts/TokenFeePaymaster.json');\n\nconst tokenBankArtifact = require('../../build/contracts/TokenBank.json');\n\nlet targetContractNoFeePaymaster;\nlet targetContractTokenFeePaymaster;\nlet noFeePaymasterContract;\nlet tokenFeePaymasterContract;\nlet tokenBankContract;\nlet contractAddress;\nlet artifactNetwork;\nlet networkId;\nlet TokenFeeprovider;\nlet NoFeeprovider;\n\nasync function initNoFeePaymaster() {\n  if (!window.ethereum) {\n    throw new Error('provider not found');\n  }\n\n  window.ethereum.on('accountsChanged', () => {\n    console.log('acct');\n    window.location.reload();\n  });\n  window.ethereum.on('chainChanged', () => {\n    console.log('chainChained');\n    window.location.reload();\n  });\n  networkId = await window.ethereum.request({\n    method: 'net_version'\n  });\n  const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\n    provider: window.ethereum,\n    config: {\n      paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\n    }\n  }).init();\n  NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster);\n  const noFeeNetwork = await NoFeeprovider.getNetwork();\n  artifactNetwork = contractArtifact.networks[networkId];\n  if (!artifactNetwork) throw new Error('Can\\'t find deployment on network ' + networkId);\n  contractAddress = artifactNetwork.address;\n  targetContractNoFeePaymaster = new ethers.Contract(contractAddress, contractArtifact.abi, NoFeeprovider.getSigner());\n  noFeePaymasterContract = new ethers.Contract(noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner());\n  await listenToNoFeeEvents();\n  return {\n    contractAddress,\n    noFeeNetwork\n  };\n}\n\nasync function initTokenFeePaymaster() {\n  if (!window.ethereum) {\n    throw new Error('provider not found');\n  }\n\n  window.ethereum.on('accountsChanged', () => {\n    console.log('acct');\n    window.location.reload();\n  });\n  window.ethereum.on('chainChanged', () => {\n    console.log('chainChained');\n    window.location.reload();\n  });\n  networkId = await window.ethereum.request({\n    method: 'net_version'\n  });\n  const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\n    provider: window.ethereum,\n    config: {\n      paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\n    }\n  }).init();\n  TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster);\n  const TokenFeeNetwork = await TokenFeeprovider.getNetwork();\n  artifactNetwork = contractArtifact.networks[networkId];\n  if (!artifactNetwork) throw new Error('Can\\'t find deployment on network ' + networkId);\n  contractAddress = artifactNetwork.address;\n  targetContractTokenFeePaymaster = new ethers.Contract(contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner());\n  tokenFeePaymasterContract = new ethers.Contract(tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner());\n  await listenToTokenFeeEvents();\n  return {\n    contractAddress,\n    TokenFeeNetwork\n  };\n}\n\nasync function noFeeContractCall() {\n  await window.ethereum.send('eth_requestAccounts');\n  let transaction = await targetContractNoFeePaymaster.noCommissionTx();\n  let hash = transaction.hash;\n  console.log(`Transaction ${hash} sent`);\n  let receipt = await NoFeeprovider.waitForTransaction(hash);\n  console.log(`Mined in block: ${receipt.blockNumber}`);\n}\n\nasync function tokenFeeContractCall() {\n  await window.ethereum.send('eth_requestAccounts');\n  let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx();\n  let hash = transaction.hash;\n  console.log(`Transaction ${hash} sent`);\n  let receipt = await TokenFeeprovider.waitForTransaction(hash);\n  console.log(`Mined in block: ${receipt.blockNumber}`);\n}\n\nlet logview;\n\nfunction log(message) {\n  message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>');\n\n  if (!logview) {\n    logview = document.getElementById('logview');\n  }\n\n  logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML;\n} // async function listenToEvents() {\n//   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n//   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n// }\n\n\nasync function listenToNoFeeEvents() {\n  targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n    log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`);\n    console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`);\n  });\n}\n\nasync function listenToTokenFeeEvents() {\n  targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n    log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`);\n    console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`);\n  });\n}\n\nwindow.app = {\n  initNoFeePaymaster,\n  initTokenFeePaymaster,\n  noFeeContractCall,\n  tokenFeeContractCall,\n  log\n};","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/ui/src/ethereum.js"],"names":["ethers","require","formatEther","RelayProvider","contractArtifact","noFeePaymasterArtifact","tokenFeePaymasterArtifact","tokenBankArtifact","targetContractNoFeePaymaster","targetContractTokenFeePaymaster","noFeePaymasterContract","tokenFeePaymasterContract","tokenBankContract","contractAddress","artifactNetwork","networkId","TokenFeeprovider","NoFeeprovider","initNoFeePaymaster","window","ethereum","Error","on","console","log","location","reload","request","method","gsnProviderNoFeePaymaster","newProvider","provider","config","paymasterAddress","networks","address","init","providers","Web3Provider","noFeeNetwork","getNetwork","Contract","abi","getSigner","listenToNoFeeEvents","initTokenFeePaymaster","gsnProviderTokenFeePaymaster","TokenFeeNetwork","listenToTokenFeeEvents","noFeeContractCall","send","transaction","noCommissionTx","hash","receipt","waitForTransaction","blockNumber","tokenFeeContractCall","tokenCommissionTx","logview","message","replace","document","getElementById","innerHTML","previousHolder","currentHolder","rawEvent","app"],"mappings":"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","sourcesContent":["const ethers = require('ethers')\r\nconst { formatEther } = require('ethers/lib/utils')\r\nconst { RelayProvider } = require('@opengsn/provider')\r\n\r\n\r\nconst contractArtifact = require('../../build/contracts/TargetContract.json')\r\n\r\n\r\nconst noFeePaymasterArtifact = require('../../build/contracts/NoFeePaymaster.json')\r\nconst tokenFeePaymasterArtifact = require('../../build/contracts/TokenFeePaymaster.json')\r\n\r\nconst tokenBankArtifact = require('../../build/contracts/TokenBank.json')\r\n\r\nlet targetContractNoFeePaymaster\r\nlet targetContractTokenFeePaymaster\r\nlet noFeePaymasterContract\r\nlet tokenFeePaymasterContract\r\nlet tokenBankContract\r\n\r\nlet contractAddress\r\n\r\nlet artifactNetwork\r\nlet networkId\r\nlet TokenFeeprovider\r\nlet NoFeeprovider\r\n\r\n\r\nasync function initNoFeePaymaster() {\r\n\r\n    if (!window.ethereum) {\r\n        throw new Error('provider not found')\r\n    }\r\n    window.ethereum.on('accountsChanged', () => {\r\n        console.log('acct');\r\n        window.location.reload()\r\n    })\r\n    window.ethereum.on('chainChanged', () => {\r\n        console.log('chainChained');\r\n        window.location.reload()\r\n    })\r\n\r\n    networkId = await window.ethereum.request({ method: 'net_version' })\r\n\r\n    const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\r\n        provider: window.ethereum,\r\n        config: {\r\n            paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\r\n        }\r\n    }).init()\r\n\r\n\r\n    NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster)\r\n\r\n    const noFeeNetwork = await NoFeeprovider.getNetwork()\r\n    artifactNetwork = contractArtifact.networks[networkId]\r\n\r\n\r\n    if (!artifactNetwork)\r\n        throw new Error('Can\\'t find deployment on network ' + networkId)\r\n\r\n    contractAddress = artifactNetwork.address\r\n\r\n\r\n    targetContractNoFeePaymaster = new ethers.Contract(\r\n        contractAddress, contractArtifact.abi, NoFeeprovider.getSigner())\r\n\r\n    noFeePaymasterContract = new ethers.Contract(\r\n        noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner())\r\n\r\n\r\n\r\n    await listenToNoFeeEvents()\r\n    return { contractAddress, noFeeNetwork }\r\n}\r\n\r\nasync function initTokenFeePaymaster() {\r\n\r\n    if (!window.ethereum) {\r\n        throw new Error('provider not found')\r\n    }\r\n    window.ethereum.on('accountsChanged', () => {\r\n        console.log('acct');\r\n        window.location.reload()\r\n    })\r\n    window.ethereum.on('chainChanged', () => {\r\n        console.log('chainChained');\r\n        window.location.reload()\r\n    })\r\n\r\n    networkId = await window.ethereum.request({ method: 'net_version' })\r\n\r\n    const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\r\n        provider: window.ethereum,\r\n        config: {\r\n            paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\r\n        }\r\n    }).init()\r\n\r\n\r\n    TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster)\r\n\r\n    const TokenFeeNetwork = await TokenFeeprovider.getNetwork()\r\n    artifactNetwork = contractArtifact.networks[networkId]\r\n\r\n\r\n    if (!artifactNetwork)\r\n        throw new Error('Can\\'t find deployment on network ' + networkId)\r\n\r\n    contractAddress = artifactNetwork.address\r\n\r\n\r\n    targetContractTokenFeePaymaster = new ethers.Contract(\r\n        contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner())\r\n\r\n\r\n    tokenFeePaymasterContract = new ethers.Contract(\r\n        tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner())\r\n\r\n    await listenToTokenFeeEvents()\r\n    return { contractAddress, TokenFeeNetwork }\r\n}\r\n\r\n\r\nasync function noFeeContractCall() {\r\n    await window.ethereum.send('eth_requestAccounts')\r\n\r\n    let transaction = await targetContractNoFeePaymaster.noCommissionTx()\r\n    let hash = transaction.hash\r\n    console.log(`Transaction ${hash} sent`)\r\n    let receipt = await NoFeeprovider.waitForTransaction(hash)\r\n    console.log(`Mined in block: ${receipt.blockNumber}`)\r\n\r\n}\r\n\r\n\r\nasync function tokenFeeContractCall() {\r\n\r\n    await window.ethereum.send('eth_requestAccounts')\r\n\r\n    let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx()\r\n    let hash = transaction.hash\r\n    console.log(`Transaction ${hash} sent`)\r\n    let receipt = await TokenFeeprovider.waitForTransaction(hash)\r\n    console.log(`Mined in block: ${receipt.blockNumber}`)\r\n\r\n\r\n}\r\n\r\n\r\nlet logview\r\n\r\nfunction log(message) {\r\n    message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>')\r\n    if (!logview) {\r\n        logview = document.getElementById('logview')\r\n    }\r\n    logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML\r\n}\r\n\r\n\r\n// async function listenToEvents() {\r\n\r\n//   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n//     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n//     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n//   })\r\n\r\n\r\n//   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n//     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n//     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n//   })\r\n\r\n// }\r\n\r\n\r\n\r\nasync function listenToNoFeeEvents() {\r\n    targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n        log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n        console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n    })\r\n}\r\n\r\nasync function listenToTokenFeeEvents() {\r\n    targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n        log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n        console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nwindow.app = {\r\n    initNoFeePaymaster,\r\n    initTokenFeePaymaster,\r\n    noFeeContractCall,\r\n    tokenFeeContractCall,\r\n    log\r\n}"]},"metadata":{},"sourceType":"module"}