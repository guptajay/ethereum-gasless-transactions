{"ast":null,"code":"/**\r\n * container.js: Inversion of control container for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar createLogger = require('./create-logger');\n/**\r\n * Inversion of control container for winston logger instances.\r\n * @type {Container}\r\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\r\n   * Constructor function for the Container object responsible for managing a\r\n   * set of `winston.Logger` instances based on string ids.\r\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\r\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Container);\n\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\r\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\r\n   * instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\n\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n\n      return this.loggers.get(id);\n    }\n    /**\r\n     * Retreives a `winston.Logger` instance for the specified `id`. If\r\n     * an instance does not exist, one is created.\r\n     * @param {!string} id - The id of the Logger to get.\r\n     * @param {?Object} [options] - Options for the Logger instance.\r\n     * @returns {Logger} - A configured Logger instance with a specified id.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\r\n     * Check if the container has a logger with the id.\r\n     * @param {?string} id - The id of the Logger instance to find.\r\n     * @returns {boolean} - Boolean value indicating if this instance has a\r\n     * logger with the specified `id`.\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\r\n     * Closes a `Logger` instance with the specified `id` if it exists.\r\n     * If no `id` is supplied then all Loggers are closed.\r\n     * @param {?string} id - The id of the Logger instance to close.\r\n     * @returns {undefined}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n\n      if (id) {\n        return this._removeLogger(id);\n      }\n\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\r\n     * Remove a logger based on the id.\r\n     * @param {!string} id - The id of the logger to remove.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n\n      var logger = this.loggers.get(id);\n      logger.close();\n\n      this._delete(id);\n    }\n    /**\r\n     * Deletes a `Logger` instance with the specified `id`.\r\n     * @param {!string} id - The id of the Logger instance to delete from\r\n     * container.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n\n  return Container;\n}();","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston/dist/winston/container.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","createLogger","require","module","exports","Container","options","arguments","undefined","loggers","Map","value","add","id","_this","has","assign","existing","transports","slice","logger","on","_delete","set","get","close","_this2","_removeLogger","forEach","val"],"mappings":"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","sourcesContent":["/**\r\n * container.js: Inversion of control container for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\r\n\r\nvar createLogger = require('./create-logger');\r\n/**\r\n * Inversion of control container for winston logger instances.\r\n * @type {Container}\r\n */\r\n\r\n\r\nmodule.exports = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructor function for the Container object responsible for managing a\r\n   * set of `winston.Logger` instances based on string ids.\r\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\r\n   */\r\n  function Container() {\r\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n    _classCallCheck(this, Container);\r\n\r\n    this.loggers = new Map();\r\n    this.options = options;\r\n  }\r\n  /**\r\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\r\n   * instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\r\n\r\n\r\n  _createClass(Container, [{\r\n    key: \"add\",\r\n    value: function add(id, options) {\r\n      var _this = this;\r\n\r\n      if (!this.loggers.has(id)) {\r\n        // Remark: Simple shallow clone for configuration options in case we pass\r\n        // in instantiated protoypal objects\r\n        options = Object.assign({}, options || this.options);\r\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\r\n        // make copies of those references.\r\n\r\n        options.transports = existing ? existing.slice() : [];\r\n        var logger = createLogger(options);\r\n        logger.on('close', function () {\r\n          return _this._delete(id);\r\n        });\r\n        this.loggers.set(id, logger);\r\n      }\r\n\r\n      return this.loggers.get(id);\r\n    }\r\n    /**\r\n     * Retreives a `winston.Logger` instance for the specified `id`. If\r\n     * an instance does not exist, one is created.\r\n     * @param {!string} id - The id of the Logger to get.\r\n     * @param {?Object} [options] - Options for the Logger instance.\r\n     * @returns {Logger} - A configured Logger instance with a specified id.\r\n     */\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function get(id, options) {\r\n      return this.add(id, options);\r\n    }\r\n    /**\r\n     * Check if the container has a logger with the id.\r\n     * @param {?string} id - The id of the Logger instance to find.\r\n     * @returns {boolean} - Boolean value indicating if this instance has a\r\n     * logger with the specified `id`.\r\n     */\r\n\r\n  }, {\r\n    key: \"has\",\r\n    value: function has(id) {\r\n      return !!this.loggers.has(id);\r\n    }\r\n    /**\r\n     * Closes a `Logger` instance with the specified `id` if it exists.\r\n     * If no `id` is supplied then all Loggers are closed.\r\n     * @param {?string} id - The id of the Logger instance to close.\r\n     * @returns {undefined}\r\n     */\r\n\r\n  }, {\r\n    key: \"close\",\r\n    value: function close(id) {\r\n      var _this2 = this;\r\n\r\n      if (id) {\r\n        return this._removeLogger(id);\r\n      }\r\n\r\n      this.loggers.forEach(function (val, key) {\r\n        return _this2._removeLogger(key);\r\n      });\r\n    }\r\n    /**\r\n     * Remove a logger based on the id.\r\n     * @param {!string} id - The id of the logger to remove.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_removeLogger\",\r\n    value: function _removeLogger(id) {\r\n      if (!this.loggers.has(id)) {\r\n        return;\r\n      }\r\n\r\n      var logger = this.loggers.get(id);\r\n      logger.close();\r\n\r\n      this._delete(id);\r\n    }\r\n    /**\r\n     * Deletes a `Logger` instance with the specified `id`.\r\n     * @param {!string} id - The id of the Logger instance to delete from\r\n     * container.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n\r\n  }, {\r\n    key: \"_delete\",\r\n    value: function _delete(id) {\r\n      this.loggers[\"delete\"](id);\r\n    }\r\n  }]);\r\n\r\n  return Container;\r\n}();"]},"metadata":{},"sourceType":"script"}