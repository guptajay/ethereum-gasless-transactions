{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass HttpClient {\n  constructor(httpWrapper, logger) {\n    this.httpWrapper = httpWrapper;\n    this.logger = logger;\n  }\n\n  async getPingResponse(relayUrl, paymaster) {\n    const paymasterSuffix = paymaster == null ? '' : '?paymaster=' + paymaster;\n    const pingResponse = await this.httpWrapper.sendPromise(relayUrl + '/getaddr' + paymasterSuffix);\n    this.logger.info(`pingResponse: ${JSON.stringify(pingResponse)}`);\n\n    if (pingResponse == null) {\n      throw new Error('Relay responded without a body');\n    }\n\n    return pingResponse;\n  }\n\n  async relayTransaction(relayUrl, request) {\n    const {\n      signedTx,\n      error\n    } = await this.httpWrapper.sendPromise(relayUrl + '/relay', request);\n    this.logger.info(`relayTransaction response: ${signedTx}, error: ${error}`);\n\n    if (error != null) {\n      throw new Error(`Got error response from relay: ${error}`);\n    }\n\n    if (signedTx == null) {\n      throw new Error('body.signedTx field missing.');\n    }\n\n    return signedTx;\n  }\n\n  async auditTransaction(relayUrl, signedTx) {\n    const auditRequest = {\n      signedTx\n    };\n    const auditResponse = await this.httpWrapper.sendPromise(relayUrl + '/audit', auditRequest);\n    this.logger.info(`auditTransaction response: ${JSON.stringify(auditResponse)}`);\n    return auditResponse;\n  }\n\n}\n\nexports.HttpClient = HttpClient;","map":{"version":3,"sources":["../src/HttpClient.ts"],"names":[],"mappings":";;;;;;AASA,MAAa,UAAb,CAAuB;AAIrB,EAAA,WAAA,CAAa,WAAb,EAAuC,MAAvC,EAA8D;AAC5D,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAEoB,QAAf,eAAe,CAAE,QAAF,EAAoB,SAApB,EAAsC;AACzD,UAAM,eAAe,GAAG,SAAS,IAAI,IAAb,GAAoB,EAApB,GAAyB,gBAAgB,SAAjE;AACA,UAAM,YAAY,GAAiB,MAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,QAAQ,GAAG,UAAX,GAAwB,eAArD,CAAzC;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,iBAAiB,IAAI,CAAC,SAAL,CAAe,YAAf,CAA4B,EAA9D;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,WAAO,YAAP;AACD;;AAEqB,QAAhB,gBAAgB,CAAE,QAAF,EAAoB,OAApB,EAAoD;AACxE,UAAM;AAAE,MAAA,QAAF;AAAY,MAAA;AAAZ,QAA2D,MAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,QAAQ,GAAG,QAAxC,EAAkD,OAAlD,CAAvE;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,8BAA8B,QAAQ,YAAY,KAAK,EAAxE;;AACA,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAM,IAAI,KAAJ,CAAU,kCAAkC,KAAK,EAAjD,CAAN;AACD;;AACD,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO,QAAP;AACD;;AAEqB,QAAhB,gBAAgB,CAAE,QAAF,EAAoB,QAApB,EAA+C;AACnE,UAAM,YAAY,GAAiB;AAAE,MAAA;AAAF,KAAnC;AACA,UAAM,aAAa,GAAkB,MAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,QAAQ,GAAG,QAAxC,EAAkD,YAAlD,CAA3C;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,8BAA8B,IAAI,CAAC,SAAL,CAAe,aAAf,CAA6B,EAA5E;AACA,WAAO,aAAP;AACD;;AApCoB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HttpClient {\n    constructor(httpWrapper, logger) {\n        this.httpWrapper = httpWrapper;\n        this.logger = logger;\n    }\n    async getPingResponse(relayUrl, paymaster) {\n        const paymasterSuffix = paymaster == null ? '' : '?paymaster=' + paymaster;\n        const pingResponse = await this.httpWrapper.sendPromise(relayUrl + '/getaddr' + paymasterSuffix);\n        this.logger.info(`pingResponse: ${JSON.stringify(pingResponse)}`);\n        if (pingResponse == null) {\n            throw new Error('Relay responded without a body');\n        }\n        return pingResponse;\n    }\n    async relayTransaction(relayUrl, request) {\n        const { signedTx, error } = await this.httpWrapper.sendPromise(relayUrl + '/relay', request);\n        this.logger.info(`relayTransaction response: ${signedTx}, error: ${error}`);\n        if (error != null) {\n            throw new Error(`Got error response from relay: ${error}`);\n        }\n        if (signedTx == null) {\n            throw new Error('body.signedTx field missing.');\n        }\n        return signedTx;\n    }\n    async auditTransaction(relayUrl, signedTx) {\n        const auditRequest = { signedTx };\n        const auditResponse = await this.httpWrapper.sendPromise(relayUrl + '/audit', auditRequest);\n        this.logger.info(`auditTransaction response: ${JSON.stringify(auditResponse)}`);\n        return auditResponse;\n    }\n}\nexports.HttpClient = HttpClient;\n//# sourceMappingURL=HttpClient.js.map"]},"metadata":{},"sourceType":"script"}