{"ast":null,"code":"\"use strict\";\n/**\r\n *  Conversion Utilities\r\n *\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = require(\"./types\");\n\nvar errors = require(\"./errors\");\n\nexports.AddressZero = '0x0000000000000000000000000000000000000000';\nexports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\n\nfunction isBigNumber(value) {\n  return value instanceof types_1.BigNumber;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return new Uint8Array(Array.prototype.slice.apply(array, args));\n  };\n\n  return array;\n}\n\nfunction isArrayish(value) {\n  if (!value || parseInt(String(value.length)) != value.length || typeof value === 'string') {\n    return false;\n  }\n\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n\n    if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isArrayish = isArrayish;\n\nfunction arrayify(value) {\n  if (value == null) {\n    errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n\n  if (isBigNumber(value)) {\n    value = value.toHexString();\n  }\n\n  if (typeof value === 'string') {\n    var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n\n    if (match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n\n    value = value.substring(2);\n\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n\n    var result = [];\n\n    for (var i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  } else if (typeof value === 'string') {}\n\n  if (isArrayish(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  errors.throwError('invalid arrayify value', null, {\n    arg: 'value',\n    value: value,\n    type: typeof value\n  });\n  return null;\n}\n\nexports.arrayify = arrayify;\n\nfunction concat(objects) {\n  var arrays = [];\n  var length = 0;\n\n  for (var i = 0; i < objects.length; i++) {\n    var object = arrayify(objects[i]);\n    arrays.push(object);\n    length += object.length;\n  }\n\n  var result = new Uint8Array(length);\n  var offset = 0;\n\n  for (var i = 0; i < arrays.length; i++) {\n    result.set(arrays[i], offset);\n    offset += arrays[i].length;\n  }\n\n  return addSlice(result);\n}\n\nexports.concat = concat;\n\nfunction stripZeros(value) {\n  var result = arrayify(value);\n\n  if (result.length === 0) {\n    return result;\n  } // Find the first non-zero entry\n\n\n  var start = 0;\n\n  while (result[start] === 0) {\n    start++;\n  } // If we started with zeros, strip them\n\n\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\n\nexports.stripZeros = stripZeros;\n\nfunction padZeros(value, length) {\n  value = arrayify(value);\n\n  if (length < value.length) {\n    throw new Error('cannot pad');\n  }\n\n  var result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\n\nexports.padZeros = padZeros;\n\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\n\nfunction hexlify(value) {\n  if (isBigNumber(value)) {\n    return value.toHexString();\n  }\n\n  if (typeof value === 'number') {\n    if (value < 0) {\n      errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n\n    var hex = '';\n\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = '0' + hex;\n      }\n\n      return '0x' + hex;\n    }\n\n    return '0x00';\n  }\n\n  if (typeof value === 'string') {\n    var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n\n    if (match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n\n    if (value.length % 2) {\n      value = '0x0' + value.substring(2);\n    }\n\n    return value;\n  }\n\n  if (isArrayish(value)) {\n    var result = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var v = value[i];\n      result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n    }\n\n    return '0x' + result.join('');\n  }\n\n  errors.throwError('invalid hexlify value', null, {\n    arg: 'value',\n    value: value\n  });\n  return 'never';\n}\n\nexports.hexlify = hexlify;\n\nfunction hexDataLength(data) {\n  if (!isHexString(data) || data.length % 2 !== 0) {\n    return null;\n  }\n\n  return (data.length - 2) / 2;\n}\n\nexports.hexDataLength = hexDataLength;\n\nfunction hexDataSlice(data, offset, length) {\n  if (!isHexString(data)) {\n    errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data\n    });\n  }\n\n  if (data.length % 2 !== 0) {\n    errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data\n    });\n  }\n\n  offset = 2 + 2 * offset;\n\n  if (length != null) {\n    return '0x' + data.substring(offset, offset + 2 * length);\n  }\n\n  return '0x' + data.substring(offset);\n}\n\nexports.hexDataSlice = hexDataSlice;\n\nfunction hexStripZeros(value) {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n\n  while (value.length > 3 && value.substring(0, 3) === '0x0') {\n    value = '0x' + value.substring(3);\n  }\n\n  return value;\n}\n\nexports.hexStripZeros = hexStripZeros;\n\nfunction hexZeroPad(value, length) {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = '0x0' + value.substring(2);\n  }\n\n  return value;\n}\n\nexports.hexZeroPad = hexZeroPad;\n\nfunction isSignature(value) {\n  return value && value.r != null && value.s != null;\n}\n\nfunction splitSignature(signature) {\n  var v = 0;\n  var r = '0x',\n      s = '0x';\n\n  if (isSignature(signature)) {\n    if (signature.v == null && signature.recoveryParam == null) {\n      errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, {\n        argument: 'signature',\n        value: signature\n      });\n    }\n\n    r = hexZeroPad(signature.r, 32);\n    s = hexZeroPad(signature.s, 32);\n    v = signature.v;\n\n    if (typeof v === 'string') {\n      v = parseInt(v, 16);\n    }\n\n    var recoveryParam = signature.recoveryParam;\n\n    if (recoveryParam == null && signature.v != null) {\n      recoveryParam = 1 - v % 2;\n    }\n\n    v = 27 + recoveryParam;\n  } else {\n    var bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      throw new Error('invalid signature');\n    }\n\n    r = hexlify(bytes.slice(0, 32));\n    s = hexlify(bytes.slice(32, 64));\n    v = bytes[64];\n\n    if (v !== 27 && v !== 28) {\n      v = 27 + v % 2;\n    }\n  }\n\n  return {\n    r: r,\n    s: s,\n    recoveryParam: v - 27,\n    v: v\n  };\n}\n\nexports.splitSignature = splitSignature;\n\nfunction joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? '0x1c' : '0x1b']));\n}\n\nexports.joinSignature = joinSignature;","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/web3-eth-abi/node_modules/ethers/utils/bytes.js"],"names":["Object","defineProperty","exports","value","types_1","require","errors","AddressZero","HashZero","isBigNumber","BigNumber","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isArrayish","parseInt","String","length","i","v","arrayify","throwError","INVALID_ARGUMENT","arg","toHexString","match","substring","result","push","substr","type","concat","objects","arrays","object","offset","set","stripZeros","start","padZeros","Error","isHexString","HexCharacters","hexlify","hex","Math","floor","join","hexDataLength","data","hexDataSlice","hexStripZeros","hexZeroPad","isSignature","r","s","splitSignature","signature","recoveryParam","argument","bytes","joinSignature"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n *  Conversion Utilities\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar types_1 = require(\"./types\");\r\nvar errors = require(\"./errors\");\r\nexports.AddressZero = '0x0000000000000000000000000000000000000000';\r\nexports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\r\nfunction isBigNumber(value) {\r\n    return (value instanceof types_1.BigNumber);\r\n}\r\nfunction addSlice(array) {\r\n    if (array.slice) {\r\n        return array;\r\n    }\r\n    array.slice = function () {\r\n        var args = Array.prototype.slice.call(arguments);\r\n        return new Uint8Array(Array.prototype.slice.apply(array, args));\r\n    };\r\n    return array;\r\n}\r\nfunction isArrayish(value) {\r\n    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < value.length; i++) {\r\n        var v = value[i];\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isArrayish = isArrayish;\r\nfunction arrayify(value) {\r\n    if (value == null) {\r\n        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n    }\r\n    if (isBigNumber(value)) {\r\n        value = value.toHexString();\r\n    }\r\n    if (typeof (value) === 'string') {\r\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n        }\r\n        if (match[1] !== '0x') {\r\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        var result = [];\r\n        for (var i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    else if (typeof (value) === 'string') {\r\n    }\r\n    if (isArrayish(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });\r\n    return null;\r\n}\r\nexports.arrayify = arrayify;\r\nfunction concat(objects) {\r\n    var arrays = [];\r\n    var length = 0;\r\n    for (var i = 0; i < objects.length; i++) {\r\n        var object = arrayify(objects[i]);\r\n        arrays.push(object);\r\n        length += object.length;\r\n    }\r\n    var result = new Uint8Array(length);\r\n    var offset = 0;\r\n    for (var i = 0; i < arrays.length; i++) {\r\n        result.set(arrays[i], offset);\r\n        offset += arrays[i].length;\r\n    }\r\n    return addSlice(result);\r\n}\r\nexports.concat = concat;\r\nfunction stripZeros(value) {\r\n    var result = arrayify(value);\r\n    if (result.length === 0) {\r\n        return result;\r\n    }\r\n    // Find the first non-zero entry\r\n    var start = 0;\r\n    while (result[start] === 0) {\r\n        start++;\r\n    }\r\n    // If we started with zeros, strip them\r\n    if (start) {\r\n        result = result.slice(start);\r\n    }\r\n    return result;\r\n}\r\nexports.stripZeros = stripZeros;\r\nfunction padZeros(value, length) {\r\n    value = arrayify(value);\r\n    if (length < value.length) {\r\n        throw new Error('cannot pad');\r\n    }\r\n    var result = new Uint8Array(length);\r\n    result.set(value, length - value.length);\r\n    return addSlice(result);\r\n}\r\nexports.padZeros = padZeros;\r\nfunction isHexString(value, length) {\r\n    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false;\r\n    }\r\n    if (length && value.length !== 2 + 2 * length) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.isHexString = isHexString;\r\nvar HexCharacters = '0123456789abcdef';\r\nfunction hexlify(value) {\r\n    if (isBigNumber(value)) {\r\n        return value.toHexString();\r\n    }\r\n    if (typeof (value) === 'number') {\r\n        if (value < 0) {\r\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n        }\r\n        var hex = '';\r\n        while (value) {\r\n            hex = HexCharacters[value & 0x0f] + hex;\r\n            value = Math.floor(value / 16);\r\n        }\r\n        if (hex.length) {\r\n            if (hex.length % 2) {\r\n                hex = '0' + hex;\r\n            }\r\n            return '0x' + hex;\r\n        }\r\n        return '0x00';\r\n    }\r\n    if (typeof (value) === 'string') {\r\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n        }\r\n        if (match[1] !== '0x') {\r\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n        }\r\n        if (value.length % 2) {\r\n            value = '0x0' + value.substring(2);\r\n        }\r\n        return value;\r\n    }\r\n    if (isArrayish(value)) {\r\n        var result = [];\r\n        for (var i = 0; i < value.length; i++) {\r\n            var v = value[i];\r\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\r\n        }\r\n        return '0x' + result.join('');\r\n    }\r\n    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });\r\n    return 'never';\r\n}\r\nexports.hexlify = hexlify;\r\nfunction hexDataLength(data) {\r\n    if (!isHexString(data) || (data.length % 2) !== 0) {\r\n        return null;\r\n    }\r\n    return (data.length - 2) / 2;\r\n}\r\nexports.hexDataLength = hexDataLength;\r\nfunction hexDataSlice(data, offset, length) {\r\n    if (!isHexString(data)) {\r\n        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\r\n    }\r\n    if ((data.length % 2) !== 0) {\r\n        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\r\n    }\r\n    offset = 2 + 2 * offset;\r\n    if (length != null) {\r\n        return '0x' + data.substring(offset, offset + 2 * length);\r\n    }\r\n    return '0x' + data.substring(offset);\r\n}\r\nexports.hexDataSlice = hexDataSlice;\r\nfunction hexStripZeros(value) {\r\n    if (!isHexString(value)) {\r\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n    }\r\n    while (value.length > 3 && value.substring(0, 3) === '0x0') {\r\n        value = '0x' + value.substring(3);\r\n    }\r\n    return value;\r\n}\r\nexports.hexStripZeros = hexStripZeros;\r\nfunction hexZeroPad(value, length) {\r\n    if (!isHexString(value)) {\r\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\r\n    }\r\n    while (value.length < 2 * length + 2) {\r\n        value = '0x0' + value.substring(2);\r\n    }\r\n    return value;\r\n}\r\nexports.hexZeroPad = hexZeroPad;\r\nfunction isSignature(value) {\r\n    return (value && value.r != null && value.s != null);\r\n}\r\nfunction splitSignature(signature) {\r\n    var v = 0;\r\n    var r = '0x', s = '0x';\r\n    if (isSignature(signature)) {\r\n        if (signature.v == null && signature.recoveryParam == null) {\r\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });\r\n        }\r\n        r = hexZeroPad(signature.r, 32);\r\n        s = hexZeroPad(signature.s, 32);\r\n        v = signature.v;\r\n        if (typeof (v) === 'string') {\r\n            v = parseInt(v, 16);\r\n        }\r\n        var recoveryParam = signature.recoveryParam;\r\n        if (recoveryParam == null && signature.v != null) {\r\n            recoveryParam = 1 - (v % 2);\r\n        }\r\n        v = 27 + recoveryParam;\r\n    }\r\n    else {\r\n        var bytes = arrayify(signature);\r\n        if (bytes.length !== 65) {\r\n            throw new Error('invalid signature');\r\n        }\r\n        r = hexlify(bytes.slice(0, 32));\r\n        s = hexlify(bytes.slice(32, 64));\r\n        v = bytes[64];\r\n        if (v !== 27 && v !== 28) {\r\n            v = 27 + (v % 2);\r\n        }\r\n    }\r\n    return {\r\n        r: r,\r\n        s: s,\r\n        recoveryParam: (v - 27),\r\n        v: v\r\n    };\r\n}\r\nexports.splitSignature = splitSignature;\r\nfunction joinSignature(signature) {\r\n    signature = splitSignature(signature);\r\n    return hexlify(concat([\r\n        signature.r,\r\n        signature.s,\r\n        (signature.recoveryParam ? '0x1c' : '0x1b')\r\n    ]));\r\n}\r\nexports.joinSignature = joinSignature;\r\n"]},"metadata":{},"sourceType":"script"}