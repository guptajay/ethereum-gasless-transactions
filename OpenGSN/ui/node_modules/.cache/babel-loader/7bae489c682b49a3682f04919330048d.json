{"ast":null,"code":"/**\r\n * winston.js: Top-level include defining Winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\n'use strict';\n\nvar logform = require('logform');\n\nvar _require = require('./winston/common'),\n    warn = _require.warn;\n/**\r\n * Setup to expose.\r\n * @type {Object}\r\n */\n\n\nvar winston = exports;\n/**\r\n * Expose version. Use `require` method for `webpack` support.\r\n * @type {string}\r\n */\n\nwinston.version = require('../package.json').version;\n/**\r\n * Include transports defined by default by winston\r\n * @type {Array}\r\n */\n\nwinston.transports = require('./winston/transports');\n/**\r\n * Expose utility methods\r\n * @type {Object}\r\n */\n\nwinston.config = require('./winston/config');\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\n\nwinston.addColors = logform.levels;\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\n\nwinston.format = logform.format;\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {function}\r\n */\n\nwinston.createLogger = require('./winston/create-logger');\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\n\nwinston.ExceptionHandler = require('./winston/exception-handler');\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\n\nwinston.RejectionHandler = require('./winston/rejection-handler');\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Container}\r\n */\n\nwinston.Container = require('./winston/container');\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\n\nwinston.Transport = require('winston-transport');\n/**\r\n * We create and expose a default `Container` to `winston.loggers` so that the\r\n * programmer may manage multiple `winston.Logger` instances without any\r\n * additional overhead.\r\n * @example\r\n *   // some-file1.js\r\n *   const logger = require('winston').loggers.get('something');\r\n *\r\n *   // some-file2.js\r\n *   const logger = require('winston').loggers.get('something');\r\n */\n\nwinston.loggers = new winston.Container();\n/**\r\n * We create and expose a 'defaultLogger' so that the programmer may do the\r\n * following without the need to create an instance of winston.Logger directly:\r\n * @example\r\n *   const winston = require('winston');\r\n *   winston.log('info', 'some message');\r\n *   winston.error('some error');\r\n */\n\nvar defaultLogger = winston.createLogger(); // Pass through the target methods onto `winston.\n\nObject.keys(winston.config.npm.levels).concat(['log', 'query', 'stream', 'add', 'remove', 'clear', 'profile', 'startTimer', 'handleExceptions', 'unhandleExceptions', 'handleRejections', 'unhandleRejections', 'configure', 'child']).forEach(function (method) {\n  return winston[method] = function () {\n    return defaultLogger[method].apply(defaultLogger, arguments);\n  };\n});\n/**\r\n * Define getter / setter for the default logger level which need to be exposed\r\n * by winston.\r\n * @type {string}\r\n */\n\nObject.defineProperty(winston, 'level', {\n  get: function get() {\n    return defaultLogger.level;\n  },\n  set: function set(val) {\n    defaultLogger.level = val;\n  }\n});\n/**\r\n * Define getter for `exceptions` which replaces `handleExceptions` and\r\n * `unhandleExceptions`.\r\n * @type {Object}\r\n */\n\nObject.defineProperty(winston, 'exceptions', {\n  get: function get() {\n    return defaultLogger.exceptions;\n  }\n});\n/**\r\n * Define getters / setters for appropriate properties of the default logger\r\n * which need to be exposed by winston.\r\n * @type {Logger}\r\n */\n\n['exitOnError'].forEach(function (prop) {\n  Object.defineProperty(winston, prop, {\n    get: function get() {\n      return defaultLogger[prop];\n    },\n    set: function set(val) {\n      defaultLogger[prop] = val;\n    }\n  });\n});\n/**\r\n * The default transports and exceptionHandlers for the default winston logger.\r\n * @type {Object}\r\n */\n\nObject.defineProperty(winston, 'default', {\n  get: function get() {\n    return {\n      exceptionHandlers: defaultLogger.exceptionHandlers,\n      rejectionHandlers: defaultLogger.rejectionHandlers,\n      transports: defaultLogger.transports\n    };\n  }\n}); // Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\n\nwarn.deprecated(winston, 'setLevels');\nwarn.forFunctions(winston, 'useFormat', ['cli']);\nwarn.forProperties(winston, 'useFormat', ['padLevels', 'stripColors']);\nwarn.forFunctions(winston, 'deprecated', ['addRewriter', 'addFilter', 'clone', 'extend']);\nwarn.forProperties(winston, 'deprecated', ['emitErrs', 'levelLength']); // Throw a useful error when users attempt to run `new winston.Logger`.\n\nwarn.moved(winston, 'createLogger', 'Logger');","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston/dist/winston.js"],"names":["logform","require","_require","warn","winston","exports","version","transports","config","addColors","levels","format","createLogger","ExceptionHandler","RejectionHandler","Container","Transport","loggers","defaultLogger","Object","keys","npm","concat","forEach","method","apply","arguments","defineProperty","get","level","set","val","exceptions","prop","exceptionHandlers","rejectionHandlers","deprecated","forFunctions","forProperties","moved"],"mappings":"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","sourcesContent":["/**\r\n * winston.js: Top-level include defining Winston.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\r\n'use strict';\r\n\r\nvar logform = require('logform');\r\n\r\nvar _require = require('./winston/common'),\r\n    warn = _require.warn;\r\n/**\r\n * Setup to expose.\r\n * @type {Object}\r\n */\r\n\r\n\r\nvar winston = exports;\r\n/**\r\n * Expose version. Use `require` method for `webpack` support.\r\n * @type {string}\r\n */\r\n\r\nwinston.version = require('../package.json').version;\r\n/**\r\n * Include transports defined by default by winston\r\n * @type {Array}\r\n */\r\n\r\nwinston.transports = require('./winston/transports');\r\n/**\r\n * Expose utility methods\r\n * @type {Object}\r\n */\r\n\r\nwinston.config = require('./winston/config');\r\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\r\n\r\nwinston.addColors = logform.levels;\r\n/**\r\n * Hoist format-related functionality from logform.\r\n * @type {Object}\r\n */\r\n\r\nwinston.format = logform.format;\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {function}\r\n */\r\n\r\nwinston.createLogger = require('./winston/create-logger');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\n\r\nwinston.ExceptionHandler = require('./winston/exception-handler');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\n\r\nwinston.RejectionHandler = require('./winston/rejection-handler');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Container}\r\n */\r\n\r\nwinston.Container = require('./winston/container');\r\n/**\r\n * Expose core Logging-related prototypes.\r\n * @type {Object}\r\n */\r\n\r\nwinston.Transport = require('winston-transport');\r\n/**\r\n * We create and expose a default `Container` to `winston.loggers` so that the\r\n * programmer may manage multiple `winston.Logger` instances without any\r\n * additional overhead.\r\n * @example\r\n *   // some-file1.js\r\n *   const logger = require('winston').loggers.get('something');\r\n *\r\n *   // some-file2.js\r\n *   const logger = require('winston').loggers.get('something');\r\n */\r\n\r\nwinston.loggers = new winston.Container();\r\n/**\r\n * We create and expose a 'defaultLogger' so that the programmer may do the\r\n * following without the need to create an instance of winston.Logger directly:\r\n * @example\r\n *   const winston = require('winston');\r\n *   winston.log('info', 'some message');\r\n *   winston.error('some error');\r\n */\r\n\r\nvar defaultLogger = winston.createLogger(); // Pass through the target methods onto `winston.\r\n\r\nObject.keys(winston.config.npm.levels).concat(['log', 'query', 'stream', 'add', 'remove', 'clear', 'profile', 'startTimer', 'handleExceptions', 'unhandleExceptions', 'handleRejections', 'unhandleRejections', 'configure', 'child']).forEach(function (method) {\r\n  return winston[method] = function () {\r\n    return defaultLogger[method].apply(defaultLogger, arguments);\r\n  };\r\n});\r\n/**\r\n * Define getter / setter for the default logger level which need to be exposed\r\n * by winston.\r\n * @type {string}\r\n */\r\n\r\nObject.defineProperty(winston, 'level', {\r\n  get: function get() {\r\n    return defaultLogger.level;\r\n  },\r\n  set: function set(val) {\r\n    defaultLogger.level = val;\r\n  }\r\n});\r\n/**\r\n * Define getter for `exceptions` which replaces `handleExceptions` and\r\n * `unhandleExceptions`.\r\n * @type {Object}\r\n */\r\n\r\nObject.defineProperty(winston, 'exceptions', {\r\n  get: function get() {\r\n    return defaultLogger.exceptions;\r\n  }\r\n});\r\n/**\r\n * Define getters / setters for appropriate properties of the default logger\r\n * which need to be exposed by winston.\r\n * @type {Logger}\r\n */\r\n\r\n['exitOnError'].forEach(function (prop) {\r\n  Object.defineProperty(winston, prop, {\r\n    get: function get() {\r\n      return defaultLogger[prop];\r\n    },\r\n    set: function set(val) {\r\n      defaultLogger[prop] = val;\r\n    }\r\n  });\r\n});\r\n/**\r\n * The default transports and exceptionHandlers for the default winston logger.\r\n * @type {Object}\r\n */\r\n\r\nObject.defineProperty(winston, 'default', {\r\n  get: function get() {\r\n    return {\r\n      exceptionHandlers: defaultLogger.exceptionHandlers,\r\n      rejectionHandlers: defaultLogger.rejectionHandlers,\r\n      transports: defaultLogger.transports\r\n    };\r\n  }\r\n}); // Have friendlier breakage notices for properties that were exposed by default\r\n// on winston < 3.0.\r\n\r\nwarn.deprecated(winston, 'setLevels');\r\nwarn.forFunctions(winston, 'useFormat', ['cli']);\r\nwarn.forProperties(winston, 'useFormat', ['padLevels', 'stripColors']);\r\nwarn.forFunctions(winston, 'deprecated', ['addRewriter', 'addFilter', 'clone', 'extend']);\r\nwarn.forProperties(winston, 'deprecated', ['emitErrs', 'levelLength']); // Throw a useful error when users attempt to run `new winston.Logger`.\r\n\r\nwarn.moved(winston, 'createLogger', 'Logger');"]},"metadata":{},"sourceType":"script"}