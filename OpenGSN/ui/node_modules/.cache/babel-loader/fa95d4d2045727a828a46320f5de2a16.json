{"ast":null,"code":"const ethers = require('ethers');\n\nconst {\n  formatEther\n} = require('ethers/lib/utils');\n\nconst {\n  RelayProvider\n} = require('@opengsn/provider');\n\nconst contractArtifact = require('../../build/contracts/TargetContract.json');\n\nconst noFeePaymasterArtifact = require('../../build/contracts/NoFeePaymaster.json');\n\nconst tokenFeePaymasterArtifact = require('../../build/contracts/TokenFeePaymaster.json');\n\nconst tokenBankArtifact = require('../../build/contracts/TokenBank.json');\n\nlet targetContractNoFeePaymaster;\nlet targetContractTokenFeePaymaster;\nlet noFeePaymasterContract;\nlet tokenFeePaymasterContract;\nlet tokenBankContract;\nlet contractAddress;\nlet artifactNetwork;\nlet networkId;\nlet TokenFeeprovider;\nlet NoFeeprovider;\n\nasync function getAllAddresses() {\n  if (!window.ethereum) {\n    throw new Error('provider not found');\n  }\n\n  window.ethereum.on('accountsChanged', () => {\n    console.log('acct');\n    window.location.reload();\n  });\n  window.ethereum.on('chainChanged', () => {\n    console.log('chainChained');\n    window.location.reload();\n  });\n  networkId = await window.ethereum.request({\n    method: 'net_version'\n  });\n  let noFeePaymasterAddr = noFeePaymasterArtifact.networks[networkId].address;\n  let feePaymasterAddr = tokenFeePaymasterArtifact.networks[networkId].address;\n  let recepientAddr = contractArtifact.networks[networkId].address;\n  return [noFeePaymasterAddr, feePaymasterAddr, recepientAddr];\n}\n\nasync function initNoFeePaymaster() {\n  if (!window.ethereum) {\n    throw new Error('provider not found');\n  }\n\n  window.ethereum.on('accountsChanged', () => {\n    console.log('acct');\n    window.location.reload();\n  });\n  window.ethereum.on('chainChanged', () => {\n    console.log('chainChained');\n    window.location.reload();\n  });\n  networkId = await window.ethereum.request({\n    method: 'net_version'\n  });\n  const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\n    provider: window.ethereum,\n    config: {\n      paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\n    }\n  }).init();\n  NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster);\n  const noFeeNetwork = await NoFeeprovider.getNetwork();\n  artifactNetwork = contractArtifact.networks[networkId];\n  if (!artifactNetwork) throw new Error('Can\\'t find deployment on network ' + networkId);\n  contractAddress = artifactNetwork.address;\n  targetContractNoFeePaymaster = new ethers.Contract(contractAddress, contractArtifact.abi, NoFeeprovider.getSigner());\n  noFeePaymasterContract = new ethers.Contract(noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner());\n  await listenToNoFeeEvents();\n  return {\n    contractAddress,\n    noFeeNetwork\n  };\n}\n\nasync function initTokenFeePaymaster() {\n  if (!window.ethereum) {\n    throw new Error('provider not found');\n  }\n\n  window.ethereum.on('accountsChanged', () => {\n    console.log('acct');\n    window.location.reload();\n  });\n  window.ethereum.on('chainChanged', () => {\n    console.log('chainChained');\n    window.location.reload();\n  });\n  networkId = await window.ethereum.request({\n    method: 'net_version'\n  });\n  const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\n    provider: window.ethereum,\n    config: {\n      paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\n    }\n  }).init();\n  TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster);\n  const TokenFeeNetwork = await TokenFeeprovider.getNetwork();\n  artifactNetwork = contractArtifact.networks[networkId];\n  if (!artifactNetwork) throw new Error('Can\\'t find deployment on network ' + networkId);\n  contractAddress = artifactNetwork.address;\n  targetContractTokenFeePaymaster = new ethers.Contract(contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner());\n  tokenFeePaymasterContract = new ethers.Contract(tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner());\n  await listenToTokenFeeEvents();\n  return {\n    contractAddress,\n    TokenFeeNetwork\n  };\n}\n\nasync function noFeeContractCall() {\n  await window.ethereum.send('eth_requestAccounts');\n  let transaction = await targetContractNoFeePaymaster.noCommissionTx();\n  let hash = transaction.hash;\n  console.log(`Transaction ${hash} sent`);\n  let receipt = await NoFeeprovider.waitForTransaction(hash);\n  console.log(`Mined in block: ${receipt.blockNumber}`);\n}\n\nasync function tokenFeeContractCall() {\n  await window.ethereum.send('eth_requestAccounts');\n  let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx();\n  let hash = transaction.hash;\n  console.log(`Transaction ${hash} sent`);\n  let receipt = await TokenFeeprovider.waitForTransaction(hash);\n  console.log(`Mined in block: ${receipt.blockNumber}`);\n}\n\nlet logview;\n\nfunction log(message) {\n  message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>');\n\n  if (!logview) {\n    logview = document.getElementById('logview');\n  }\n\n  logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML;\n} // async function listenToEvents() {\n//   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n//   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n// }\n\n\nasync function listenToNoFeeEvents() {\n  targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n    log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`);\n    console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`);\n  });\n}\n\nasync function listenToTokenFeeEvents() {\n  targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n    log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`);\n    console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`);\n  });\n}\n\nwindow.app = {\n  initNoFeePaymaster,\n  initTokenFeePaymaster,\n  noFeeContractCall,\n  tokenFeeContractCall,\n  log,\n  getAllAddresses\n};","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/ui/src/ethereum.js"],"names":["ethers","require","formatEther","RelayProvider","contractArtifact","noFeePaymasterArtifact","tokenFeePaymasterArtifact","tokenBankArtifact","targetContractNoFeePaymaster","targetContractTokenFeePaymaster","noFeePaymasterContract","tokenFeePaymasterContract","tokenBankContract","contractAddress","artifactNetwork","networkId","TokenFeeprovider","NoFeeprovider","getAllAddresses","window","ethereum","Error","on","console","log","location","reload","request","method","noFeePaymasterAddr","networks","address","feePaymasterAddr","recepientAddr","initNoFeePaymaster","gsnProviderNoFeePaymaster","newProvider","provider","config","paymasterAddress","init","providers","Web3Provider","noFeeNetwork","getNetwork","Contract","abi","getSigner","listenToNoFeeEvents","initTokenFeePaymaster","gsnProviderTokenFeePaymaster","TokenFeeNetwork","listenToTokenFeeEvents","noFeeContractCall","send","transaction","noCommissionTx","hash","receipt","waitForTransaction","blockNumber","tokenFeeContractCall","tokenCommissionTx","logview","message","replace","document","getElementById","innerHTML","previousHolder","currentHolder","rawEvent","app"],"mappings":"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","sourcesContent":["const ethers = require('ethers')\nconst { formatEther } = require('ethers/lib/utils')\nconst { RelayProvider } = require('@opengsn/provider')\n\n\nconst contractArtifact = require('../../build/contracts/TargetContract.json')\n\nconst noFeePaymasterArtifact = require('../../build/contracts/NoFeePaymaster.json')\nconst tokenFeePaymasterArtifact = require('../../build/contracts/TokenFeePaymaster.json')\n\nconst tokenBankArtifact = require('../../build/contracts/TokenBank.json')\n\nlet targetContractNoFeePaymaster\nlet targetContractTokenFeePaymaster\nlet noFeePaymasterContract\nlet tokenFeePaymasterContract\nlet tokenBankContract\n\nlet contractAddress\n\nlet artifactNetwork\nlet networkId\nlet TokenFeeprovider\nlet NoFeeprovider\n\nasync function getAllAddresses() {\n\n    if (!window.ethereum) {\n        throw new Error('provider not found')\n    }\n    window.ethereum.on('accountsChanged', () => {\n        console.log('acct');\n        window.location.reload()\n    })\n    window.ethereum.on('chainChanged', () => {\n        console.log('chainChained');\n        window.location.reload()\n    })\n\n    networkId = await window.ethereum.request({ method: 'net_version' })\n\n\n    let noFeePaymasterAddr = noFeePaymasterArtifact.networks[networkId].address\n    let feePaymasterAddr = tokenFeePaymasterArtifact.networks[networkId].address\n    let recepientAddr = contractArtifact.networks[networkId].address\n    return [noFeePaymasterAddr, feePaymasterAddr, recepientAddr]\n}\n\nasync function initNoFeePaymaster() {\n\n    if (!window.ethereum) {\n        throw new Error('provider not found')\n    }\n    window.ethereum.on('accountsChanged', () => {\n        console.log('acct');\n        window.location.reload()\n    })\n    window.ethereum.on('chainChanged', () => {\n        console.log('chainChained');\n        window.location.reload()\n    })\n\n    networkId = await window.ethereum.request({ method: 'net_version' })\n\n    const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\n        provider: window.ethereum,\n        config: {\n            paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\n        }\n    }).init()\n\n\n    NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster)\n\n    const noFeeNetwork = await NoFeeprovider.getNetwork()\n    artifactNetwork = contractArtifact.networks[networkId]\n\n\n    if (!artifactNetwork)\n        throw new Error('Can\\'t find deployment on network ' + networkId)\n\n    contractAddress = artifactNetwork.address\n\n\n    targetContractNoFeePaymaster = new ethers.Contract(\n        contractAddress, contractArtifact.abi, NoFeeprovider.getSigner())\n\n    noFeePaymasterContract = new ethers.Contract(\n        noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner())\n\n\n\n    await listenToNoFeeEvents()\n    return { contractAddress, noFeeNetwork }\n}\n\nasync function initTokenFeePaymaster() {\n\n    if (!window.ethereum) {\n        throw new Error('provider not found')\n    }\n    window.ethereum.on('accountsChanged', () => {\n        console.log('acct');\n        window.location.reload()\n    })\n    window.ethereum.on('chainChanged', () => {\n        console.log('chainChained');\n        window.location.reload()\n    })\n\n    networkId = await window.ethereum.request({ method: 'net_version' })\n\n    const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\n        provider: window.ethereum,\n        config: {\n            paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\n        }\n    }).init()\n\n\n    TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster)\n\n    const TokenFeeNetwork = await TokenFeeprovider.getNetwork()\n    artifactNetwork = contractArtifact.networks[networkId]\n\n\n    if (!artifactNetwork)\n        throw new Error('Can\\'t find deployment on network ' + networkId)\n\n    contractAddress = artifactNetwork.address\n\n\n    targetContractTokenFeePaymaster = new ethers.Contract(\n        contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner())\n\n\n    tokenFeePaymasterContract = new ethers.Contract(\n        tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner())\n\n    await listenToTokenFeeEvents()\n    return { contractAddress, TokenFeeNetwork }\n}\n\n\nasync function noFeeContractCall() {\n    await window.ethereum.send('eth_requestAccounts')\n\n    let transaction = await targetContractNoFeePaymaster.noCommissionTx()\n    let hash = transaction.hash\n    console.log(`Transaction ${hash} sent`)\n    let receipt = await NoFeeprovider.waitForTransaction(hash)\n    console.log(`Mined in block: ${receipt.blockNumber}`)\n\n}\n\n\nasync function tokenFeeContractCall() {\n\n    await window.ethereum.send('eth_requestAccounts')\n\n    let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx()\n    let hash = transaction.hash\n    console.log(`Transaction ${hash} sent`)\n    let receipt = await TokenFeeprovider.waitForTransaction(hash)\n    console.log(`Mined in block: ${receipt.blockNumber}`)\n\n\n}\n\n\nlet logview\n\nfunction log(message) {\n    message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>')\n    if (!logview) {\n        logview = document.getElementById('logview')\n    }\n    logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML\n}\n\n\n// async function listenToEvents() {\n\n//   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n\n\n//   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n//   })\n\n// }\n\n\n\nasync function listenToNoFeeEvents() {\n    targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n        log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n        console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n    })\n}\n\nasync function listenToTokenFeeEvents() {\n    targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n        log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n        console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n    })\n}\n\n\n\n\nwindow.app = {\n    initNoFeePaymaster,\n    initTokenFeePaymaster,\n    noFeeContractCall,\n    tokenFeeContractCall,\n    log,\n    getAllAddresses\n}"]},"metadata":{},"sourceType":"module"}