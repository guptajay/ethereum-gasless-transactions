{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nclass VersionsManager {\n  /**\r\n   * @param componentVersion - a semver of a component that uses the VersionsManager\r\n   * @param requiredVersionRange - a semver that has to be satisfied by the\r\n   */\n  constructor(componentVersion, requiredVersionRange) {\n    if (semver_1.default.valid(componentVersion) == null) {\n      throw new Error('Component version is not valid');\n    }\n\n    if (requiredVersionRange == null) {\n      const ver = new semver_1.default.SemVer(componentVersion);\n      ver.patch = 0;\n      requiredVersionRange = '^' + ver.format();\n    }\n\n    this.requiredVersionRange = requiredVersionRange;\n  }\n  /**\r\n   * @param version - the version of a dependency to compare against\r\n   * @return true if {@param version} satisfies the {@link requiredVersionRange}\r\n   */\n\n\n  isRequiredVersionSatisfied(version) {\n    // prevent crash with some early paymasters (which are otherwise perfectly valid)\n    version = version.replace('_', '-');\n    return semver_1.default.satisfies(version, this.requiredVersionRange, {\n      includePrerelease: true\n    });\n  }\n\n}\n\nexports.VersionsManager = VersionsManager;","map":{"version":3,"sources":["../src/VersionsManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,MAAa,eAAb,CAA4B;AAG1B;;;AAGG;AACH,EAAA,WAAA,CAAa,gBAAb,EAAuC,oBAAvC,EAAoE;AAClE,QAAI,QAAA,CAAA,OAAA,CAAO,KAAP,CAAa,gBAAb,KAAkC,IAAtC,EAA4C;AAC1C,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,QAAI,oBAAoB,IAAI,IAA5B,EAAkC;AAChC,YAAM,GAAG,GAAG,IAAI,QAAA,CAAA,OAAA,CAAO,MAAX,CAAkB,gBAAlB,CAAZ;AACA,MAAA,GAAG,CAAC,KAAJ,GAAY,CAAZ;AACA,MAAA,oBAAoB,GAAG,MAAM,GAAG,CAAC,MAAJ,EAA7B;AACD;;AACD,SAAK,oBAAL,GAA4B,oBAA5B;AACD;AAED;;;AAGG;;;AACH,EAAA,0BAA0B,CAAE,OAAF,EAAiB;AACzC;AACA,IAAA,OAAO,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,EAAqB,GAArB,CAAV;AAEA,WAAO,QAAA,CAAA,OAAA,CAAO,SAAP,CAAiB,OAAjB,EAA0B,KAAK,oBAA/B,EAAqD;AAAE,MAAA,iBAAiB,EAAE;AAArB,KAArD,CAAP;AACD;;AA7ByB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst semver_1 = __importDefault(require(\"semver\"));\r\nclass VersionsManager {\r\n    /**\r\n     * @param componentVersion - a semver of a component that uses the VersionsManager\r\n     * @param requiredVersionRange - a semver that has to be satisfied by the\r\n     */\r\n    constructor(componentVersion, requiredVersionRange) {\r\n        if (semver_1.default.valid(componentVersion) == null) {\r\n            throw new Error('Component version is not valid');\r\n        }\r\n        if (requiredVersionRange == null) {\r\n            const ver = new semver_1.default.SemVer(componentVersion);\r\n            ver.patch = 0;\r\n            requiredVersionRange = '^' + ver.format();\r\n        }\r\n        this.requiredVersionRange = requiredVersionRange;\r\n    }\r\n    /**\r\n     * @param version - the version of a dependency to compare against\r\n     * @return true if {@param version} satisfies the {@link requiredVersionRange}\r\n     */\r\n    isRequiredVersionSatisfied(version) {\r\n        // prevent crash with some early paymasters (which are otherwise perfectly valid)\r\n        version = version.replace('_', '-');\r\n        return semver_1.default.satisfies(version, this.requiredVersionRange, { includePrerelease: true });\r\n    }\r\n}\r\nexports.VersionsManager = VersionsManager;\r\n//# sourceMappingURL=VersionsManager.js.map"]},"metadata":{},"sourceType":"script"}