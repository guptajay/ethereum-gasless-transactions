{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst web3_eth_abi_1 = __importDefault(require(\"web3-eth-abi\"));\n\nconst IPaymaster_json_1 = __importDefault(require(\"./interfaces/IPaymaster.json\"));\n\nconst IRelayHub_json_1 = __importDefault(require(\"./interfaces/IRelayHub.json\"));\n\nconst IForwarder_json_1 = __importDefault(require(\"./interfaces/IForwarder.json\"));\n\nconst IStakeManager_json_1 = __importDefault(require(\"./interfaces/IStakeManager.json\"));\n\nconst IPenalizer_json_1 = __importDefault(require(\"./interfaces/IPenalizer.json\"));\n\nconst IRelayRecipient_json_1 = __importDefault(require(\"./interfaces/IRelayRecipient.json\"));\n\nconst IVersionRegistry_json_1 = __importDefault(require(\"./interfaces/IVersionRegistry.json\"));\n\nconst VersionsManager_1 = require(\"./VersionsManager\");\n\nconst ErrorReplacerJSON_1 = require(\"./ErrorReplacerJSON\");\n\nconst Utils_1 = require(\"./Utils\");\n\nconst LightTruffleContract_1 = require(\"./LightTruffleContract\");\n\nconst Version_1 = require(\"./Version\");\n\nconst ethereumjs_common_1 = __importDefault(require(\"ethereumjs-common\"));\n\nconst GSNContractsDataTypes_1 = require(\"./types/GSNContractsDataTypes\");\n\nclass ContractInteractor {\n  constructor(_ref) {\n    let {\n      maxPageSize,\n      provider,\n      versionManager,\n      logger,\n      deployment = {}\n    } = _ref;\n    this.maxPageSize = maxPageSize;\n    this.logger = logger;\n    this.versionManager = versionManager !== null && versionManager !== void 0 ? versionManager : new VersionsManager_1.VersionsManager(Version_1.gsnRuntimeVersion, Version_1.gsnRequiredVersion);\n    this.web3 = new web3_1.default(provider);\n    this.deployment = deployment;\n    this.provider = provider; // @ts-ignore\n\n    this.IPaymasterContract = LightTruffleContract_1.TruffleContract({\n      contractName: 'IPaymaster',\n      abi: IPaymaster_json_1.default\n    }); // @ts-ignore\n\n    this.IRelayHubContract = LightTruffleContract_1.TruffleContract({\n      contractName: 'IRelayHub',\n      abi: IRelayHub_json_1.default\n    }); // @ts-ignore\n\n    this.IForwarderContract = LightTruffleContract_1.TruffleContract({\n      contractName: 'IForwarder',\n      abi: IForwarder_json_1.default\n    }); // @ts-ignore\n\n    this.IStakeManager = LightTruffleContract_1.TruffleContract({\n      contractName: 'IStakeManager',\n      abi: IStakeManager_json_1.default\n    }); // @ts-ignore\n\n    this.IPenalizer = LightTruffleContract_1.TruffleContract({\n      contractName: 'IPenalizer',\n      abi: IPenalizer_json_1.default\n    }); // @ts-ignore\n\n    this.IRelayRecipient = LightTruffleContract_1.TruffleContract({\n      contractName: 'IRelayRecipient',\n      abi: IRelayRecipient_json_1.default\n    }); // @ts-ignore\n\n    this.IVersionRegistry = LightTruffleContract_1.TruffleContract({\n      contractName: 'IVersionRegistry',\n      abi: IVersionRegistry_json_1.default\n    });\n    this.IStakeManager.setProvider(this.provider, undefined);\n    this.IRelayHubContract.setProvider(this.provider, undefined);\n    this.IPaymasterContract.setProvider(this.provider, undefined);\n    this.IForwarderContract.setProvider(this.provider, undefined);\n    this.IPenalizer.setProvider(this.provider, undefined);\n    this.IRelayRecipient.setProvider(this.provider, undefined);\n    this.IVersionRegistry.setProvider(this.provider, undefined);\n    this.relayCallMethod = this.IRelayHubContract.createContract('').methods.relayCall;\n  }\n\n  async init() {\n    this.logger.debug('interactor init start');\n\n    if (this.rawTxOptions != null) {\n      throw new Error('_init was already called');\n    }\n\n    await this._resolveDeployment();\n    await this._initializeContracts();\n    await this._validateCompatibility();\n    const chain = await this.web3.eth.net.getNetworkType();\n    this.chainId = await this.web3.eth.getChainId();\n    this.networkId = await this.web3.eth.net.getId();\n    this.networkType = await this.web3.eth.net.getNetworkType(); // chain === 'private' means we're on ganache, and ethereumjs-tx.Transaction doesn't support that chain type\n\n    this.rawTxOptions = getRawTxOptions(this.chainId, this.networkId, chain);\n    return this;\n  }\n\n  async _resolveDeployment() {\n    if (this.deployment.paymasterAddress != null && this.deployment.relayHubAddress != null) {\n      this.logger.warn('Already resolved!');\n      return;\n    }\n\n    if (this.deployment.paymasterAddress != null) {\n      await this._resolveDeploymentFromPaymaster(this.deployment.paymasterAddress);\n    } else if (this.deployment.relayHubAddress != null) {\n      await this._resolveDeploymentFromRelayHub(this.deployment.relayHubAddress);\n    } else {\n      this.logger.info(`Contract interactor cannot resolve a full deployment from the following input: ${JSON.stringify(this.deployment)}`);\n    }\n  }\n\n  async _resolveDeploymentFromPaymaster(paymasterAddress) {\n    this.paymasterInstance = await this._createPaymaster(paymasterAddress);\n    const [relayHubAddress, forwarderAddress, paymasterVersion] = await Promise.all([this.paymasterInstance.getHubAddr().catch(e => {\n      throw new Error(`Not a paymaster contract: ${e.message}`);\n    }), this.paymasterInstance.trustedForwarder().catch(e => {\n      throw new Error(`paymaster has no trustedForwarder(): ${e.message}`);\n    }), this.paymasterInstance.versionPaymaster().catch(e => {\n      throw new Error(`Not a paymaster contract: ${e.message}`);\n    }).then(version => {\n      this._validateVersion(version);\n\n      return version;\n    })]);\n    this.deployment.relayHubAddress = relayHubAddress;\n    this.deployment.forwarderAddress = forwarderAddress;\n    this.paymasterVersion = paymasterVersion;\n    await this._resolveDeploymentFromRelayHub(relayHubAddress);\n  }\n\n  async _resolveDeploymentFromRelayHub(relayHubAddress) {\n    this.relayHubInstance = await this._createRelayHub(relayHubAddress);\n    const [stakeManagerAddress, penalizerAddress] = await Promise.all([this._hubStakeManagerAddress(), this._hubPenalizerAddress()]);\n    this.deployment.relayHubAddress = relayHubAddress;\n    this.deployment.stakeManagerAddress = stakeManagerAddress;\n    this.deployment.penalizerAddress = penalizerAddress;\n  }\n\n  async _validateCompatibility() {\n    if (this.deployment == null || this.relayHubInstance == null) {\n      return;\n    }\n\n    const hub = this.relayHubInstance;\n    const version = await hub.versionHub();\n\n    this._validateVersion(version);\n  }\n\n  _validateVersion(version) {\n    const versionSatisfied = this.versionManager.isRequiredVersionSatisfied(version);\n\n    if (!versionSatisfied) {\n      throw new Error(`Provided Hub version(${version}) does not satisfy the requirement(${this.versionManager.requiredVersionRange})`);\n    }\n  }\n\n  async _initializeContracts() {\n    if (this.relayHubInstance == null && this.deployment.relayHubAddress != null) {\n      this.relayHubInstance = await this._createRelayHub(this.deployment.relayHubAddress);\n    }\n\n    if (this.paymasterInstance == null && this.deployment.paymasterAddress != null) {\n      this.paymasterInstance = await this._createPaymaster(this.deployment.paymasterAddress);\n    }\n\n    if (this.deployment.forwarderAddress != null) {\n      this.forwarderInstance = await this._createForwarder(this.deployment.forwarderAddress);\n    }\n\n    if (this.deployment.stakeManagerAddress != null) {\n      this.stakeManagerInstance = await this._createStakeManager(this.deployment.stakeManagerAddress);\n    }\n\n    if (this.deployment.penalizerAddress != null) {\n      this.penalizerInstance = await this._createPenalizer(this.deployment.penalizerAddress);\n    }\n\n    if (this.deployment.versionRegistryAddress != null) {\n      this.versionRegistry = await this._createVersionRegistry(this.deployment.versionRegistryAddress);\n    }\n  } // must use these options when creating Transaction object\n\n\n  getRawTxOptions() {\n    if (this.rawTxOptions == null) {\n      throw new Error('_init not called');\n    }\n\n    return this.rawTxOptions;\n  }\n\n  async _createRecipient(address) {\n    if (this.relayRecipientInstance != null && this.relayRecipientInstance.address.toLowerCase() === address.toLowerCase()) {\n      return this.relayRecipientInstance;\n    }\n\n    this.relayRecipientInstance = await this.IRelayRecipient.at(address);\n    return this.relayRecipientInstance;\n  }\n\n  async _createPaymaster(address) {\n    return await this.IPaymasterContract.at(address);\n  }\n\n  async _createRelayHub(address) {\n    return await this.IRelayHubContract.at(address);\n  }\n\n  async _createForwarder(address) {\n    return await this.IForwarderContract.at(address);\n  }\n\n  async _createStakeManager(address) {\n    return await this.IStakeManager.at(address);\n  }\n\n  async _createPenalizer(address) {\n    return await this.IPenalizer.at(address);\n  }\n\n  async _createVersionRegistry(address) {\n    return await this.IVersionRegistry.at(address);\n  }\n\n  async isTrustedForwarder(recipientAddress, forwarder) {\n    const recipient = await this._createRecipient(recipientAddress);\n    return await recipient.isTrustedForwarder(forwarder);\n  }\n\n  async getSenderNonce(sender, forwarderAddress) {\n    const forwarder = await this._createForwarder(forwarderAddress);\n    const nonce = await forwarder.getNonce(sender);\n    return nonce.toString();\n  }\n\n  async _getBlockGasLimit() {\n    const latestBlock = await this.web3.eth.getBlock('latest');\n    return latestBlock.gasLimit;\n  }\n  /**\r\n   * make a view call to relayCall(), just like the way it will be called by the relayer.\r\n   * returns:\r\n   * - paymasterAccepted - true if accepted\r\n   * - reverted - true if relayCall was reverted.\r\n   * - returnValue - if either reverted or paymaster NOT accepted, then this is the reason string.\r\n   */\n\n\n  async validateRelayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, maxViewableGasLimit) {\n    var _a;\n\n    const relayHub = this.relayHubInstance;\n\n    try {\n      const externalGasLimit = await this.getMaxViewableGasLimit(relayRequest, maxViewableGasLimit);\n      const encodedRelayCall = relayHub.contract.methods.relayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, externalGasLimit).encodeABI();\n      const res = await new Promise((resolve, reject) => {\n        // @ts-ignore\n        this.web3.currentProvider.send({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'eth_call',\n          params: [{\n            from: relayRequest.relayData.relayWorker,\n            to: relayHub.address,\n            gasPrice: web3_utils_1.toHex(relayRequest.relayData.gasPrice),\n            gas: web3_utils_1.toHex(externalGasLimit),\n            data: encodedRelayCall\n          }, 'latest']\n        }, (err, res) => {\n          const revertMsg = this._decodeRevertFromResponse(err, res);\n\n          if (revertMsg != null) {\n            reject(new Error(revertMsg));\n          }\n\n          if (err !== null) {\n            reject(err);\n          } else {\n            resolve(res.result);\n          }\n        });\n      });\n      this.logger.debug('relayCall res=' + res); // @ts-ignore\n\n      const decoded = web3_eth_abi_1.default.decodeParameters(['bool', 'bytes'], res);\n      const paymasterAccepted = decoded[0];\n      let returnValue;\n\n      if (paymasterAccepted) {\n        returnValue = decoded[1];\n      } else {\n        returnValue = (_a = this._decodeRevertFromResponse({}, {\n          result: decoded[1]\n        })) !== null && _a !== void 0 ? _a : decoded[1];\n      }\n\n      return {\n        returnValue: returnValue,\n        paymasterAccepted: paymasterAccepted,\n        reverted: false\n      };\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e, ErrorReplacerJSON_1.replaceErrors);\n      return {\n        paymasterAccepted: false,\n        reverted: true,\n        returnValue: `view call to 'relayCall' reverted in client: ${message}`\n      };\n    }\n  }\n\n  async getMaxViewableGasLimit(relayRequest, maxViewableGasLimit) {\n    const blockGasLimit = web3_utils_1.toBN(maxViewableGasLimit !== null && maxViewableGasLimit !== void 0 ? maxViewableGasLimit : await this._getBlockGasLimit());\n    const workerBalance = web3_utils_1.toBN(await this.getBalance(relayRequest.relayData.relayWorker));\n    const workerGasLimit = workerBalance.div(web3_utils_1.toBN(relayRequest.relayData.gasPrice === '0' ? 1 : relayRequest.relayData.gasPrice));\n    return bn_js_1.default.min(blockGasLimit, workerGasLimit);\n  }\n  /**\r\n   * decode revert from rpc response.\r\n   * called from the callback of the provider \"eth_call\" call.\r\n   * check if response is revert, and extract revert reason from it.\r\n   * support kovan, geth, ganache error formats..\r\n   * @param err - provider err value\r\n   * @param res - provider res value\r\n   */\n  // decode revert from rpc response.\n  //\n\n\n  _decodeRevertFromResponse(err, res) {\n    var _a, _b, _c, _d, _e, _f;\n\n    let matchGanache = (_b = (_a = err === null || err === void 0 ? void 0 : err.data) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toString().match(/: revert(?:ed)? (.*)/);\n\n    if (matchGanache == null) {\n      matchGanache = (_d = (_c = res === null || res === void 0 ? void 0 : res.error) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.toString().match(/: revert(?:ed)? (.*)/);\n    }\n\n    if (matchGanache != null) {\n      return matchGanache[1];\n    }\n\n    const m = (_e = err === null || err === void 0 ? void 0 : err.data) === null || _e === void 0 ? void 0 : _e.toString().match(/(0x08c379a0\\S*)/);\n\n    if (m != null) {\n      return Utils_1.decodeRevertReason(m[1]);\n    }\n\n    const result = (_f = res === null || res === void 0 ? void 0 : res.result) !== null && _f !== void 0 ? _f : '';\n\n    if (result.startsWith('0x08c379a0')) {\n      return Utils_1.decodeRevertReason(result);\n    }\n\n    return null;\n  }\n\n  encodeABI(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit) {\n    return this.relayCallMethod(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit).encodeABI();\n  }\n\n  async getPastEventsForHub(extraTopics, options) {\n    let names = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : GSNContractsDataTypes_1.ActiveManagerEvents;\n    return await this._getPastEventsPaginated(this.relayHubInstance.contract, names, extraTopics, options);\n  }\n\n  async getPastEventsForStakeManager(names, extraTopics, options) {\n    const stakeManager = await this.stakeManagerInstance;\n    return await this._getPastEventsPaginated(stakeManager.contract, names, extraTopics, options);\n  }\n\n  async getPastEventsForPenalizer(names, extraTopics, options) {\n    return await this._getPastEventsPaginated(this.penalizerInstance.contract, names, extraTopics, options);\n  }\n\n  async getPastEventsForVersionRegistry(names, extraTopics, options) {\n    return await this._getPastEventsPaginated(this.versionRegistry.contract, names, extraTopics, options);\n  }\n\n  getLogsPagesForRange() {\n    let fromBlock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let toBlock = arguments.length > 1 ? arguments[1] : undefined;\n\n    // save 'getBlockNumber' roundtrip for a known max value\n    if (this.maxPageSize === Number.MAX_SAFE_INTEGER) {\n      return 1;\n    } // noinspection SuspiciousTypeOfGuard - known false positive\n\n\n    if (typeof fromBlock !== 'number' || typeof toBlock !== 'number') {\n      throw new Error(`ContractInteractor:getLogsPagesForRange: [${fromBlock.toString()}..${toBlock === null || toBlock === void 0 ? void 0 : toBlock.toString()}]: only numbers supported when using pagination`);\n    }\n\n    const rangeSize = toBlock - fromBlock + 1;\n    const pagesForRange = Math.max(Math.ceil(rangeSize / this.maxPageSize), 1);\n    return pagesForRange;\n  }\n\n  splitRange(fromBlock, toBlock, parts) {\n    if (parts === 1) {\n      return [{\n        fromBlock,\n        toBlock\n      }];\n    } // noinspection SuspiciousTypeOfGuard - known false positive\n\n\n    if (typeof fromBlock !== 'number' || typeof toBlock !== 'number') {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`ContractInteractor:splitRange: only number supported for block range when using pagination, ${fromBlock} ${toBlock} ${parts}`);\n    }\n\n    const rangeSize = toBlock - fromBlock + 1;\n    const splitSize = Math.ceil(rangeSize / parts);\n    const ret = [];\n\n    for (let b = fromBlock; b <= toBlock; b += splitSize) {\n      ret.push({\n        fromBlock: b,\n        toBlock: Math.min(toBlock, b + splitSize - 1)\n      });\n    }\n\n    return ret;\n  }\n  /**\r\n   * Splits requested range into pages to avoid fetching too many blocks at once.\r\n   * In case 'getLogs' returned with a common error message of \"more than X events\" dynamically decrease page size.\r\n   */\n\n\n  async _getPastEventsPaginated(contract, names, extraTopics, options) {\n    var _a;\n\n    if (options.toBlock == null) {\n      // this is to avoid '!' for TypeScript\n      options.toBlock = 'latest';\n    } // save 'getBlockNumber' roundtrip for a known max value (must match check in getLogsPagesForRange)\n\n\n    if (this.maxPageSize !== Number.MAX_SAFE_INTEGER && options.toBlock === 'latest') {\n      options.toBlock = await this.getBlockNumber();\n    }\n\n    let pagesCurrent = await this.getLogsPagesForRange(options.fromBlock, options.toBlock);\n    const relayEventParts = [];\n\n    while (true) {\n      const rangeParts = await this.splitRange((_a = options.fromBlock) !== null && _a !== void 0 ? _a : 1, options.toBlock, pagesCurrent);\n\n      try {\n        // eslint-disable-next-line\n        for (const {\n          fromBlock,\n          toBlock\n        } of rangeParts) {\n          const pastEvents = await this._getPastEvents(contract, names, extraTopics, Object.assign({}, options, {\n            fromBlock,\n            toBlock\n          }));\n          relayEventParts.push(pastEvents);\n        }\n\n        break;\n      } catch (e) {\n        // dynamically adjust query size fo some RPC providers\n        if (e.toString().match(/query returned more than/) != null) {\n          this.logger.warn('Received \"query returned more than X events\" error from server, will try to split the request into smaller chunks');\n\n          if (pagesCurrent > 16) {\n            throw new Error(`Too many events after splitting by ${pagesCurrent}`);\n          }\n\n          pagesCurrent *= 4;\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    return relayEventParts.flat();\n  }\n\n  async _getPastEvents(contract, names, extraTopics, options) {\n    const topics = [];\n    const eventTopic = Utils_1.event2topic(contract, names);\n    topics.push(eventTopic); // TODO: AFAIK this means only the first parameter of the event is supported\n\n    if (extraTopics.length > 0) {\n      topics.push(extraTopics);\n    }\n\n    return contract.getPastEvents('allEvents', Object.assign({}, options, {\n      topics\n    }));\n  }\n\n  async getBalance(address) {\n    let defaultBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';\n    return await this.web3.eth.getBalance(address, defaultBlock);\n  }\n\n  async getBlockNumber() {\n    return await this.web3.eth.getBlockNumber();\n  }\n\n  async sendSignedTransaction(rawTx) {\n    // noinspection ES6RedundantAwait - PromiEvent makes lint less happy about this line\n    return await this.web3.eth.sendSignedTransaction(rawTx);\n  }\n\n  async estimateGas(gsnTransactionDetails) {\n    return await this.web3.eth.estimateGas(gsnTransactionDetails);\n  } // TODO: cache response for some time to optimize. It doesn't make sense to optimize these requests in calling code.\n\n\n  async getGasPrice() {\n    return await this.web3.eth.getGasPrice();\n  }\n\n  async getTransactionCount(address, defaultBlock) {\n    // @ts-ignore (web3 does not define 'defaultBlock' as optional)\n    return await this.web3.eth.getTransactionCount(address, defaultBlock);\n  }\n\n  async getTransaction(transactionHash) {\n    return await this.web3.eth.getTransaction(transactionHash);\n  }\n\n  async getBlock(blockHashOrBlockNumber) {\n    return await this.web3.eth.getBlock(blockHashOrBlockNumber);\n  }\n\n  validateAddress(address) {\n    let exceptionTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'invalid address:';\n\n    if (!this.web3.utils.isAddress(address)) {\n      throw new Error(exceptionTitle + ' ' + address);\n    }\n  }\n\n  async getCode(address) {\n    return await this.web3.eth.getCode(address);\n  }\n\n  getNetworkId() {\n    if (this.networkId == null) {\n      throw new Error('_init not called');\n    }\n\n    return this.networkId;\n  }\n\n  getNetworkType() {\n    if (this.networkType == null) {\n      throw new Error('_init not called');\n    }\n\n    return this.networkType;\n  }\n\n  async isContractDeployed(address) {\n    const code = await this.web3.eth.getCode(address);\n    return code !== '0x';\n  }\n\n  async getStakeInfo(managerAddress) {\n    const stakeManager = await this.stakeManagerInstance;\n    return await stakeManager.getStakeInfo(managerAddress);\n  }\n  /**\r\n   * Gets balance of an address on the current RelayHub.\r\n   * @param address - can be a Paymaster or a Relay Manger\r\n   */\n\n\n  async hubBalanceOf(address) {\n    return await this.relayHubInstance.balanceOf(address);\n  }\n  /**\r\n   * Gets stake of an address on the current StakeManager.\r\n   * @param address - must be a Relay Manger\r\n   */\n\n\n  async stakeManagerStakeInfo(address) {\n    return await this.stakeManagerInstance.getStakeInfo(address);\n  }\n\n  async isRelayManagerStakedOnHub(relayManager) {\n    return await this.relayHubInstance.isRelayManagerStaked(relayManager);\n  }\n\n  async isRelayManagerStakedOnSM(relayManager, minAmount, minUnstakeDelay) {\n    return await this.stakeManagerInstance.isRelayManagerStaked(relayManager, this.relayHubInstance.address, minAmount, minUnstakeDelay);\n  }\n\n  async initDeployment(deployment) {\n    this.deployment = deployment;\n    await this._initializeContracts();\n  }\n\n  getDeployment() {\n    if (this.deployment == null) {\n      throw new Error('Contracts deployment is not initialized for Contract Interactor!');\n    }\n\n    return this.deployment;\n  }\n\n  async withdrawHubBalanceEstimateGas(amount, destination, managerAddress, gasPrice) {\n    const hub = this.relayHubInstance;\n    const method = hub.contract.methods.withdraw(amount.toString(), destination);\n    const withdrawTxGasLimit = await method.estimateGas({\n      from: managerAddress\n    });\n    const gasCost = web3_utils_1.toBN(withdrawTxGasLimit).mul(web3_utils_1.toBN(gasPrice));\n    return {\n      gasLimit: parseInt(withdrawTxGasLimit),\n      gasCost,\n      method\n    };\n  } // TODO: a way to make a relay hub transaction with a specified nonce without exposing the 'method' abstraction\n\n\n  async getRegisterRelayMethod(baseRelayFee, pctRelayFee, url) {\n    const hub = this.relayHubInstance;\n    return hub.contract.methods.registerRelayServer(baseRelayFee, pctRelayFee, url);\n  }\n\n  async getAddRelayWorkersMethod(workers) {\n    const hub = this.relayHubInstance;\n    return hub.contract.methods.addRelayWorkers(workers);\n  }\n\n  async getSetRelayManagerMethod(owner) {\n    const sm = this.stakeManagerInstance;\n    return sm.contract.methods.setRelayManagerOwner(owner);\n  }\n  /**\r\n   * Web3.js as of 1.2.6 (see web3-core-method::_confirmTransaction) does not allow\r\n   * broadcasting of a transaction without waiting for it to be mined.\r\n   * This method sends the RPC call directly\r\n   * @param signedTransaction - the raw signed transaction to broadcast\r\n   */\n\n\n  async broadcastTransaction(signedTransaction) {\n    return await new Promise((resolve, reject) => {\n      if (this.provider == null) {\n        throw new Error('provider is not set');\n      }\n\n      this.provider.send({\n        jsonrpc: '2.0',\n        method: 'eth_sendRawTransaction',\n        params: [signedTransaction],\n        id: Date.now()\n      }, (e, r) => {\n        if (e != null) {\n          reject(e);\n        } else if (r.error != null) {\n          reject(r.error);\n        } else {\n          resolve(r.result);\n        }\n      });\n    });\n  }\n\n  async hubDepositFor(paymaster, transactionDetails) {\n    return await this.relayHubInstance.depositFor(paymaster, transactionDetails);\n  }\n\n  async resolveDeploymentVersions() {\n    const versionsMap = {};\n\n    if (this.deployment.relayHubAddress != null) {\n      versionsMap[this.deployment.relayHubAddress] = await this.relayHubInstance.versionHub();\n    }\n\n    if (this.deployment.penalizerAddress != null) {\n      versionsMap[this.deployment.penalizerAddress] = await this.penalizerInstance.versionPenalizer();\n    }\n\n    if (this.deployment.stakeManagerAddress != null) {\n      versionsMap[this.deployment.stakeManagerAddress] = await this.stakeManagerInstance.versionSM();\n    }\n\n    return versionsMap;\n  }\n\n  async queryDeploymentBalances() {\n    const balances = {};\n\n    if (this.deployment.relayHubAddress != null) {\n      balances[this.deployment.relayHubAddress] = await this.getBalance(this.deployment.relayHubAddress);\n    }\n\n    if (this.deployment.penalizerAddress != null) {\n      balances[this.deployment.penalizerAddress] = await this.getBalance(this.deployment.penalizerAddress);\n    }\n\n    if (this.deployment.stakeManagerAddress != null) {\n      balances[this.deployment.stakeManagerAddress] = await this.getBalance(this.deployment.stakeManagerAddress);\n    }\n\n    return balances;\n  }\n\n  async _hubStakeManagerAddress() {\n    return await this.relayHubInstance.stakeManager();\n  }\n\n  stakeManagerAddress() {\n    return this.stakeManagerInstance.address;\n  }\n\n  async _hubPenalizerAddress() {\n    return await this.relayHubInstance.penalizer();\n  }\n\n  penalizerAddress() {\n    return this.penalizerInstance.address;\n  }\n\n  async getRegisteredWorkers(managerAddress) {\n    const topics = Utils_1.address2topic(managerAddress);\n    const workersAddedEvents = await this.getPastEventsForHub([topics], {\n      fromBlock: 1\n    }, [GSNContractsDataTypes_1.RelayWorkersAdded]);\n    return workersAddedEvents.map(it => it.returnValues.newRelayWorkers).flat();\n  }\n  /* Version Registry methods */\n\n\n  async addVersionInVersionRegistry(id, version, value, transactionDetails) {\n    await this.versionRegistry.addVersion(id, version, value, transactionDetails);\n  }\n\n  async cancelVersionInVersionRegistry(id, version, cancelReason, transactionDetails) {\n    await this.versionRegistry.cancelVersion(id, version, cancelReason, transactionDetails);\n  }\n\n}\n\nexports.ContractInteractor = ContractInteractor;\n/**\r\n * Ganache does not seem to enforce EIP-155 signature. Buidler does, though.\r\n * This is how {@link Transaction} constructor allows support for custom and private network.\r\n * @param chainId\r\n * @param networkId\r\n * @param chain\r\n * @return {{common: Common}}\r\n */\n\nfunction getRawTxOptions(chainId, networkId, chain) {\n  if (chain == null || chain === 'main' || chain === 'private') {\n    chain = 'mainnet';\n  }\n\n  return {\n    common: ethereumjs_common_1.default.forCustomChain(chain, {\n      chainId,\n      networkId\n    }, 'istanbul')\n  };\n}\n\nexports.getRawTxOptions = getRawTxOptions;","map":{"version":3,"sources":["../src/ContractInteractor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\r\nconst web3_1 = __importDefault(require(\"web3\"));\r\nconst web3_utils_1 = require(\"web3-utils\");\r\nconst web3_eth_abi_1 = __importDefault(require(\"web3-eth-abi\"));\r\nconst IPaymaster_json_1 = __importDefault(require(\"./interfaces/IPaymaster.json\"));\r\nconst IRelayHub_json_1 = __importDefault(require(\"./interfaces/IRelayHub.json\"));\r\nconst IForwarder_json_1 = __importDefault(require(\"./interfaces/IForwarder.json\"));\r\nconst IStakeManager_json_1 = __importDefault(require(\"./interfaces/IStakeManager.json\"));\r\nconst IPenalizer_json_1 = __importDefault(require(\"./interfaces/IPenalizer.json\"));\r\nconst IRelayRecipient_json_1 = __importDefault(require(\"./interfaces/IRelayRecipient.json\"));\r\nconst IVersionRegistry_json_1 = __importDefault(require(\"./interfaces/IVersionRegistry.json\"));\r\nconst VersionsManager_1 = require(\"./VersionsManager\");\r\nconst ErrorReplacerJSON_1 = require(\"./ErrorReplacerJSON\");\r\nconst Utils_1 = require(\"./Utils\");\r\nconst LightTruffleContract_1 = require(\"./LightTruffleContract\");\r\nconst Version_1 = require(\"./Version\");\r\nconst ethereumjs_common_1 = __importDefault(require(\"ethereumjs-common\"));\r\nconst GSNContractsDataTypes_1 = require(\"./types/GSNContractsDataTypes\");\r\nclass ContractInteractor {\r\n    constructor({ maxPageSize, provider, versionManager, logger, deployment = {} }) {\r\n        this.maxPageSize = maxPageSize;\r\n        this.logger = logger;\r\n        this.versionManager = versionManager !== null && versionManager !== void 0 ? versionManager : new VersionsManager_1.VersionsManager(Version_1.gsnRuntimeVersion, Version_1.gsnRequiredVersion);\r\n        this.web3 = new web3_1.default(provider);\r\n        this.deployment = deployment;\r\n        this.provider = provider;\r\n        // @ts-ignore\r\n        this.IPaymasterContract = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IPaymaster',\r\n            abi: IPaymaster_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IRelayHubContract = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IRelayHub',\r\n            abi: IRelayHub_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IForwarderContract = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IForwarder',\r\n            abi: IForwarder_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IStakeManager = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IStakeManager',\r\n            abi: IStakeManager_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IPenalizer = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IPenalizer',\r\n            abi: IPenalizer_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IRelayRecipient = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IRelayRecipient',\r\n            abi: IRelayRecipient_json_1.default\r\n        });\r\n        // @ts-ignore\r\n        this.IVersionRegistry = LightTruffleContract_1.TruffleContract({\r\n            contractName: 'IVersionRegistry',\r\n            abi: IVersionRegistry_json_1.default\r\n        });\r\n        this.IStakeManager.setProvider(this.provider, undefined);\r\n        this.IRelayHubContract.setProvider(this.provider, undefined);\r\n        this.IPaymasterContract.setProvider(this.provider, undefined);\r\n        this.IForwarderContract.setProvider(this.provider, undefined);\r\n        this.IPenalizer.setProvider(this.provider, undefined);\r\n        this.IRelayRecipient.setProvider(this.provider, undefined);\r\n        this.IVersionRegistry.setProvider(this.provider, undefined);\r\n        this.relayCallMethod = this.IRelayHubContract.createContract('').methods.relayCall;\r\n    }\r\n    async init() {\r\n        this.logger.debug('interactor init start');\r\n        if (this.rawTxOptions != null) {\r\n            throw new Error('_init was already called');\r\n        }\r\n        await this._resolveDeployment();\r\n        await this._initializeContracts();\r\n        await this._validateCompatibility();\r\n        const chain = await this.web3.eth.net.getNetworkType();\r\n        this.chainId = await this.web3.eth.getChainId();\r\n        this.networkId = await this.web3.eth.net.getId();\r\n        this.networkType = await this.web3.eth.net.getNetworkType();\r\n        // chain === 'private' means we're on ganache, and ethereumjs-tx.Transaction doesn't support that chain type\r\n        this.rawTxOptions = getRawTxOptions(this.chainId, this.networkId, chain);\r\n        return this;\r\n    }\r\n    async _resolveDeployment() {\r\n        if (this.deployment.paymasterAddress != null && this.deployment.relayHubAddress != null) {\r\n            this.logger.warn('Already resolved!');\r\n            return;\r\n        }\r\n        if (this.deployment.paymasterAddress != null) {\r\n            await this._resolveDeploymentFromPaymaster(this.deployment.paymasterAddress);\r\n        }\r\n        else if (this.deployment.relayHubAddress != null) {\r\n            await this._resolveDeploymentFromRelayHub(this.deployment.relayHubAddress);\r\n        }\r\n        else {\r\n            this.logger.info(`Contract interactor cannot resolve a full deployment from the following input: ${JSON.stringify(this.deployment)}`);\r\n        }\r\n    }\r\n    async _resolveDeploymentFromPaymaster(paymasterAddress) {\r\n        this.paymasterInstance = await this._createPaymaster(paymasterAddress);\r\n        const [relayHubAddress, forwarderAddress, paymasterVersion] = await Promise.all([\r\n            this.paymasterInstance.getHubAddr().catch((e) => { throw new Error(`Not a paymaster contract: ${e.message}`); }),\r\n            this.paymasterInstance.trustedForwarder().catch((e) => { throw new Error(`paymaster has no trustedForwarder(): ${e.message}`); }),\r\n            this.paymasterInstance.versionPaymaster().catch((e) => { throw new Error(`Not a paymaster contract: ${e.message}`); }).then((version) => {\r\n                this._validateVersion(version);\r\n                return version;\r\n            })\r\n        ]);\r\n        this.deployment.relayHubAddress = relayHubAddress;\r\n        this.deployment.forwarderAddress = forwarderAddress;\r\n        this.paymasterVersion = paymasterVersion;\r\n        await this._resolveDeploymentFromRelayHub(relayHubAddress);\r\n    }\r\n    async _resolveDeploymentFromRelayHub(relayHubAddress) {\r\n        this.relayHubInstance = await this._createRelayHub(relayHubAddress);\r\n        const [stakeManagerAddress, penalizerAddress] = await Promise.all([\r\n            this._hubStakeManagerAddress(),\r\n            this._hubPenalizerAddress()\r\n        ]);\r\n        this.deployment.relayHubAddress = relayHubAddress;\r\n        this.deployment.stakeManagerAddress = stakeManagerAddress;\r\n        this.deployment.penalizerAddress = penalizerAddress;\r\n    }\r\n    async _validateCompatibility() {\r\n        if (this.deployment == null || this.relayHubInstance == null) {\r\n            return;\r\n        }\r\n        const hub = this.relayHubInstance;\r\n        const version = await hub.versionHub();\r\n        this._validateVersion(version);\r\n    }\r\n    _validateVersion(version) {\r\n        const versionSatisfied = this.versionManager.isRequiredVersionSatisfied(version);\r\n        if (!versionSatisfied) {\r\n            throw new Error(`Provided Hub version(${version}) does not satisfy the requirement(${this.versionManager.requiredVersionRange})`);\r\n        }\r\n    }\r\n    async _initializeContracts() {\r\n        if (this.relayHubInstance == null && this.deployment.relayHubAddress != null) {\r\n            this.relayHubInstance = await this._createRelayHub(this.deployment.relayHubAddress);\r\n        }\r\n        if (this.paymasterInstance == null && this.deployment.paymasterAddress != null) {\r\n            this.paymasterInstance = await this._createPaymaster(this.deployment.paymasterAddress);\r\n        }\r\n        if (this.deployment.forwarderAddress != null) {\r\n            this.forwarderInstance = await this._createForwarder(this.deployment.forwarderAddress);\r\n        }\r\n        if (this.deployment.stakeManagerAddress != null) {\r\n            this.stakeManagerInstance = await this._createStakeManager(this.deployment.stakeManagerAddress);\r\n        }\r\n        if (this.deployment.penalizerAddress != null) {\r\n            this.penalizerInstance = await this._createPenalizer(this.deployment.penalizerAddress);\r\n        }\r\n        if (this.deployment.versionRegistryAddress != null) {\r\n            this.versionRegistry = await this._createVersionRegistry(this.deployment.versionRegistryAddress);\r\n        }\r\n    }\r\n    // must use these options when creating Transaction object\r\n    getRawTxOptions() {\r\n        if (this.rawTxOptions == null) {\r\n            throw new Error('_init not called');\r\n        }\r\n        return this.rawTxOptions;\r\n    }\r\n    async _createRecipient(address) {\r\n        if (this.relayRecipientInstance != null && this.relayRecipientInstance.address.toLowerCase() === address.toLowerCase()) {\r\n            return this.relayRecipientInstance;\r\n        }\r\n        this.relayRecipientInstance = await this.IRelayRecipient.at(address);\r\n        return this.relayRecipientInstance;\r\n    }\r\n    async _createPaymaster(address) {\r\n        return await this.IPaymasterContract.at(address);\r\n    }\r\n    async _createRelayHub(address) {\r\n        return await this.IRelayHubContract.at(address);\r\n    }\r\n    async _createForwarder(address) {\r\n        return await this.IForwarderContract.at(address);\r\n    }\r\n    async _createStakeManager(address) {\r\n        return await this.IStakeManager.at(address);\r\n    }\r\n    async _createPenalizer(address) {\r\n        return await this.IPenalizer.at(address);\r\n    }\r\n    async _createVersionRegistry(address) {\r\n        return await this.IVersionRegistry.at(address);\r\n    }\r\n    async isTrustedForwarder(recipientAddress, forwarder) {\r\n        const recipient = await this._createRecipient(recipientAddress);\r\n        return await recipient.isTrustedForwarder(forwarder);\r\n    }\r\n    async getSenderNonce(sender, forwarderAddress) {\r\n        const forwarder = await this._createForwarder(forwarderAddress);\r\n        const nonce = await forwarder.getNonce(sender);\r\n        return nonce.toString();\r\n    }\r\n    async _getBlockGasLimit() {\r\n        const latestBlock = await this.web3.eth.getBlock('latest');\r\n        return latestBlock.gasLimit;\r\n    }\r\n    /**\r\n     * make a view call to relayCall(), just like the way it will be called by the relayer.\r\n     * returns:\r\n     * - paymasterAccepted - true if accepted\r\n     * - reverted - true if relayCall was reverted.\r\n     * - returnValue - if either reverted or paymaster NOT accepted, then this is the reason string.\r\n     */\r\n    async validateRelayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, maxViewableGasLimit) {\r\n        var _a;\r\n        const relayHub = this.relayHubInstance;\r\n        try {\r\n            const externalGasLimit = await this.getMaxViewableGasLimit(relayRequest, maxViewableGasLimit);\r\n            const encodedRelayCall = relayHub.contract.methods.relayCall(maxAcceptanceBudget, relayRequest, signature, approvalData, externalGasLimit).encodeABI();\r\n            const res = await new Promise((resolve, reject) => {\r\n                // @ts-ignore\r\n                this.web3.currentProvider.send({\r\n                    jsonrpc: '2.0',\r\n                    id: 1,\r\n                    method: 'eth_call',\r\n                    params: [\r\n                        {\r\n                            from: relayRequest.relayData.relayWorker,\r\n                            to: relayHub.address,\r\n                            gasPrice: web3_utils_1.toHex(relayRequest.relayData.gasPrice),\r\n                            gas: web3_utils_1.toHex(externalGasLimit),\r\n                            data: encodedRelayCall\r\n                        },\r\n                        'latest'\r\n                    ]\r\n                }, (err, res) => {\r\n                    const revertMsg = this._decodeRevertFromResponse(err, res);\r\n                    if (revertMsg != null) {\r\n                        reject(new Error(revertMsg));\r\n                    }\r\n                    if (err !== null) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(res.result);\r\n                    }\r\n                });\r\n            });\r\n            this.logger.debug('relayCall res=' + res);\r\n            // @ts-ignore\r\n            const decoded = web3_eth_abi_1.default.decodeParameters(['bool', 'bytes'], res);\r\n            const paymasterAccepted = decoded[0];\r\n            let returnValue;\r\n            if (paymasterAccepted) {\r\n                returnValue = decoded[1];\r\n            }\r\n            else {\r\n                returnValue = (_a = this._decodeRevertFromResponse({}, { result: decoded[1] })) !== null && _a !== void 0 ? _a : decoded[1];\r\n            }\r\n            return {\r\n                returnValue: returnValue,\r\n                paymasterAccepted: paymasterAccepted,\r\n                reverted: false\r\n            };\r\n        }\r\n        catch (e) {\r\n            const message = e instanceof Error ? e.message : JSON.stringify(e, ErrorReplacerJSON_1.replaceErrors);\r\n            return {\r\n                paymasterAccepted: false,\r\n                reverted: true,\r\n                returnValue: `view call to 'relayCall' reverted in client: ${message}`\r\n            };\r\n        }\r\n    }\r\n    async getMaxViewableGasLimit(relayRequest, maxViewableGasLimit) {\r\n        const blockGasLimit = web3_utils_1.toBN(maxViewableGasLimit !== null && maxViewableGasLimit !== void 0 ? maxViewableGasLimit : await this._getBlockGasLimit());\r\n        const workerBalance = web3_utils_1.toBN(await this.getBalance(relayRequest.relayData.relayWorker));\r\n        const workerGasLimit = workerBalance.div(web3_utils_1.toBN(relayRequest.relayData.gasPrice === '0' ? 1 : relayRequest.relayData.gasPrice));\r\n        return bn_js_1.default.min(blockGasLimit, workerGasLimit);\r\n    }\r\n    /**\r\n     * decode revert from rpc response.\r\n     * called from the callback of the provider \"eth_call\" call.\r\n     * check if response is revert, and extract revert reason from it.\r\n     * support kovan, geth, ganache error formats..\r\n     * @param err - provider err value\r\n     * @param res - provider res value\r\n     */\r\n    // decode revert from rpc response.\r\n    //\r\n    _decodeRevertFromResponse(err, res) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        let matchGanache = (_b = (_a = err === null || err === void 0 ? void 0 : err.data) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toString().match(/: revert(?:ed)? (.*)/);\r\n        if (matchGanache == null) {\r\n            matchGanache = (_d = (_c = res === null || res === void 0 ? void 0 : res.error) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.toString().match(/: revert(?:ed)? (.*)/);\r\n        }\r\n        if (matchGanache != null) {\r\n            return matchGanache[1];\r\n        }\r\n        const m = (_e = err === null || err === void 0 ? void 0 : err.data) === null || _e === void 0 ? void 0 : _e.toString().match(/(0x08c379a0\\S*)/);\r\n        if (m != null) {\r\n            return Utils_1.decodeRevertReason(m[1]);\r\n        }\r\n        const result = (_f = res === null || res === void 0 ? void 0 : res.result) !== null && _f !== void 0 ? _f : '';\r\n        if (result.startsWith('0x08c379a0')) {\r\n            return Utils_1.decodeRevertReason(result);\r\n        }\r\n        return null;\r\n    }\r\n    encodeABI(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit) {\r\n        return this.relayCallMethod(maxAcceptanceBudget, relayRequest, sig, approvalData, externalGasLimit).encodeABI();\r\n    }\r\n    async getPastEventsForHub(extraTopics, options, names = GSNContractsDataTypes_1.ActiveManagerEvents) {\r\n        return await this._getPastEventsPaginated(this.relayHubInstance.contract, names, extraTopics, options);\r\n    }\r\n    async getPastEventsForStakeManager(names, extraTopics, options) {\r\n        const stakeManager = await this.stakeManagerInstance;\r\n        return await this._getPastEventsPaginated(stakeManager.contract, names, extraTopics, options);\r\n    }\r\n    async getPastEventsForPenalizer(names, extraTopics, options) {\r\n        return await this._getPastEventsPaginated(this.penalizerInstance.contract, names, extraTopics, options);\r\n    }\r\n    async getPastEventsForVersionRegistry(names, extraTopics, options) {\r\n        return await this._getPastEventsPaginated(this.versionRegistry.contract, names, extraTopics, options);\r\n    }\r\n    getLogsPagesForRange(fromBlock = 1, toBlock) {\r\n        // save 'getBlockNumber' roundtrip for a known max value\r\n        if (this.maxPageSize === Number.MAX_SAFE_INTEGER) {\r\n            return 1;\r\n        }\r\n        // noinspection SuspiciousTypeOfGuard - known false positive\r\n        if (typeof fromBlock !== 'number' || typeof toBlock !== 'number') {\r\n            throw new Error(`ContractInteractor:getLogsPagesForRange: [${fromBlock.toString()}..${toBlock === null || toBlock === void 0 ? void 0 : toBlock.toString()}]: only numbers supported when using pagination`);\r\n        }\r\n        const rangeSize = toBlock - fromBlock + 1;\r\n        const pagesForRange = Math.max(Math.ceil(rangeSize / this.maxPageSize), 1);\r\n        return pagesForRange;\r\n    }\r\n    splitRange(fromBlock, toBlock, parts) {\r\n        if (parts === 1) {\r\n            return [{ fromBlock, toBlock }];\r\n        }\r\n        // noinspection SuspiciousTypeOfGuard - known false positive\r\n        if (typeof fromBlock !== 'number' || typeof toBlock !== 'number') {\r\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n            throw new Error(`ContractInteractor:splitRange: only number supported for block range when using pagination, ${fromBlock} ${toBlock} ${parts}`);\r\n        }\r\n        const rangeSize = toBlock - fromBlock + 1;\r\n        const splitSize = Math.ceil(rangeSize / parts);\r\n        const ret = [];\r\n        for (let b = fromBlock; b <= toBlock; b += splitSize) {\r\n            ret.push({ fromBlock: b, toBlock: Math.min(toBlock, b + splitSize - 1) });\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * Splits requested range into pages to avoid fetching too many blocks at once.\r\n     * In case 'getLogs' returned with a common error message of \"more than X events\" dynamically decrease page size.\r\n     */\r\n    async _getPastEventsPaginated(contract, names, extraTopics, options) {\r\n        var _a;\r\n        if (options.toBlock == null) {\r\n            // this is to avoid '!' for TypeScript\r\n            options.toBlock = 'latest';\r\n        }\r\n        // save 'getBlockNumber' roundtrip for a known max value (must match check in getLogsPagesForRange)\r\n        if (this.maxPageSize !== Number.MAX_SAFE_INTEGER && options.toBlock === 'latest') {\r\n            options.toBlock = await this.getBlockNumber();\r\n        }\r\n        let pagesCurrent = await this.getLogsPagesForRange(options.fromBlock, options.toBlock);\r\n        const relayEventParts = [];\r\n        while (true) {\r\n            const rangeParts = await this.splitRange((_a = options.fromBlock) !== null && _a !== void 0 ? _a : 1, options.toBlock, pagesCurrent);\r\n            try {\r\n                // eslint-disable-next-line\r\n                for (const { fromBlock, toBlock } of rangeParts) {\r\n                    const pastEvents = await this._getPastEvents(contract, names, extraTopics, Object.assign({}, options, { fromBlock, toBlock }));\r\n                    relayEventParts.push(pastEvents);\r\n                }\r\n                break;\r\n            }\r\n            catch (e) {\r\n                // dynamically adjust query size fo some RPC providers\r\n                if (e.toString().match(/query returned more than/) != null) {\r\n                    this.logger.warn('Received \"query returned more than X events\" error from server, will try to split the request into smaller chunks');\r\n                    if (pagesCurrent > 16) {\r\n                        throw new Error(`Too many events after splitting by ${pagesCurrent}`);\r\n                    }\r\n                    pagesCurrent *= 4;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        return relayEventParts.flat();\r\n    }\r\n    async _getPastEvents(contract, names, extraTopics, options) {\r\n        const topics = [];\r\n        const eventTopic = Utils_1.event2topic(contract, names);\r\n        topics.push(eventTopic);\r\n        // TODO: AFAIK this means only the first parameter of the event is supported\r\n        if (extraTopics.length > 0) {\r\n            topics.push(extraTopics);\r\n        }\r\n        return contract.getPastEvents('allEvents', Object.assign({}, options, { topics }));\r\n    }\r\n    async getBalance(address, defaultBlock = 'latest') {\r\n        return await this.web3.eth.getBalance(address, defaultBlock);\r\n    }\r\n    async getBlockNumber() {\r\n        return await this.web3.eth.getBlockNumber();\r\n    }\r\n    async sendSignedTransaction(rawTx) {\r\n        // noinspection ES6RedundantAwait - PromiEvent makes lint less happy about this line\r\n        return await this.web3.eth.sendSignedTransaction(rawTx);\r\n    }\r\n    async estimateGas(gsnTransactionDetails) {\r\n        return await this.web3.eth.estimateGas(gsnTransactionDetails);\r\n    }\r\n    // TODO: cache response for some time to optimize. It doesn't make sense to optimize these requests in calling code.\r\n    async getGasPrice() {\r\n        return await this.web3.eth.getGasPrice();\r\n    }\r\n    async getTransactionCount(address, defaultBlock) {\r\n        // @ts-ignore (web3 does not define 'defaultBlock' as optional)\r\n        return await this.web3.eth.getTransactionCount(address, defaultBlock);\r\n    }\r\n    async getTransaction(transactionHash) {\r\n        return await this.web3.eth.getTransaction(transactionHash);\r\n    }\r\n    async getBlock(blockHashOrBlockNumber) {\r\n        return await this.web3.eth.getBlock(blockHashOrBlockNumber);\r\n    }\r\n    validateAddress(address, exceptionTitle = 'invalid address:') {\r\n        if (!this.web3.utils.isAddress(address)) {\r\n            throw new Error(exceptionTitle + ' ' + address);\r\n        }\r\n    }\r\n    async getCode(address) {\r\n        return await this.web3.eth.getCode(address);\r\n    }\r\n    getNetworkId() {\r\n        if (this.networkId == null) {\r\n            throw new Error('_init not called');\r\n        }\r\n        return this.networkId;\r\n    }\r\n    getNetworkType() {\r\n        if (this.networkType == null) {\r\n            throw new Error('_init not called');\r\n        }\r\n        return this.networkType;\r\n    }\r\n    async isContractDeployed(address) {\r\n        const code = await this.web3.eth.getCode(address);\r\n        return code !== '0x';\r\n    }\r\n    async getStakeInfo(managerAddress) {\r\n        const stakeManager = await this.stakeManagerInstance;\r\n        return await stakeManager.getStakeInfo(managerAddress);\r\n    }\r\n    /**\r\n     * Gets balance of an address on the current RelayHub.\r\n     * @param address - can be a Paymaster or a Relay Manger\r\n     */\r\n    async hubBalanceOf(address) {\r\n        return await this.relayHubInstance.balanceOf(address);\r\n    }\r\n    /**\r\n     * Gets stake of an address on the current StakeManager.\r\n     * @param address - must be a Relay Manger\r\n     */\r\n    async stakeManagerStakeInfo(address) {\r\n        return await this.stakeManagerInstance.getStakeInfo(address);\r\n    }\r\n    async isRelayManagerStakedOnHub(relayManager) {\r\n        return await this.relayHubInstance.isRelayManagerStaked(relayManager);\r\n    }\r\n    async isRelayManagerStakedOnSM(relayManager, minAmount, minUnstakeDelay) {\r\n        return await this.stakeManagerInstance.isRelayManagerStaked(relayManager, this.relayHubInstance.address, minAmount, minUnstakeDelay);\r\n    }\r\n    async initDeployment(deployment) {\r\n        this.deployment = deployment;\r\n        await this._initializeContracts();\r\n    }\r\n    getDeployment() {\r\n        if (this.deployment == null) {\r\n            throw new Error('Contracts deployment is not initialized for Contract Interactor!');\r\n        }\r\n        return this.deployment;\r\n    }\r\n    async withdrawHubBalanceEstimateGas(amount, destination, managerAddress, gasPrice) {\r\n        const hub = this.relayHubInstance;\r\n        const method = hub.contract.methods.withdraw(amount.toString(), destination);\r\n        const withdrawTxGasLimit = await method.estimateGas({\r\n            from: managerAddress\r\n        });\r\n        const gasCost = web3_utils_1.toBN(withdrawTxGasLimit).mul(web3_utils_1.toBN(gasPrice));\r\n        return {\r\n            gasLimit: parseInt(withdrawTxGasLimit),\r\n            gasCost,\r\n            method\r\n        };\r\n    }\r\n    // TODO: a way to make a relay hub transaction with a specified nonce without exposing the 'method' abstraction\r\n    async getRegisterRelayMethod(baseRelayFee, pctRelayFee, url) {\r\n        const hub = this.relayHubInstance;\r\n        return hub.contract.methods.registerRelayServer(baseRelayFee, pctRelayFee, url);\r\n    }\r\n    async getAddRelayWorkersMethod(workers) {\r\n        const hub = this.relayHubInstance;\r\n        return hub.contract.methods.addRelayWorkers(workers);\r\n    }\r\n    async getSetRelayManagerMethod(owner) {\r\n        const sm = this.stakeManagerInstance;\r\n        return sm.contract.methods.setRelayManagerOwner(owner);\r\n    }\r\n    /**\r\n     * Web3.js as of 1.2.6 (see web3-core-method::_confirmTransaction) does not allow\r\n     * broadcasting of a transaction without waiting for it to be mined.\r\n     * This method sends the RPC call directly\r\n     * @param signedTransaction - the raw signed transaction to broadcast\r\n     */\r\n    async broadcastTransaction(signedTransaction) {\r\n        return await new Promise((resolve, reject) => {\r\n            if (this.provider == null) {\r\n                throw new Error('provider is not set');\r\n            }\r\n            this.provider.send({\r\n                jsonrpc: '2.0',\r\n                method: 'eth_sendRawTransaction',\r\n                params: [\r\n                    signedTransaction\r\n                ],\r\n                id: Date.now()\r\n            }, (e, r) => {\r\n                if (e != null) {\r\n                    reject(e);\r\n                }\r\n                else if (r.error != null) {\r\n                    reject(r.error);\r\n                }\r\n                else {\r\n                    resolve(r.result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async hubDepositFor(paymaster, transactionDetails) {\r\n        return await this.relayHubInstance.depositFor(paymaster, transactionDetails);\r\n    }\r\n    async resolveDeploymentVersions() {\r\n        const versionsMap = {};\r\n        if (this.deployment.relayHubAddress != null) {\r\n            versionsMap[this.deployment.relayHubAddress] = await this.relayHubInstance.versionHub();\r\n        }\r\n        if (this.deployment.penalizerAddress != null) {\r\n            versionsMap[this.deployment.penalizerAddress] = await this.penalizerInstance.versionPenalizer();\r\n        }\r\n        if (this.deployment.stakeManagerAddress != null) {\r\n            versionsMap[this.deployment.stakeManagerAddress] = await this.stakeManagerInstance.versionSM();\r\n        }\r\n        return versionsMap;\r\n    }\r\n    async queryDeploymentBalances() {\r\n        const balances = {};\r\n        if (this.deployment.relayHubAddress != null) {\r\n            balances[this.deployment.relayHubAddress] = await this.getBalance(this.deployment.relayHubAddress);\r\n        }\r\n        if (this.deployment.penalizerAddress != null) {\r\n            balances[this.deployment.penalizerAddress] = await this.getBalance(this.deployment.penalizerAddress);\r\n        }\r\n        if (this.deployment.stakeManagerAddress != null) {\r\n            balances[this.deployment.stakeManagerAddress] = await this.getBalance(this.deployment.stakeManagerAddress);\r\n        }\r\n        return balances;\r\n    }\r\n    async _hubStakeManagerAddress() {\r\n        return await this.relayHubInstance.stakeManager();\r\n    }\r\n    stakeManagerAddress() {\r\n        return this.stakeManagerInstance.address;\r\n    }\r\n    async _hubPenalizerAddress() {\r\n        return await this.relayHubInstance.penalizer();\r\n    }\r\n    penalizerAddress() {\r\n        return this.penalizerInstance.address;\r\n    }\r\n    async getRegisteredWorkers(managerAddress) {\r\n        const topics = Utils_1.address2topic(managerAddress);\r\n        const workersAddedEvents = await this.getPastEventsForHub([topics], { fromBlock: 1 }, [GSNContractsDataTypes_1.RelayWorkersAdded]);\r\n        return workersAddedEvents.map(it => it.returnValues.newRelayWorkers).flat();\r\n    }\r\n    /* Version Registry methods */\r\n    async addVersionInVersionRegistry(id, version, value, transactionDetails) {\r\n        await this.versionRegistry.addVersion(id, version, value, transactionDetails);\r\n    }\r\n    async cancelVersionInVersionRegistry(id, version, cancelReason, transactionDetails) {\r\n        await this.versionRegistry.cancelVersion(id, version, cancelReason, transactionDetails);\r\n    }\r\n}\r\nexports.ContractInteractor = ContractInteractor;\r\n/**\r\n * Ganache does not seem to enforce EIP-155 signature. Buidler does, though.\r\n * This is how {@link Transaction} constructor allows support for custom and private network.\r\n * @param chainId\r\n * @param networkId\r\n * @param chain\r\n * @return {{common: Common}}\r\n */\r\nfunction getRawTxOptions(chainId, networkId, chain) {\r\n    if (chain == null || chain === 'main' || chain === 'private') {\r\n        chain = 'mainnet';\r\n    }\r\n    return {\r\n        common: ethereumjs_common_1.default.forCustomChain(chain, {\r\n            chainId,\r\n            networkId\r\n        }, 'istanbul')\r\n    };\r\n}\r\nexports.getRawTxOptions = getRawTxOptions;\r\n//# sourceMappingURL=ContractInteractor.js.map"]},"metadata":{},"sourceType":"script"}