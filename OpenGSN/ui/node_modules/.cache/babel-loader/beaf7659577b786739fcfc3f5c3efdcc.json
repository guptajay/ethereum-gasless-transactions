{"ast":null,"code":"var colorspace = require('colorspace');\n/**\r\n * Prefix the messages with a colored namespace.\r\n *\r\n * @param {Array} messages The messages array that is getting written.\r\n * @param {Object} options Options for diagnostics.\r\n * @returns {Array} Altered messages array.\r\n * @public\r\n */\n\n\nmodule.exports = function colorNamespace(args, options) {\n  var namespace = options.namespace;\n\n  if (options.colors === false) {\n    args[0] = namespace + ': ' + args[0];\n    return args;\n  }\n\n  var color = colorspace(namespace); //\n  // The console API supports a special %c formatter in browsers. This is used\n  // to style console messages with any CSS styling, in our case we want to\n  // use colorize the namespace for clarity. As these are formatters, and\n  // we need to inject our CSS string as second messages argument so it\n  // gets picked up correctly.\n  //\n\n  args[0] = '%c' + namespace + ':%c ' + args[0];\n  args.splice(1, 0, 'color:' + color, 'color:inherit');\n  return args;\n};","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/@dabh/diagnostics/modifiers/namespace.js"],"names":["colorspace","require","module","exports","colorNamespace","args","options","namespace","colors","color","splice"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AACtD,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;;AAEA,MAAID,OAAO,CAACE,MAAR,KAAmB,KAAvB,EAA8B;AAC5BH,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,SAAS,GAAE,IAAX,GAAiBF,IAAI,CAAC,CAAD,CAA/B;AACA,WAAOA,IAAP;AACD;;AAED,MAAII,KAAK,GAAGT,UAAU,CAACO,SAAD,CAAtB,CARsD,CAUtD;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,OAAME,SAAN,GAAiB,MAAjB,GAAyBF,IAAI,CAAC,CAAD,CAAvC;AACAA,EAAAA,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,WAAUD,KAA5B,EAAmC,eAAnC;AAEA,SAAOJ,IAAP;AACD,CArBD","sourcesContent":["var colorspace = require('colorspace');\r\n\r\n/**\r\n * Prefix the messages with a colored namespace.\r\n *\r\n * @param {Array} messages The messages array that is getting written.\r\n * @param {Object} options Options for diagnostics.\r\n * @returns {Array} Altered messages array.\r\n * @public\r\n */\r\nmodule.exports = function colorNamespace(args, options) {\r\n  var namespace = options.namespace;\r\n\r\n  if (options.colors === false) {\r\n    args[0] = namespace +': '+ args[0];\r\n    return args;\r\n  }\r\n\r\n  var color = colorspace(namespace);\r\n\r\n  //\r\n  // The console API supports a special %c formatter in browsers. This is used\r\n  // to style console messages with any CSS styling, in our case we want to\r\n  // use colorize the namespace for clarity. As these are formatters, and\r\n  // we need to inject our CSS string as second messages argument so it\r\n  // gets picked up correctly.\r\n  //\r\n  args[0] = '%c'+ namespace +':%c '+ args[0];\r\n  args.splice(1, 0, 'color:'+ color, 'color:inherit');\r\n\r\n  return args;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}