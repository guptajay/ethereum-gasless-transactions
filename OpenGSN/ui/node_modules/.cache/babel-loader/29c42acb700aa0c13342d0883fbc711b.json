{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst eth_sig_util_1 = require(\"eth-sig-util\");\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst EIP712DomainType = [{\n  name: 'name',\n  type: 'string'\n}, {\n  name: 'version',\n  type: 'string'\n}, {\n  name: 'chainId',\n  type: 'uint256'\n}, {\n  name: 'verifyingContract',\n  type: 'address'\n}];\nconst RelayDataType = [{\n  name: 'gasPrice',\n  type: 'uint256'\n}, {\n  name: 'pctRelayFee',\n  type: 'uint256'\n}, {\n  name: 'baseRelayFee',\n  type: 'uint256'\n}, {\n  name: 'relayWorker',\n  type: 'address'\n}, {\n  name: 'paymaster',\n  type: 'address'\n}, {\n  name: 'forwarder',\n  type: 'address'\n}, {\n  name: 'paymasterData',\n  type: 'bytes'\n}, {\n  name: 'clientId',\n  type: 'uint256'\n}];\nconst ForwardRequestType = [{\n  name: 'from',\n  type: 'address'\n}, {\n  name: 'to',\n  type: 'address'\n}, {\n  name: 'value',\n  type: 'uint256'\n}, {\n  name: 'gas',\n  type: 'uint256'\n}, {\n  name: 'nonce',\n  type: 'uint256'\n}, {\n  name: 'data',\n  type: 'bytes'\n}, {\n  name: 'validUntil',\n  type: 'uint256'\n}];\nconst RelayRequestType = [...ForwardRequestType, {\n  name: 'relayData',\n  type: 'RelayData'\n}]; // use these values in registerDomainSeparator\n\nexports.GsnDomainSeparatorType = {\n  prefix: 'string name,string version',\n  name: 'GSN Relayed Transaction',\n  version: '2'\n};\n\nfunction getDomainSeparator(verifier, chainId) {\n  return {\n    name: exports.GsnDomainSeparatorType.name,\n    version: exports.GsnDomainSeparatorType.version,\n    chainId: chainId,\n    verifyingContract: verifier\n  };\n}\n\nexports.getDomainSeparator = getDomainSeparator;\n\nfunction getDomainSeparatorHash(verifier, chainId) {\n  return ethereumjs_util_1.bufferToHex(eth_sig_util_1.TypedDataUtils.hashStruct('EIP712Domain', getDomainSeparator(verifier, chainId), {\n    EIP712Domain: EIP712DomainType\n  }));\n}\n\nexports.getDomainSeparatorHash = getDomainSeparatorHash;\n\nclass TypedRequestData {\n  constructor(chainId, verifier, relayRequest) {\n    this.types = {\n      EIP712Domain: EIP712DomainType,\n      RelayRequest: RelayRequestType,\n      RelayData: RelayDataType\n    };\n    this.domain = getDomainSeparator(verifier, chainId);\n    this.primaryType = 'RelayRequest'; // in the signature, all \"request\" fields are flattened out at the top structure.\n    // other params are inside \"relayData\" sub-type\n\n    this.message = Object.assign(Object.assign({}, relayRequest.request), {\n      relayData: relayRequest.relayData\n    });\n  }\n\n}\n\nexports.TypedRequestData = TypedRequestData;\nexports.GsnRequestType = {\n  typeName: 'RelayRequest',\n  typeSuffix: 'RelayData relayData)RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)'\n};","map":{"version":3,"sources":["../../src/EIP712/TypedRequestData.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst eth_sig_util_1 = require(\"eth-sig-util\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst EIP712DomainType = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\nconst RelayDataType = [\n    { name: 'gasPrice', type: 'uint256' },\n    { name: 'pctRelayFee', type: 'uint256' },\n    { name: 'baseRelayFee', type: 'uint256' },\n    { name: 'relayWorker', type: 'address' },\n    { name: 'paymaster', type: 'address' },\n    { name: 'forwarder', type: 'address' },\n    { name: 'paymasterData', type: 'bytes' },\n    { name: 'clientId', type: 'uint256' }\n];\nconst ForwardRequestType = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntil', type: 'uint256' }\n];\nconst RelayRequestType = [\n    ...ForwardRequestType,\n    { name: 'relayData', type: 'RelayData' }\n];\n// use these values in registerDomainSeparator\nexports.GsnDomainSeparatorType = {\n    prefix: 'string name,string version',\n    name: 'GSN Relayed Transaction',\n    version: '2'\n};\nfunction getDomainSeparator(verifier, chainId) {\n    return {\n        name: exports.GsnDomainSeparatorType.name,\n        version: exports.GsnDomainSeparatorType.version,\n        chainId: chainId,\n        verifyingContract: verifier\n    };\n}\nexports.getDomainSeparator = getDomainSeparator;\nfunction getDomainSeparatorHash(verifier, chainId) {\n    return ethereumjs_util_1.bufferToHex(eth_sig_util_1.TypedDataUtils.hashStruct('EIP712Domain', getDomainSeparator(verifier, chainId), { EIP712Domain: EIP712DomainType }));\n}\nexports.getDomainSeparatorHash = getDomainSeparatorHash;\nclass TypedRequestData {\n    constructor(chainId, verifier, relayRequest) {\n        this.types = {\n            EIP712Domain: EIP712DomainType,\n            RelayRequest: RelayRequestType,\n            RelayData: RelayDataType\n        };\n        this.domain = getDomainSeparator(verifier, chainId);\n        this.primaryType = 'RelayRequest';\n        // in the signature, all \"request\" fields are flattened out at the top structure.\n        // other params are inside \"relayData\" sub-type\n        this.message = Object.assign(Object.assign({}, relayRequest.request), { relayData: relayRequest.relayData });\n    }\n}\nexports.TypedRequestData = TypedRequestData;\nexports.GsnRequestType = {\n    typeName: 'RelayRequest',\n    typeSuffix: 'RelayData relayData)RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)'\n};\n//# sourceMappingURL=TypedRequestData.js.map"]},"metadata":{},"sourceType":"script"}