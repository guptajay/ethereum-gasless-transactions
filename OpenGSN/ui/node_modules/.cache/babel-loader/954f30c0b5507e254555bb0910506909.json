{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _withoutIndex = require('./internal/withoutIndex');\n\nvar _withoutIndex2 = _interopRequireDefault(_withoutIndex);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n * The `iteratee` is called with an item from the list, and a callback for when\r\n * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n * main `callback` (for the `each` function) is immediately called with the\r\n * error.\r\n *\r\n * Note, that since this function applies `iteratee` to each item in parallel,\r\n * there is no guarantee that the iteratee functions will complete in order.\r\n *\r\n * @name each\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEach\r\n * @category Collection\r\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to\r\n * each item in `coll`. Invoked with (item, callback).\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOf`.\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @returns {Promise} a promise, if a callback is omitted\r\n * @example\r\n *\r\n * // assuming openFiles is an array of file names and saveFile is a function\r\n * // to save the modified contents of that file:\r\n *\r\n * async.each(openFiles, saveFile, function(err){\r\n *   // if any of the saves produced an error, err would equal that error\r\n * });\r\n *\r\n * // assuming openFiles is an array of file names\r\n * async.each(openFiles, function(file, callback) {\r\n *\r\n *     // Perform operation on file here.\r\n *     console.log('Processing file ' + file);\r\n *\r\n *     if( file.length > 32 ) {\r\n *       console.log('This file name is too long');\r\n *       callback('File name too long');\r\n *     } else {\r\n *       // Do work to process file here\r\n *       console.log('File processed');\r\n *       callback();\r\n *     }\r\n * }, function(err) {\r\n *     // if any of the file processing produced an error, err would equal that error\r\n *     if( err ) {\r\n *       // One of the iterations produced an error.\r\n *       // All processing will now stop.\r\n *       console.log('A file failed to process');\r\n *     } else {\r\n *       console.log('All files have been processed successfully');\r\n *     }\r\n * });\r\n */\n\n\nfunction eachLimit(coll, iteratee, callback) {\n  return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachLimit, 3);\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston/node_modules/async/forEach.js"],"names":["Object","defineProperty","exports","value","_eachOf","require","_eachOf2","_interopRequireDefault","_withoutIndex","_withoutIndex2","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","eachLimit","coll","iteratee","callback","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,IAAII,aAAa,GAAGH,OAAO,CAAC,yBAAD,CAA3B;;AAEA,IAAII,cAAc,GAAGF,sBAAsB,CAACC,aAAD,CAA3C;;AAEA,IAAIE,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIM,WAAW,GAAGJ,sBAAsB,CAACG,UAAD,CAAxC;;AAEA,IAAIE,SAAS,GAAGP,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIQ,UAAU,GAAGN,sBAAsB,CAACK,SAAD,CAAvC;;AAEA,SAASL,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,QAAnC,EAA6C;AAC3C,SAAO,CAAC,GAAGd,QAAQ,CAACU,OAAb,EAAsBE,IAAtB,EAA4B,CAAC,GAAGT,cAAc,CAACO,OAAnB,EAA4B,CAAC,GAAGL,WAAW,CAACK,OAAhB,EAAyBG,QAAzB,CAA5B,CAA5B,EAA6FC,QAA7F,CAAP;AACD;;AAEDlB,OAAO,CAACc,OAAR,GAAkB,CAAC,GAAGH,UAAU,CAACG,OAAf,EAAwBC,SAAxB,EAAmC,CAAnC,CAAlB;AACAI,MAAM,CAACnB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _eachOf = require('./eachOf');\r\n\r\nvar _eachOf2 = _interopRequireDefault(_eachOf);\r\n\r\nvar _withoutIndex = require('./internal/withoutIndex');\r\n\r\nvar _withoutIndex2 = _interopRequireDefault(_withoutIndex);\r\n\r\nvar _wrapAsync = require('./internal/wrapAsync');\r\n\r\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\r\n\r\nvar _awaitify = require('./internal/awaitify');\r\n\r\nvar _awaitify2 = _interopRequireDefault(_awaitify);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n * The `iteratee` is called with an item from the list, and a callback for when\r\n * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n * main `callback` (for the `each` function) is immediately called with the\r\n * error.\r\n *\r\n * Note, that since this function applies `iteratee` to each item in parallel,\r\n * there is no guarantee that the iteratee functions will complete in order.\r\n *\r\n * @name each\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEach\r\n * @category Collection\r\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to\r\n * each item in `coll`. Invoked with (item, callback).\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOf`.\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @returns {Promise} a promise, if a callback is omitted\r\n * @example\r\n *\r\n * // assuming openFiles is an array of file names and saveFile is a function\r\n * // to save the modified contents of that file:\r\n *\r\n * async.each(openFiles, saveFile, function(err){\r\n *   // if any of the saves produced an error, err would equal that error\r\n * });\r\n *\r\n * // assuming openFiles is an array of file names\r\n * async.each(openFiles, function(file, callback) {\r\n *\r\n *     // Perform operation on file here.\r\n *     console.log('Processing file ' + file);\r\n *\r\n *     if( file.length > 32 ) {\r\n *       console.log('This file name is too long');\r\n *       callback('File name too long');\r\n *     } else {\r\n *       // Do work to process file here\r\n *       console.log('File processed');\r\n *       callback();\r\n *     }\r\n * }, function(err) {\r\n *     // if any of the file processing produced an error, err would equal that error\r\n *     if( err ) {\r\n *       // One of the iterations produced an error.\r\n *       // All processing will now stop.\r\n *       console.log('A file failed to process');\r\n *     } else {\r\n *       console.log('All files have been processed successfully');\r\n *     }\r\n * });\r\n */\r\nfunction eachLimit(coll, iteratee, callback) {\r\n  return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);\r\n}\r\n\r\nexports.default = (0, _awaitify2.default)(eachLimit, 3);\r\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}