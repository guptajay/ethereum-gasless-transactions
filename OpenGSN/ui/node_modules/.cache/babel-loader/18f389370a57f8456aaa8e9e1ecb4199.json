{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst winston_1 = __importDefault(require(\"winston\"));\n\nconst Version_1 = require(\"@opengsn/common/dist/Version\");\n\nconst format = winston_1.default.format.combine(winston_1.default.format.uncolorize(), winston_1.default.format.timestamp(), winston_1.default.format.simple());\nconst service = 'gsn-client';\nconst userIdKey = 'gsnuser';\nconst isBrowser = typeof window !== 'undefined';\n\nfunction getOrCreateUserId() {\n  let userId = window.localStorage[userIdKey];\n\n  if (userId == null) {\n    userId = `${userIdKey}${Date.now() % 1000000}`;\n    window.localStorage[userIdKey] = userId;\n  }\n\n  return userId;\n}\n\nfunction createClientLogger(loggerConfiguration) {\n  var _a;\n\n  loggerConfiguration = loggerConfiguration !== null && loggerConfiguration !== void 0 ? loggerConfiguration : {\n    logLevel: 'info'\n  };\n\n  if (loggerConfiguration.loggerUrl == null || typeof window === 'undefined' || window.localStorage == null) {\n    loglevel_1.default.setLevel(loggerConfiguration.logLevel);\n    return loglevel_1.default;\n  }\n\n  const url = new URL(loggerConfiguration.loggerUrl);\n  const host = url.host;\n  const path = url.pathname;\n  const ssl = url.protocol === 'https:';\n  const headers = {\n    'content-type': 'text/plain'\n  };\n  const httpTransportOptions = {\n    ssl,\n    format,\n    host,\n    path,\n    headers\n  };\n  const transports = [new winston_1.default.transports.Console({\n    format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())\n  }), new winston_1.default.transports.Http(httpTransportOptions)];\n  let userId;\n\n  if (loggerConfiguration.userId != null) {\n    userId = loggerConfiguration.userId;\n  } else {\n    userId = getOrCreateUserId();\n  }\n\n  const localhostRegExp = /http:\\/\\/(localhost)|\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/;\n  let applicationId = loggerConfiguration.applicationId;\n\n  if (loggerConfiguration.applicationId == null && ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href) != null && window.location.href.match(localhostRegExp) == null) {\n    applicationId = window.location.href;\n  }\n\n  const logger = winston_1.default.createLogger({\n    level: loggerConfiguration.logLevel,\n    defaultMeta: {\n      version: Version_1.gsnRuntimeVersion,\n      service,\n      isBrowser,\n      applicationId,\n      userId\n    },\n    transports\n  });\n  logger.debug(`Created remote logs collecting logger for userId: ${userId} and applicationId: ${applicationId}`);\n\n  if (applicationId == null) {\n    logger.warn('application ID is not set!');\n  }\n\n  return logger;\n}\n\nexports.createClientLogger = createClientLogger;","map":{"version":3,"sources":["../src/ClientWinstonLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\r\nconst winston_1 = __importDefault(require(\"winston\"));\r\nconst Version_1 = require(\"@opengsn/common/dist/Version\");\r\nconst format = winston_1.default.format.combine(winston_1.default.format.uncolorize(), winston_1.default.format.timestamp(), winston_1.default.format.simple());\r\nconst service = 'gsn-client';\r\nconst userIdKey = 'gsnuser';\r\nconst isBrowser = typeof window !== 'undefined';\r\nfunction getOrCreateUserId() {\r\n    let userId = window.localStorage[userIdKey];\r\n    if (userId == null) {\r\n        userId = `${userIdKey}${Date.now() % 1000000}`;\r\n        window.localStorage[userIdKey] = userId;\r\n    }\r\n    return userId;\r\n}\r\nfunction createClientLogger(loggerConfiguration) {\r\n    var _a;\r\n    loggerConfiguration = loggerConfiguration !== null && loggerConfiguration !== void 0 ? loggerConfiguration : { logLevel: 'info' };\r\n    if (loggerConfiguration.loggerUrl == null || typeof window === 'undefined' || window.localStorage == null) {\r\n        loglevel_1.default.setLevel(loggerConfiguration.logLevel);\r\n        return loglevel_1.default;\r\n    }\r\n    const url = new URL(loggerConfiguration.loggerUrl);\r\n    const host = url.host;\r\n    const path = url.pathname;\r\n    const ssl = url.protocol === 'https:';\r\n    const headers = { 'content-type': 'text/plain' };\r\n    const httpTransportOptions = {\r\n        ssl,\r\n        format,\r\n        host,\r\n        path,\r\n        headers\r\n    };\r\n    const transports = [\r\n        new winston_1.default.transports.Console({\r\n            format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())\r\n        }),\r\n        new winston_1.default.transports.Http(httpTransportOptions)\r\n    ];\r\n    let userId;\r\n    if (loggerConfiguration.userId != null) {\r\n        userId = loggerConfiguration.userId;\r\n    }\r\n    else {\r\n        userId = getOrCreateUserId();\r\n    }\r\n    const localhostRegExp = /http:\\/\\/(localhost)|\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/;\r\n    let applicationId = loggerConfiguration.applicationId;\r\n    if (loggerConfiguration.applicationId == null && ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href) != null && window.location.href.match(localhostRegExp) == null) {\r\n        applicationId = window.location.href;\r\n    }\r\n    const logger = winston_1.default.createLogger({\r\n        level: loggerConfiguration.logLevel,\r\n        defaultMeta: {\r\n            version: Version_1.gsnRuntimeVersion,\r\n            service,\r\n            isBrowser,\r\n            applicationId,\r\n            userId\r\n        },\r\n        transports\r\n    });\r\n    logger.debug(`Created remote logs collecting logger for userId: ${userId} and applicationId: ${applicationId}`);\r\n    if (applicationId == null) {\r\n        logger.warn('application ID is not set!');\r\n    }\r\n    return logger;\r\n}\r\nexports.createClientLogger = createClientLogger;\r\n//# sourceMappingURL=ClientWinstonLogger.js.map"]},"metadata":{},"sourceType":"script"}