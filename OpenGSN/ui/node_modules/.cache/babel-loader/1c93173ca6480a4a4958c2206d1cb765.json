{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\nexport function looseArrayify(hexString) {\n  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n    hexString = '0x' + hexString;\n  }\n\n  return arrayify(hexString);\n}\nexport function zpad(value, length) {\n  value = String(value);\n\n  while (value.length < length) {\n    value = '0' + value;\n  }\n\n  return value;\n}\nexport function getPassword(password) {\n  if (typeof password === 'string') {\n    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n  }\n\n  return arrayify(password);\n}\nexport function searchPath(object, path) {\n  let currentChild = object;\n  const comps = path.toLowerCase().split('/');\n\n  for (let i = 0; i < comps.length; i++) {\n    // Search for a child object with a case-insensitive matching key\n    let matchingChild = null;\n\n    for (const key in currentChild) {\n      if (key.toLowerCase() === comps[i]) {\n        matchingChild = currentChild[key];\n        break;\n      }\n    } // Didn't find one. :'(\n\n\n    if (matchingChild === null) {\n      return null;\n    } // Now check this child...\n\n\n    currentChild = matchingChild;\n  }\n\n  return currentChild;\n} // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n\nexport function uuidV4(randomBytes) {\n  const bytes = arrayify(randomBytes); // Section: 4.1.3:\n  // - time_hi_and_version[12:16] = 0b0100\n\n  bytes[6] = bytes[6] & 0x0f | 0x40; // Section 4.4\n  // - clock_seq_hi_and_reserved[6] = 0b0\n  // - clock_seq_hi_and_reserved[7] = 0b1\n\n  bytes[8] = bytes[8] & 0x3f | 0x80;\n  const value = hexlify(bytes);\n  return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join(\"-\");\n}","map":{"version":3,"sources":["../src.ts/utils.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,EAAqC,OAArC,QAAoD,sBAApD;AACA,SAAS,WAAT,EAAsB,wBAAtB,QAAsD,wBAAtD;AAEA,OAAM,SAAU,aAAV,CAAwB,SAAxB,EAAyC;AAC3C,MAAI,OAAO,SAAP,KAAsB,QAAtB,IAAkC,SAAS,CAAC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,IAApE,EAA0E;AACtE,IAAA,SAAS,GAAG,OAAO,SAAnB;AACH;;AACD,SAAO,QAAQ,CAAC,SAAD,CAAf;AACH;AAED,OAAM,SAAU,IAAV,CAAe,KAAf,EAAuC,MAAvC,EAAqD;AACvD,EAAA,KAAK,GAAG,MAAM,CAAC,KAAD,CAAd;;AACA,SAAO,KAAK,CAAC,MAAN,GAAe,MAAtB,EAA8B;AAAE,IAAA,KAAK,GAAG,MAAM,KAAd;AAAsB;;AACtD,SAAO,KAAP;AACH;AAED,OAAM,SAAU,WAAV,CAAsB,QAAtB,EAA8C;AAChD,MAAI,OAAO,QAAP,KAAqB,QAAzB,EAAmC;AAC/B,WAAO,WAAW,CAAC,QAAD,EAAW,wBAAwB,CAAC,IAApC,CAAlB;AACH;;AACD,SAAO,QAAQ,CAAC,QAAD,CAAf;AACH;AAED,OAAM,SAAU,UAAV,CAAqB,MAArB,EAAkC,IAAlC,EAA8C;AAChD,MAAI,YAAY,GAAG,MAAnB;AAEA,QAAM,KAAK,GAAG,IAAI,CAAC,WAAL,GAAmB,KAAnB,CAAyB,GAAzB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AAEnC;AACA,QAAI,aAAa,GAAG,IAApB;;AACA,SAAK,MAAM,GAAX,IAAkB,YAAlB,EAAgC;AAC3B,UAAI,GAAG,CAAC,WAAJ,OAAsB,KAAK,CAAC,CAAD,CAA/B,EAAoC;AAChC,QAAA,aAAa,GAAG,YAAY,CAAC,GAAD,CAA5B;AACA;AACH;AACL,KATkC,CAWnC;;;AACA,QAAI,aAAa,KAAK,IAAtB,EAA4B;AACxB,aAAO,IAAP;AACH,KAdkC,CAgBnC;;;AACA,IAAA,YAAY,GAAG,aAAf;AACH;;AAED,SAAO,YAAP;AACH,C,CAED;;AACA,OAAM,SAAU,MAAV,CAAiB,WAAjB,EAAuC;AACzC,QAAM,KAAK,GAAG,QAAQ,CAAC,WAAD,CAAtB,CADyC,CAGzC;AACA;;AACA,EAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B,CALyC,CAOzC;AACA;AACA;;AACA,EAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B;AAEA,QAAM,KAAK,GAAG,OAAO,CAAC,KAAD,CAArB;AAEA,SAAO,CACJ,KAAK,CAAC,SAAN,CAAgB,CAAhB,EAAmB,EAAnB,CADI,EAEJ,KAAK,CAAC,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAFI,EAGJ,KAAK,CAAC,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAHI,EAIJ,KAAK,CAAC,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CAJI,EAKJ,KAAK,CAAC,SAAN,CAAgB,EAAhB,EAAoB,EAApB,CALI,EAML,IANK,CAMA,GANA,CAAP;AAOH","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\r\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\r\nexport function looseArrayify(hexString) {\r\n    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\r\n        hexString = '0x' + hexString;\r\n    }\r\n    return arrayify(hexString);\r\n}\r\nexport function zpad(value, length) {\r\n    value = String(value);\r\n    while (value.length < length) {\r\n        value = '0' + value;\r\n    }\r\n    return value;\r\n}\r\nexport function getPassword(password) {\r\n    if (typeof (password) === 'string') {\r\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\r\n    }\r\n    return arrayify(password);\r\n}\r\nexport function searchPath(object, path) {\r\n    let currentChild = object;\r\n    const comps = path.toLowerCase().split('/');\r\n    for (let i = 0; i < comps.length; i++) {\r\n        // Search for a child object with a case-insensitive matching key\r\n        let matchingChild = null;\r\n        for (const key in currentChild) {\r\n            if (key.toLowerCase() === comps[i]) {\r\n                matchingChild = currentChild[key];\r\n                break;\r\n            }\r\n        }\r\n        // Didn't find one. :'(\r\n        if (matchingChild === null) {\r\n            return null;\r\n        }\r\n        // Now check this child...\r\n        currentChild = matchingChild;\r\n    }\r\n    return currentChild;\r\n}\r\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\nexport function uuidV4(randomBytes) {\r\n    const bytes = arrayify(randomBytes);\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n    const value = hexlify(bytes);\r\n    return [\r\n        value.substring(2, 10),\r\n        value.substring(10, 14),\r\n        value.substring(14, 18),\r\n        value.substring(18, 22),\r\n        value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}