{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL;\n\nvar TransportStream = require('./');\n/**\r\n * Constructor function for the LegacyTransportStream. This is an internal\r\n * wrapper `winston >= 3` uses to wrap older transports implementing\r\n * log(level, message, meta).\r\n * @param {Object} options - Options for this TransportStream instance.\r\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\r\n */\n\n\nvar LegacyTransportStream = module.exports = function LegacyTransportStream() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  TransportStream.call(this, options);\n\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions; // Display our deprecation notice.\n\n  this._deprecated(); // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n\n\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n/*\r\n * Inherit from TransportStream using Node.js built-ins\r\n */\n\n\nutil.inherits(LegacyTransportStream, TransportStream);\n/**\r\n * Writes the info object to our transport instance.\r\n * @param {mixed} info - TODO: add param description.\r\n * @param {mixed} enc - TODO: add param description.\r\n * @param {function} callback - TODO: add param description.\r\n * @returns {undefined}\r\n * @private\r\n */\n\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  } // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n\n\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n/**\r\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\r\n * instance after performing any necessary filtering.\r\n * @param {mixed} chunks - TODO: add params description.\r\n * @param {function} callback - TODO: add params description.\r\n * @returns {mixed} - TODO: add returns description.\r\n * @private\r\n */\n\n\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (var i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n/**\r\n * Displays a deprecation notice. Defined as a function so it can be\r\n * overriden in tests.\r\n * @returns {undefined}\r\n */\n\n\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([this.transport.name + ' is a legacy winston transport. Consider upgrading: ', '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'].join('\\n'));\n};\n/**\r\n * Clean up error handling state on the legacy transport associated\r\n * with this instance.\r\n * @returns {undefined}\r\n */\n\n\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston-transport/dist/legacy.js"],"names":["util","require","_require","LEVEL","TransportStream","LegacyTransportStream","module","exports","options","arguments","length","undefined","call","transport","log","Error","level","handleExceptions","_deprecated","transportError","err","emit","__winstonError","bind","on","inherits","prototype","_write","info","enc","callback","silent","exception","levels","message","_nop","_writev","chunks","i","_accept","chunk","console","error","name","join","close","removeListener"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar util = require('util');\r\n\r\nvar _require = require('triple-beam'),\r\n    LEVEL = _require.LEVEL;\r\n\r\nvar TransportStream = require('./');\r\n\r\n/**\r\n * Constructor function for the LegacyTransportStream. This is an internal\r\n * wrapper `winston >= 3` uses to wrap older transports implementing\r\n * log(level, message, meta).\r\n * @param {Object} options - Options for this TransportStream instance.\r\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\r\n */\r\n\r\nvar LegacyTransportStream = module.exports = function LegacyTransportStream() {\r\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n\r\n  TransportStream.call(this, options);\r\n  if (!options.transport || typeof options.transport.log !== 'function') {\r\n    throw new Error('Invalid transport, must be an object with a log method.');\r\n  }\r\n\r\n  this.transport = options.transport;\r\n  this.level = this.level || options.transport.level;\r\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\r\n\r\n  // Display our deprecation notice.\r\n  this._deprecated();\r\n\r\n  // Properly bubble up errors from the transport to the\r\n  // LegacyTransportStream instance, but only once no matter how many times\r\n  // this transport is shared.\r\n  function transportError(err) {\r\n    this.emit('error', err, this.transport);\r\n  }\r\n\r\n  if (!this.transport.__winstonError) {\r\n    this.transport.__winstonError = transportError.bind(this);\r\n    this.transport.on('error', this.transport.__winstonError);\r\n  }\r\n};\r\n\r\n/*\r\n * Inherit from TransportStream using Node.js built-ins\r\n */\r\nutil.inherits(LegacyTransportStream, TransportStream);\r\n\r\n/**\r\n * Writes the info object to our transport instance.\r\n * @param {mixed} info - TODO: add param description.\r\n * @param {mixed} enc - TODO: add param description.\r\n * @param {function} callback - TODO: add param description.\r\n * @returns {undefined}\r\n * @private\r\n */\r\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\r\n  if (this.silent || info.exception === true && !this.handleExceptions) {\r\n    return callback(null);\r\n  }\r\n\r\n  // Remark: This has to be handled in the base transport now because we\r\n  // cannot conditionally write to our pipe targets as stream.\r\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\r\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\r\n  }\r\n\r\n  callback(null);\r\n};\r\n\r\n/**\r\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\r\n * instance after performing any necessary filtering.\r\n * @param {mixed} chunks - TODO: add params description.\r\n * @param {function} callback - TODO: add params description.\r\n * @returns {mixed} - TODO: add returns description.\r\n * @private\r\n */\r\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\r\n  for (var i = 0; i < chunks.length; i++) {\r\n    if (this._accept(chunks[i])) {\r\n      this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);\r\n      chunks[i].callback();\r\n    }\r\n  }\r\n\r\n  return callback(null);\r\n};\r\n\r\n/**\r\n * Displays a deprecation notice. Defined as a function so it can be\r\n * overriden in tests.\r\n * @returns {undefined}\r\n */\r\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\r\n  // eslint-disable-next-line no-console\r\n  console.error([this.transport.name + ' is a legacy winston transport. Consider upgrading: ', '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'].join('\\n'));\r\n};\r\n\r\n/**\r\n * Clean up error handling state on the legacy transport associated\r\n * with this instance.\r\n * @returns {undefined}\r\n */\r\nLegacyTransportStream.prototype.close = function close() {\r\n  if (this.transport.close) {\r\n    this.transport.close();\r\n  }\r\n\r\n  if (this.transport.__winstonError) {\r\n    this.transport.removeListener('error', this.transport.__winstonError);\r\n    this.transport.__winstonError = null;\r\n  }\r\n};"]},"metadata":{},"sourceType":"script"}