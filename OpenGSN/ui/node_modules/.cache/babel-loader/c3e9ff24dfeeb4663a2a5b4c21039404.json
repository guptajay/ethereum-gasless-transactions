{"ast":null,"code":"// const ethers = require('ethers')\n// const { formatEther } = require('ethers/lib/utils')\n// const { RelayProvider } = require('@opengsn/provider')\n// const contractArtifact = require('../build/contracts/TargetContract.json')\n// const noFeePaymasterArtifact = require('../build/contracts/NoFeePaymaster.json')\n// const tokenFeePaymasterArtifact = require('../build/contracts/TokenFeePaymaster.json')\n// const tokenBankArtifact = require('../build/contracts/TokenBank.json')\n// let targetContractNoFeePaymaster\n// let targetContractTokenFeePaymaster\n// let noFeePaymasterContract\n// let tokenFeePaymasterContract\n// let tokenBankContract\n// let contractAddress\n// let artifactNetwork\n// let networkId\n// let TokenFeeprovider\n// let NoFeeprovider\n// async function initNoFeePaymaster() {\n//     if (!window.ethereum) {\n//         throw new Error('provider not found')\n//     }\n//     window.ethereum.on('accountsChanged', () => {\n//         console.log('acct');\n//         window.location.reload()\n//     })\n//     window.ethereum.on('chainChanged', () => {\n//         console.log('chainChained');\n//         window.location.reload()\n//     })\n//     networkId = await window.ethereum.request({ method: 'net_version' })\n//     const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\n//         provider: window.ethereum,\n//         config: {\n//             paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\n//         }\n//     }).init()\n//     NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster)\n//     const noFeeNetwork = await NoFeeprovider.getNetwork()\n//     artifactNetwork = contractArtifact.networks[networkId]\n//     if (!artifactNetwork)\n//         throw new Error('Can\\'t find deployment on network ' + networkId)\n//     contractAddress = artifactNetwork.address\n//     targetContractNoFeePaymaster = new ethers.Contract(\n//         contractAddress, contractArtifact.abi, NoFeeprovider.getSigner())\n//     noFeePaymasterContract = new ethers.Contract(\n//         noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner())\n//     await listenToNoFeeEvents()\n//     return { contractAddress, noFeeNetwork }\n// }\n// async function initTokenFeePaymaster() {\n//     if (!window.ethereum) {\n//         throw new Error('provider not found')\n//     }\n//     window.ethereum.on('accountsChanged', () => {\n//         console.log('acct');\n//         window.location.reload()\n//     })\n//     window.ethereum.on('chainChanged', () => {\n//         console.log('chainChained');\n//         window.location.reload()\n//     })\n//     networkId = await window.ethereum.request({ method: 'net_version' })\n//     const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\n//         provider: window.ethereum,\n//         config: {\n//             paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\n//         }\n//     }).init()\n//     TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster)\n//     const TokenFeeNetwork = await TokenFeeprovider.getNetwork()\n//     artifactNetwork = contractArtifact.networks[networkId]\n//     if (!artifactNetwork)\n//         throw new Error('Can\\'t find deployment on network ' + networkId)\n//     contractAddress = artifactNetwork.address\n//     targetContractTokenFeePaymaster = new ethers.Contract(\n//         contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner())\n//     tokenFeePaymasterContract = new ethers.Contract(\n//         tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner())\n//     await listenToTokenFeeEvents()\n//     return { contractAddress, TokenFeeNetwork }\n// }\n// async function noFeeContractCall() {\n//     await window.ethereum.send('eth_requestAccounts')\n//     let transaction = await targetContractNoFeePaymaster.noCommissionTx()\n//     let hash = transaction.hash\n//     console.log(`Transaction ${hash} sent`)\n//     let receipt = await NoFeeprovider.waitForTransaction(hash)\n//     console.log(`Mined in block: ${receipt.blockNumber}`)\n// }\n// async function tokenFeeContractCall() {\n//     await window.ethereum.send('eth_requestAccounts')\n//     let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx()\n//     let hash = transaction.hash\n//     console.log(`Transaction ${hash} sent`)\n//     let receipt = await TokenFeeprovider.waitForTransaction(hash)\n//     console.log(`Mined in block: ${receipt.blockNumber}`)\n// }\n// let logview\n// function log(message) {\n//     message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>')\n//     if (!logview) {\n//         logview = document.getElementById('logview')\n//     }\n//     logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML\n// }\n// // async function listenToEvents() {\n// //   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n// //     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n// //     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n// //   })\n// //   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n// //     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n// //     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n// //   })\n// // }\n// async function listenToNoFeeEvents() {\n//     targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//         log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//         console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n//     })\n// }\n// async function listenToTokenFeeEvents() {\n//     targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//         log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//         console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n//     })\n// }\n// window.app = {\n//     initNoFeePaymaster,\n//     initTokenFeePaymaster,\n//     noFeeContractCall,\n//     tokenFeeContractCall,\n//     log\n// }","map":{"version":3,"sources":["/Users/jay/Desktop/Blockchain/ethereum-gasless-transactions/OpenGSN/ui/src/ethereum.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const ethers = require('ethers')\n// const { formatEther } = require('ethers/lib/utils')\n// const { RelayProvider } = require('@opengsn/provider')\n\n\n// const contractArtifact = require('../build/contracts/TargetContract.json')\n\n\n// const noFeePaymasterArtifact = require('../build/contracts/NoFeePaymaster.json')\n// const tokenFeePaymasterArtifact = require('../build/contracts/TokenFeePaymaster.json')\n\n// const tokenBankArtifact = require('../build/contracts/TokenBank.json')\n\n// let targetContractNoFeePaymaster\n// let targetContractTokenFeePaymaster\n// let noFeePaymasterContract\n// let tokenFeePaymasterContract\n// let tokenBankContract\n\n// let contractAddress\n\n// let artifactNetwork\n// let networkId\n// let TokenFeeprovider\n// let NoFeeprovider\n\n\n// async function initNoFeePaymaster() {\n\n//     if (!window.ethereum) {\n//         throw new Error('provider not found')\n//     }\n//     window.ethereum.on('accountsChanged', () => {\n//         console.log('acct');\n//         window.location.reload()\n//     })\n//     window.ethereum.on('chainChanged', () => {\n//         console.log('chainChained');\n//         window.location.reload()\n//     })\n\n//     networkId = await window.ethereum.request({ method: 'net_version' })\n\n//     const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\n//         provider: window.ethereum,\n//         config: {\n//             paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\n//         }\n//     }).init()\n\n\n//     NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster)\n\n//     const noFeeNetwork = await NoFeeprovider.getNetwork()\n//     artifactNetwork = contractArtifact.networks[networkId]\n\n\n//     if (!artifactNetwork)\n//         throw new Error('Can\\'t find deployment on network ' + networkId)\n\n//     contractAddress = artifactNetwork.address\n\n\n//     targetContractNoFeePaymaster = new ethers.Contract(\n//         contractAddress, contractArtifact.abi, NoFeeprovider.getSigner())\n\n//     noFeePaymasterContract = new ethers.Contract(\n//         noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner())\n\n\n\n//     await listenToNoFeeEvents()\n//     return { contractAddress, noFeeNetwork }\n// }\n\n// async function initTokenFeePaymaster() {\n\n//     if (!window.ethereum) {\n//         throw new Error('provider not found')\n//     }\n//     window.ethereum.on('accountsChanged', () => {\n//         console.log('acct');\n//         window.location.reload()\n//     })\n//     window.ethereum.on('chainChanged', () => {\n//         console.log('chainChained');\n//         window.location.reload()\n//     })\n\n//     networkId = await window.ethereum.request({ method: 'net_version' })\n\n//     const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\n//         provider: window.ethereum,\n//         config: {\n//             paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\n//         }\n//     }).init()\n\n\n//     TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster)\n\n//     const TokenFeeNetwork = await TokenFeeprovider.getNetwork()\n//     artifactNetwork = contractArtifact.networks[networkId]\n\n\n//     if (!artifactNetwork)\n//         throw new Error('Can\\'t find deployment on network ' + networkId)\n\n//     contractAddress = artifactNetwork.address\n\n\n//     targetContractTokenFeePaymaster = new ethers.Contract(\n//         contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner())\n\n\n//     tokenFeePaymasterContract = new ethers.Contract(\n//         tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner())\n\n//     await listenToTokenFeeEvents()\n//     return { contractAddress, TokenFeeNetwork }\n// }\n\n\n// async function noFeeContractCall() {\n//     await window.ethereum.send('eth_requestAccounts')\n\n//     let transaction = await targetContractNoFeePaymaster.noCommissionTx()\n//     let hash = transaction.hash\n//     console.log(`Transaction ${hash} sent`)\n//     let receipt = await NoFeeprovider.waitForTransaction(hash)\n//     console.log(`Mined in block: ${receipt.blockNumber}`)\n\n// }\n\n\n// async function tokenFeeContractCall() {\n\n//     await window.ethereum.send('eth_requestAccounts')\n\n//     let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx()\n//     let hash = transaction.hash\n//     console.log(`Transaction ${hash} sent`)\n//     let receipt = await TokenFeeprovider.waitForTransaction(hash)\n//     console.log(`Mined in block: ${receipt.blockNumber}`)\n\n\n// }\n\n\n// let logview\n\n// function log(message) {\n//     message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>')\n//     if (!logview) {\n//         logview = document.getElementById('logview')\n//     }\n//     logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML\n// }\n\n\n// // async function listenToEvents() {\n\n// //   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n// //     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n// //     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n// //   })\n\n\n// //   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n// //     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n// //     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\n// //   })\n\n// // }\n\n\n\n// async function listenToNoFeeEvents() {\n//     targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//         log(`No Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//         console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n//     })\n// }\n\n// async function listenToTokenFeeEvents() {\n//     targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\n//         log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\n//         console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\n//     })\n// }\n\n\n\n\n// window.app = {\n//     initNoFeePaymaster,\n//     initTokenFeePaymaster,\n//     noFeeContractCall,\n//     tokenFeeContractCall,\n//     log\n// }"]},"metadata":{},"sourceType":"module"}