{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet anyGlobal = null;\n\ntry {\n  anyGlobal = window;\n\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\n\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"sources":["../src.ts/browser-random.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,QAAyB,sBAAzB;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,IAAI,SAAS,GAAQ,IAArB;;AACA,IAAI;AACA,EAAA,SAAS,GAAI,MAAb;;AACA,MAAI,SAAS,IAAI,IAAjB,EAAuB;AAAE,UAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,CAHD,CAGE,OAAO,KAAP,EAAc;AACZ,MAAI;AACA,IAAA,SAAS,GAAI,MAAb;;AACA,QAAI,SAAS,IAAI,IAAjB,EAAuB;AAAE,YAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,GAHD,CAGE,OAAO,KAAP,EAAc;AACZ,IAAA,SAAS,GAAG,EAAZ;AACH;AACJ;;AAED,IAAI,MAAM,GAAQ,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,QAAhD;;AACA,IAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,eAAvB,EAAwC;AAEpC,EAAA,MAAM,CAAC,IAAP,CAAY,8CAAZ;AAEA,EAAA,MAAM,GAAG;AACL,IAAA,eAAe,EAAE,UAAS,MAAT,EAA2B;AACxC,aAAO,MAAM,CAAC,UAAP,CAAkB,mCAAlB,EAAuD,MAAM,CAAC,MAAP,CAAc,qBAArE,EAA4F;AAC/F,QAAA,SAAS,EAAE;AADoF,OAA5F,CAAP;AAGH;AALI,GAAT;AAOH;;AAED,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAAoC;AACtC,MAAI,MAAM,IAAI,CAAV,IAAe,MAAM,GAAG,IAAxB,IAAiC,MAAM,GAAG,CAA9C,EAAkD;AAC9C,IAAA,MAAM,CAAC,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsD,MAAtD;AACH;;AAED,QAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAf;AACA,EAAA,MAAM,CAAC,eAAP,CAAuB,MAAvB;AACA,SAAO,QAAQ,CAAC,MAAD,CAAf;AACH;AAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nlet anyGlobal = null;\r\ntry {\r\n    anyGlobal = window;\r\n    if (anyGlobal == null) {\r\n        throw new Error(\"try next\");\r\n    }\r\n}\r\ncatch (error) {\r\n    try {\r\n        anyGlobal = global;\r\n        if (anyGlobal == null) {\r\n            throw new Error(\"try next\");\r\n        }\r\n    }\r\n    catch (error) {\r\n        anyGlobal = {};\r\n    }\r\n}\r\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\r\nif (!crypto || !crypto.getRandomValues) {\r\n    logger.warn(\"WARNING: Missing strong random number source\");\r\n    crypto = {\r\n        getRandomValues: function (buffer) {\r\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"crypto.getRandomValues\"\r\n            });\r\n        }\r\n    };\r\n}\r\nexport function randomBytes(length) {\r\n    if (length <= 0 || length > 1024 || (length % 1)) {\r\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\r\n    }\r\n    const result = new Uint8Array(length);\r\n    crypto.getRandomValues(result);\r\n    return arrayify(result);\r\n}\r\n;\r\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"module"}