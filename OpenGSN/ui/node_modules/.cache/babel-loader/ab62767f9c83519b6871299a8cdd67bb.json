{"ast":null,"code":"const {\n  MAX_SAFE_COMPONENT_LENGTH\n} = require('./constants');\n\nconst debug = require('./debug');\n\nexports = module.exports = {}; // The actual regexps go on exports.re\n\nconst re = exports.re = [];\nconst src = exports.src = [];\nconst t = exports.t = {};\nlet R = 0;\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++;\n  debug(index, value);\n  t[name] = index;\n  src[index] = value;\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n}; // The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+'); // ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'); // ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})\\\\.` + `(${src[t.NUMERICIDENTIFIER]})`);\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`); // ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`); // ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`); // ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+'); // ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`); // ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`); // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\n\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);\ncreateToken('GTLT', '((?:<|>)?=?)'); // Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\n\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`); // Coercion.\n// Extract anything that could conceivably be a part of a valid semver\n\ncreateToken('COERCE', `${'(^|[^\\\\d])' + '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\\\d])`);\ncreateToken('COERCERTL', src[t.COERCE], true); // Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\n\ncreateToken('LONETILDE', '(?:~>?)');\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\nexports.tildeTrimReplace = '$1~';\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`); // Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\n\ncreateToken('LONECARET', '(?:\\\\^)');\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\nexports.caretTrimReplace = '$1^';\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`); // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`); // An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\nexports.comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\n\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\\\s*$`);\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s+-\\\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\\\s*$`); // Star ranges basically just allow anything at all.\n\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*'); // >=0.0.0 is like a star\n\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$');\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$');","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/@opengsn/common/node_modules/semver/internal/re.js"],"names":["MAX_SAFE_COMPONENT_LENGTH","require","debug","exports","module","re","src","t","R","createToken","name","value","isGlobal","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace"],"mappings":"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","sourcesContent":["const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\r\nconst debug = require('./debug')\r\nexports = module.exports = {}\r\n\r\n// The actual regexps go on exports.re\r\nconst re = exports.re = []\r\nconst src = exports.src = []\r\nconst t = exports.t = {}\r\nlet R = 0\r\n\r\nconst createToken = (name, value, isGlobal) => {\r\n  const index = R++\r\n  debug(index, value)\r\n  t[name] = index\r\n  src[index] = value\r\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\r\n}\r\n\r\n// The following Regular Expressions can be used for tokenizing,\r\n// validating, and parsing SemVer version strings.\r\n\r\n// ## Numeric Identifier\r\n// A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\r\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\r\n\r\n// ## Non-numeric Identifier\r\n// Zero or more digits, followed by a letter or hyphen, and then zero or\r\n// more letters, digits, or hyphens.\r\n\r\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\r\n\r\n// ## Main Version\r\n// Three dot-separated numeric identifiers.\r\n\r\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\r\n\r\n// ## Pre-release Version Identifier\r\n// A numeric identifier, or a non-numeric identifier.\r\n\r\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\n// ## Pre-release Version\r\n// Hyphen, followed by one or more dot-separated pre-release version\r\n// identifiers.\r\n\r\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\r\n\r\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\r\n\r\n// ## Build Metadata Identifier\r\n// Any combination of digits, letters, or hyphens.\r\n\r\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\r\n\r\n// ## Build Metadata\r\n// Plus sign, followed by one or more period-separated build metadata\r\n// identifiers.\r\n\r\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\r\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\r\n\r\n// ## Full Version String\r\n// A main version, followed optionally by a pre-release version and\r\n// build metadata.\r\n\r\n// Note that the only major, minor, patch, and pre-release sections of\r\n// the version string are capturing groups.  The build metadata is not a\r\n// capturing group, because it should not ever be used in version\r\n// comparison.\r\n\r\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\r\n}${src[t.PRERELEASE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\r\n\r\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n// common in the npm registry.\r\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\r\n}${src[t.PRERELEASELOOSE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\r\n\r\ncreateToken('GTLT', '((?:<|>)?=?)')\r\n\r\n// Something like \"2.*\" or \"1.2.x\".\r\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n// Only the first item is strictly required.\r\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\r\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\r\n\r\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:${src[t.PRERELEASE]})?${\r\n                     src[t.BUILD]}?` +\r\n                   `)?)?`)\r\n\r\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:${src[t.PRERELEASELOOSE]})?${\r\n                          src[t.BUILD]}?` +\r\n                        `)?)?`)\r\n\r\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Coercion.\r\n// Extract anything that could conceivably be a part of a valid semver\r\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\r\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\r\n              `(?:$|[^\\\\d])`)\r\ncreateToken('COERCERTL', src[t.COERCE], true)\r\n\r\n// Tilde ranges.\r\n// Meaning is \"reasonably at or greater than\"\r\ncreateToken('LONETILDE', '(?:~>?)')\r\n\r\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\r\nexports.tildeTrimReplace = '$1~'\r\n\r\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Caret ranges.\r\n// Meaning is \"at least and backwards compatible with\"\r\ncreateToken('LONECARET', '(?:\\\\^)')\r\n\r\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\r\nexports.caretTrimReplace = '$1^'\r\n\r\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\r\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\r\n\r\n// An expression to strip any whitespace between the gtlt and the thing\r\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\r\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\r\nexports.comparatorTrimReplace = '$1$2$3'\r\n\r\n// Something like `1.2.3 - 1.2.4`\r\n// Note that these all use the loose form, because they'll be\r\n// checked against either the strict or loose comparator form\r\n// later.\r\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s+-\\\\s+` +\r\n                   `(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s*$`)\r\n\r\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s+-\\\\s+` +\r\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s*$`)\r\n\r\n// Star ranges basically just allow anything at all.\r\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\r\n// >=0.0.0 is like a star\r\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\r\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\r\n"]},"metadata":{},"sourceType":"script"}