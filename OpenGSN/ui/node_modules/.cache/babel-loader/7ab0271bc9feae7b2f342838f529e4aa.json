{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore\n\nconst ethereumjs_wallet_1 = __importDefault(require(\"ethereumjs-wallet\"));\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst eth_sig_util_1 = __importDefault(require(\"eth-sig-util\"));\n\nconst TypedRequestData_1 = require(\"@opengsn/common/dist/EIP712/TypedRequestData\");\n\nconst Utils_1 = require(\"@opengsn/common/dist/Utils\");\n\nfunction toAddress(privateKey) {\n  const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer.from(Utils_1.removeHexPrefix(privateKey), 'hex')); // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\n  return `0x${wallet.getAddress().toString('hex')}`;\n}\n\nclass AccountManager {\n  constructor(provider, chainId, config) {\n    this.accounts = [];\n    this.web3 = new web3_1.default(provider);\n    this.chainId = chainId;\n    this.config = config;\n  }\n\n  addAccount(privateKey) {\n    // TODO: backwards-compatibility 101 - remove on next version bump\n    // addAccount used to accept AccountKeypair with Buffer in it\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (privateKey.privateKey) {\n      console.error('ERROR: addAccount accepts a private key as a prefixed hex string now!'); // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\n      privateKey = `0x${privateKey.privateKey.toString('hex')}`;\n    }\n\n    const address = toAddress(privateKey);\n    const keypair = {\n      privateKey,\n      address\n    };\n    this.accounts.push(keypair);\n  }\n\n  newAccount() {\n    const a = ethereumjs_wallet_1.default.generate();\n    const privateKey = `0x${a.privKey.toString('hex')}`;\n    this.addAccount(privateKey);\n    const address = toAddress(privateKey);\n    return {\n      privateKey,\n      address\n    };\n  }\n\n  async sign(relayRequest) {\n    let signature;\n    const forwarder = relayRequest.relayData.forwarder;\n    const cloneRequest = Object.assign({}, relayRequest);\n    const signedData = new TypedRequestData_1.TypedRequestData(this.chainId, forwarder, cloneRequest);\n    const keypair = this.accounts.find(account => Utils_1.isSameAddress(account.address, relayRequest.request.from));\n    let rec;\n\n    try {\n      if (keypair != null) {\n        signature = this._signWithControlledKey(keypair.privateKey, signedData);\n      } else {\n        signature = await this._signWithProvider(signedData);\n      } // Sanity check only\n      // @ts-ignore\n\n\n      rec = eth_sig_util_1.default.recoverTypedSignature_v4({\n        // @ts-ignore\n        data: signedData,\n        sig: signature\n      });\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Failed to sign relayed transaction for ${relayRequest.request.from}: ${error}`);\n    }\n\n    if (!Utils_1.isSameAddress(relayRequest.request.from.toLowerCase(), rec)) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Internal RelayClient exception: signature is not correct: sender=${relayRequest.request.from}, recovered=${rec}`);\n    }\n\n    return signature;\n  } // These methods is extracted to\n  // a) allow different implementations in the future, and\n  // b) allow spying on Account Manager in tests\n\n\n  async _signWithProvider(signedData) {\n    var _a, _b;\n\n    return await Utils_1.getEip712Signature(this.web3, signedData, (_a = this.config.methodSuffix) !== null && _a !== void 0 ? _a : '', (_b = this.config.jsonStringifyRequest) !== null && _b !== void 0 ? _b : false);\n  }\n\n  _signWithControlledKey(privateKey, signedData) {\n    // @ts-ignore\n    return eth_sig_util_1.default.signTypedData_v4(Buffer.from(Utils_1.removeHexPrefix(privateKey), 'hex'), {\n      data: signedData\n    });\n  }\n\n  getAccounts() {\n    return this.accounts.map(it => it.address);\n  }\n\n}\n\nexports.AccountManager = AccountManager;","map":{"version":3,"sources":["../src/AccountManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst ethereumjs_wallet_1 = __importDefault(require(\"ethereumjs-wallet\"));\nconst web3_1 = __importDefault(require(\"web3\"));\nconst eth_sig_util_1 = __importDefault(require(\"eth-sig-util\"));\nconst TypedRequestData_1 = require(\"@opengsn/common/dist/EIP712/TypedRequestData\");\nconst Utils_1 = require(\"@opengsn/common/dist/Utils\");\nfunction toAddress(privateKey) {\n    const wallet = ethereumjs_wallet_1.default.fromPrivateKey(Buffer.from(Utils_1.removeHexPrefix(privateKey), 'hex'));\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    return `0x${wallet.getAddress().toString('hex')}`;\n}\nclass AccountManager {\n    constructor(provider, chainId, config) {\n        this.accounts = [];\n        this.web3 = new web3_1.default(provider);\n        this.chainId = chainId;\n        this.config = config;\n    }\n    addAccount(privateKey) {\n        // TODO: backwards-compatibility 101 - remove on next version bump\n        // addAccount used to accept AccountKeypair with Buffer in it\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (privateKey.privateKey) {\n            console.error('ERROR: addAccount accepts a private key as a prefixed hex string now!');\n            // @ts-ignore\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            privateKey = `0x${privateKey.privateKey.toString('hex')}`;\n        }\n        const address = toAddress(privateKey);\n        const keypair = {\n            privateKey,\n            address\n        };\n        this.accounts.push(keypair);\n    }\n    newAccount() {\n        const a = ethereumjs_wallet_1.default.generate();\n        const privateKey = `0x${a.privKey.toString('hex')}`;\n        this.addAccount(privateKey);\n        const address = toAddress(privateKey);\n        return {\n            privateKey,\n            address\n        };\n    }\n    async sign(relayRequest) {\n        let signature;\n        const forwarder = relayRequest.relayData.forwarder;\n        const cloneRequest = Object.assign({}, relayRequest);\n        const signedData = new TypedRequestData_1.TypedRequestData(this.chainId, forwarder, cloneRequest);\n        const keypair = this.accounts.find(account => Utils_1.isSameAddress(account.address, relayRequest.request.from));\n        let rec;\n        try {\n            if (keypair != null) {\n                signature = this._signWithControlledKey(keypair.privateKey, signedData);\n            }\n            else {\n                signature = await this._signWithProvider(signedData);\n            }\n            // Sanity check only\n            // @ts-ignore\n            rec = eth_sig_util_1.default.recoverTypedSignature_v4({\n                // @ts-ignore\n                data: signedData,\n                sig: signature\n            });\n        }\n        catch (error) {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            throw new Error(`Failed to sign relayed transaction for ${relayRequest.request.from}: ${error}`);\n        }\n        if (!Utils_1.isSameAddress(relayRequest.request.from.toLowerCase(), rec)) {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            throw new Error(`Internal RelayClient exception: signature is not correct: sender=${relayRequest.request.from}, recovered=${rec}`);\n        }\n        return signature;\n    }\n    // These methods is extracted to\n    // a) allow different implementations in the future, and\n    // b) allow spying on Account Manager in tests\n    async _signWithProvider(signedData) {\n        var _a, _b;\n        return await Utils_1.getEip712Signature(this.web3, signedData, (_a = this.config.methodSuffix) !== null && _a !== void 0 ? _a : '', (_b = this.config.jsonStringifyRequest) !== null && _b !== void 0 ? _b : false);\n    }\n    _signWithControlledKey(privateKey, signedData) {\n        // @ts-ignore\n        return eth_sig_util_1.default.signTypedData_v4(Buffer.from(Utils_1.removeHexPrefix(privateKey), 'hex'), { data: signedData });\n    }\n    getAccounts() {\n        return this.accounts.map(it => it.address);\n    }\n}\nexports.AccountManager = AccountManager;\n//# sourceMappingURL=AccountManager.js.map"]},"metadata":{},"sourceType":"script"}