{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\n\nvar _parallel2 = require('./internal/parallel');\n\nvar _parallel3 = _interopRequireDefault(_parallel2);\n\nvar _eachOfSeries = require('./eachOfSeries');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Run the functions in the `tasks` collection in series, each one running once\r\n * the previous function has completed. If any functions in the series pass an\r\n * error to its callback, no more functions are run, and `callback` is\r\n * immediately called with the value of the error. Otherwise, `callback`\r\n * receives an array of results when `tasks` have completed.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function, and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n *  results from {@link async.series}.\r\n *\r\n * **Note** that while many implementations preserve the order of object\r\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n * explicitly states that\r\n *\r\n * > The mechanics and order of enumerating the properties is not specified.\r\n *\r\n * So if you rely on the order in which your series of functions are executed,\r\n * and want this to work on all platforms, consider using an array.\r\n *\r\n * @name series\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\r\n * [async functions]{@link AsyncFunction} to run in series.\r\n * Each function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This function gets a results array (or object)\r\n * containing all the result arguments passed to the `task` callbacks. Invoked\r\n * with (err, result).\r\n * @return {Promise} a promise, if no callback is passed\r\n * @example\r\n * async.series([\r\n *     function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // results is now equal to ['one', 'two']\r\n * });\r\n *\r\n * async.series({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback){\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equal to: {one: 1, two: 2}\r\n * });\r\n */\n\n\nfunction series(tasks, callback) {\n  return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/winston/node_modules/async/series.js"],"names":["Object","defineProperty","exports","value","default","series","_parallel2","require","_parallel3","_interopRequireDefault","_eachOfSeries","_eachOfSeries2","obj","__esModule","tasks","callback","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,UAAD,CAAvC;;AAEA,IAAII,aAAa,GAAGH,OAAO,CAAC,gBAAD,CAA3B;;AAEA,IAAII,cAAc,GAAGF,sBAAsB,CAACC,aAAD,CAA3C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAER,IAAAA,OAAO,EAAEQ;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,MAAT,CAAgBS,KAAhB,EAAuBC,QAAvB,EAAiC;AAC/B,SAAO,CAAC,GAAGP,UAAU,CAACJ,OAAf,EAAwBO,cAAc,CAACP,OAAvC,EAAgDU,KAAhD,EAAuDC,QAAvD,CAAP;AACD;;AACDC,MAAM,CAACd,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = series;\r\n\r\nvar _parallel2 = require('./internal/parallel');\r\n\r\nvar _parallel3 = _interopRequireDefault(_parallel2);\r\n\r\nvar _eachOfSeries = require('./eachOfSeries');\r\n\r\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Run the functions in the `tasks` collection in series, each one running once\r\n * the previous function has completed. If any functions in the series pass an\r\n * error to its callback, no more functions are run, and `callback` is\r\n * immediately called with the value of the error. Otherwise, `callback`\r\n * receives an array of results when `tasks` have completed.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function, and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n *  results from {@link async.series}.\r\n *\r\n * **Note** that while many implementations preserve the order of object\r\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n * explicitly states that\r\n *\r\n * > The mechanics and order of enumerating the properties is not specified.\r\n *\r\n * So if you rely on the order in which your series of functions are executed,\r\n * and want this to work on all platforms, consider using an array.\r\n *\r\n * @name series\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\r\n * [async functions]{@link AsyncFunction} to run in series.\r\n * Each function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This function gets a results array (or object)\r\n * containing all the result arguments passed to the `task` callbacks. Invoked\r\n * with (err, result).\r\n * @return {Promise} a promise, if no callback is passed\r\n * @example\r\n * async.series([\r\n *     function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // results is now equal to ['one', 'two']\r\n * });\r\n *\r\n * async.series({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback){\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equal to: {one: 1, two: 2}\r\n * });\r\n */\r\nfunction series(tasks, callback) {\r\n  return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);\r\n}\r\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}