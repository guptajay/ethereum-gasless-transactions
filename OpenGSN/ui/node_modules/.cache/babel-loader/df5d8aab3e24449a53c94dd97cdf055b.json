{"ast":null,"code":"/**\r\n * Contains all configured adapters for the given environment.\r\n *\r\n * @type {Array}\r\n * @public\r\n */\nvar adapters = [];\n/**\r\n * Contains all modifier functions.\r\n *\r\n * @typs {Array}\r\n * @public\r\n */\n\nvar modifiers = [];\n/**\r\n * Our default logger.\r\n *\r\n * @public\r\n */\n\nvar logger = function devnull() {};\n/**\r\n * Register a new adapter that will used to find environments.\r\n *\r\n * @param {Function} adapter A function that will return the possible env.\r\n * @returns {Boolean} Indication of a successful add.\r\n * @public\r\n */\n\n\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n  adapters.push(adapter);\n  return true;\n}\n/**\r\n * Assign a new log method.\r\n *\r\n * @param {Function} custom The log method.\r\n * @public\r\n */\n\n\nfunction set(custom) {\n  logger = custom;\n}\n/**\r\n * Check if the namespace is allowed by any of our adapters.\r\n *\r\n * @param {String} namespace The namespace that needs to be enabled\r\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\r\n * @public\r\n */\n\n\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false; //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n\n  return new Promise(function pinky(resolve) {\n    Promise.all(async.map(function prebind(fn) {\n      return fn(namespace);\n    })).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n/**\r\n * Add a new message modifier to the debugger.\r\n *\r\n * @param {Function} fn Modification function.\r\n * @returns {Boolean} Indication of a successful add.\r\n * @public\r\n */\n\n\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n  modifiers.push(fn);\n  return true;\n}\n/**\r\n * Write data to the supplied logger.\r\n *\r\n * @param {Object} meta Meta information about the log.\r\n * @param {Array} args Arguments for console.log.\r\n * @public\r\n */\n\n\nfunction write() {\n  logger.apply(logger, arguments);\n}\n/**\r\n * Process the message with the modifiers.\r\n *\r\n * @param {Mixed} message The message to be transformed by modifers.\r\n * @returns {String} Transformed message.\r\n * @public\r\n */\n\n\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n/**\r\n * Introduce options to the logger function.\r\n *\r\n * @param {Function} fn Calback function.\r\n * @param {Object} options Properties to introduce on fn.\r\n * @returns {Function} The passed function\r\n * @public\r\n */\n\n\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n/**\r\n * Nope, we're not allowed to write messages.\r\n *\r\n * @returns {Boolean} false\r\n * @public\r\n */\n\n\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n/**\r\n * Yep, we're allowed to write debug messages.\r\n *\r\n * @param {Object} options The options for the process.\r\n * @returns {Function} The function that does the logging.\r\n * @public\r\n */\n\n\nfunction yep(options) {\n  /**\r\n   * The function that receives the actual debug information.\r\n   *\r\n   * @returns {Boolean} indication that we're logging.\r\n   * @public\r\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(diagnostics, options);\n}\n/**\r\n * Simple helper function to introduce various of helper methods to our given\r\n * diagnostics function.\r\n *\r\n * @param {Function} diagnostics The diagnostics function.\r\n * @returns {Function} diagnostics\r\n * @public\r\n */\n\n\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n  return diagnostics;\n};","map":{"version":3,"sources":["C:/Users/nomif/Desktop/Programming/Blockchain/ethereum-gasless-transactions/OpenGSN/node_modules/@dabh/diagnostics/diagnostics.js"],"names":["adapters","modifiers","logger","devnull","use","adapter","indexOf","push","set","custom","enabled","namespace","async","i","length","Promise","pinky","resolve","all","map","prebind","fn","then","resolved","values","some","Boolean","modify","write","apply","arguments","process","message","introduce","options","has","Object","prototype","hasOwnProperty","key","call","nope","diagnopes","yep","diagnostics","args","Array","slice","module","exports","create"],"mappings":"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","sourcesContent":["/**\r\n * Contains all configured adapters for the given environment.\r\n *\r\n * @type {Array}\r\n * @public\r\n */\r\nvar adapters = [];\r\n\r\n/**\r\n * Contains all modifier functions.\r\n *\r\n * @typs {Array}\r\n * @public\r\n */\r\nvar modifiers = [];\r\n\r\n/**\r\n * Our default logger.\r\n *\r\n * @public\r\n */\r\nvar logger = function devnull() {};\r\n\r\n/**\r\n * Register a new adapter that will used to find environments.\r\n *\r\n * @param {Function} adapter A function that will return the possible env.\r\n * @returns {Boolean} Indication of a successful add.\r\n * @public\r\n */\r\nfunction use(adapter) {\r\n  if (~adapters.indexOf(adapter)) return false;\r\n\r\n  adapters.push(adapter);\r\n  return true;\r\n}\r\n\r\n/**\r\n * Assign a new log method.\r\n *\r\n * @param {Function} custom The log method.\r\n * @public\r\n */\r\nfunction set(custom) {\r\n  logger = custom;\r\n}\r\n\r\n/**\r\n * Check if the namespace is allowed by any of our adapters.\r\n *\r\n * @param {String} namespace The namespace that needs to be enabled\r\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\r\n * @public\r\n */\r\nfunction enabled(namespace) {\r\n  var async = [];\r\n\r\n  for (var i = 0; i < adapters.length; i++) {\r\n    if (adapters[i].async) {\r\n      async.push(adapters[i]);\r\n      continue;\r\n    }\r\n\r\n    if (adapters[i](namespace)) return true;\r\n  }\r\n\r\n  if (!async.length) return false;\r\n\r\n  //\r\n  // Now that we know that we Async functions, we know we run in an ES6\r\n  // environment and can use all the API's that they offer, in this case\r\n  // we want to return a Promise so that we can `await` in React-Native\r\n  // for an async adapter.\r\n  //\r\n  return new Promise(function pinky(resolve) {\r\n    Promise.all(\r\n      async.map(function prebind(fn) {\r\n        return fn(namespace);\r\n      })\r\n    ).then(function resolved(values) {\r\n      resolve(values.some(Boolean));\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Add a new message modifier to the debugger.\r\n *\r\n * @param {Function} fn Modification function.\r\n * @returns {Boolean} Indication of a successful add.\r\n * @public\r\n */\r\nfunction modify(fn) {\r\n  if (~modifiers.indexOf(fn)) return false;\r\n\r\n  modifiers.push(fn);\r\n  return true;\r\n}\r\n\r\n/**\r\n * Write data to the supplied logger.\r\n *\r\n * @param {Object} meta Meta information about the log.\r\n * @param {Array} args Arguments for console.log.\r\n * @public\r\n */\r\nfunction write() {\r\n  logger.apply(logger, arguments);\r\n}\r\n\r\n/**\r\n * Process the message with the modifiers.\r\n *\r\n * @param {Mixed} message The message to be transformed by modifers.\r\n * @returns {String} Transformed message.\r\n * @public\r\n */\r\nfunction process(message) {\r\n  for (var i = 0; i < modifiers.length; i++) {\r\n    message = modifiers[i].apply(modifiers[i], arguments);\r\n  }\r\n\r\n  return message;\r\n}\r\n\r\n/**\r\n * Introduce options to the logger function.\r\n *\r\n * @param {Function} fn Calback function.\r\n * @param {Object} options Properties to introduce on fn.\r\n * @returns {Function} The passed function\r\n * @public\r\n */\r\nfunction introduce(fn, options) {\r\n  var has = Object.prototype.hasOwnProperty;\r\n\r\n  for (var key in options) {\r\n    if (has.call(options, key)) {\r\n      fn[key] = options[key];\r\n    }\r\n  }\r\n\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Nope, we're not allowed to write messages.\r\n *\r\n * @returns {Boolean} false\r\n * @public\r\n */\r\nfunction nope(options) {\r\n  options.enabled = false;\r\n  options.modify = modify;\r\n  options.set = set;\r\n  options.use = use;\r\n\r\n  return introduce(function diagnopes() {\r\n    return false;\r\n  }, options);\r\n}\r\n\r\n/**\r\n * Yep, we're allowed to write debug messages.\r\n *\r\n * @param {Object} options The options for the process.\r\n * @returns {Function} The function that does the logging.\r\n * @public\r\n */\r\nfunction yep(options) {\r\n  /**\r\n   * The function that receives the actual debug information.\r\n   *\r\n   * @returns {Boolean} indication that we're logging.\r\n   * @public\r\n   */\r\n  function diagnostics() {\r\n    var args = Array.prototype.slice.call(arguments, 0);\r\n\r\n    write.call(write, options, process(args, options));\r\n    return true;\r\n  }\r\n\r\n  options.enabled = true;\r\n  options.modify = modify;\r\n  options.set = set;\r\n  options.use = use;\r\n\r\n  return introduce(diagnostics, options);\r\n}\r\n\r\n/**\r\n * Simple helper function to introduce various of helper methods to our given\r\n * diagnostics function.\r\n *\r\n * @param {Function} diagnostics The diagnostics function.\r\n * @returns {Function} diagnostics\r\n * @public\r\n */\r\nmodule.exports = function create(diagnostics) {\r\n  diagnostics.introduce = introduce;\r\n  diagnostics.enabled = enabled;\r\n  diagnostics.process = process;\r\n  diagnostics.modify = modify;\r\n  diagnostics.write = write;\r\n  diagnostics.nope = nope;\r\n  diagnostics.yep = yep;\r\n  diagnostics.set = set;\r\n  diagnostics.use = use;\r\n\r\n  return diagnostics;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}