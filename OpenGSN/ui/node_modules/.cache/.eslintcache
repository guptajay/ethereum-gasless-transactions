[{"C:\\Users\\nomif\\Desktop\\Programming\\Blockchain\\ethereum-gasless-transactions\\OpenGSN\\ui\\src\\index.js":"1","C:\\Users\\nomif\\Desktop\\Programming\\Blockchain\\ethereum-gasless-transactions\\OpenGSN\\ui\\src\\ethereum.js":"2"},{"size":27667,"mtime":1638001994305,"results":"3","hashOfConfig":"4"},{"size":6862,"mtime":1637937634028,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"gplci9",{"filePath":"9","messages":"10","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11","usedDeprecatedRules":"12"},"C:\\Users\\nomif\\Desktop\\Programming\\Blockchain\\ethereum-gasless-transactions\\OpenGSN\\ui\\src\\index.js",["13","14","15","16","17"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './ethereum.js'\nimport './index.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './bundle.js'\nimport { Component } from 'react'\nimport { Card, CardGroup, Navbar, Nav, Container, Button, ListGroup, Badge, InputGroup, FormControl, DropdownButton, Dropdown, Spinner } from 'react-bootstrap'\nimport { FaUserTie, FaUserSecret, FaThumbsUp } from \"react-icons/fa\"\nimport { SiEthereum } from \"react-icons/si\"\nimport Web3 from 'web3';\n\nimport relayHubJson from '../../build/contracts/RelayHub.json';\nimport relayHubAddressJson from '../../build/gsn/RelayHub.json';\nimport noFeePaymasterAddressJson from '../../build/contracts/NoFeePaymaster.json';\nimport tokenJson from '../../build/contracts/Token.json';\nimport tokenBankJson from '../../build/contracts/TokenBank.json';\n\n\nclass App extends Component {\n\n    async componentWillMount() {\n        await this.loadBlockchainData(this.props.dispatch)\n    }\n\n    async loadBlockchainData(dispatch) {\n\n        //check if MetaMask exists\n\n        //assign to values to variables: web3, netId, accounts\n\n        //check if account is detected, then load balance&setStates, elsepush alert\n\n        //in try block load contracts\n\n        //if MetaMask not exists push alert\n    }\n\n    async deposit(amount) {\n        //check if this.state.dbank is ok\n        //in try block call dBank deposit();\n    }\n\n    async withdraw(e) {\n        //prevent button from default click\n        //check if this.state.dbank is ok\n        //in try block call dBank withdraw();\n    }\n\n    // getUserETH() {\n    //     //var balance = await web3.eth.getBalance(walletAddress); //Will give value in.\n    //     //balance = await web3.toDecimal(balance);\n    // }\n\n    // getUserTokens() {\n\n    // }\n\n    freePayMaster() {\n        console.log('freePayMaster')\n        window.app.initNoFeePaymaster().then(function ({ contractAddress, network }) {\n            // console.log('CaptureTheFlag contract', contractAddress)\n            // console.log(`identified network: ${JSON.stringify(network)}`)\n            window.app.noFeeContractCall()\n\n        })\n    }\n\n    paidPayMaster() {\n\n        console.log('paidPayMaster')\n\n\n        window.app.initTokenFeePaymaster().then(function ({ contractAddress, network }) {\n            // console.log('CaptureTheFlag contract', contractAddress)\n            // console.log(`identified network: ${JSON.stringify(network)}`)\n            window.app.tokenFeeContractCall()\n        })\n    }\n\n    async buyUserTokens() {\n        console.log('user tokens')\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const netId = await window.ethereum.request({ method: 'net_version' })\n\n        web3.eth.getAccounts().then(async (accounts) => {\n            const tokenBankAddress = await tokenBankJson.networks[netId].address;\n            const tokenBankContract = await new web3.eth.Contract(tokenBankJson.abi, tokenBankAddress)\n\n            var buyTokens = await tokenBankContract.methods.buyTokens().send({ from: accounts[0], value: 20 * 10 ** 18 })\n            console.log(\"Bought tokens successfully\")\n        })\n    }\n\n    async changeAllowanceFreePaymaster() {\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const netId = await window.ethereum.request({ method: 'net_version' })\n        console.log('Netid', netId)\n\n        const tokenAddress = await tokenJson.networks[netId].address\n        const tokenContract = new web3.eth.Contract(tokenJson.abi, tokenAddress);\n        web3.eth.getAccounts().then(async (accounts) => {\n            window.app.getAllAddresses().then(async (addr) => {\n                const increasedAllowance = await tokenContract.methods.increaseAllowance(addr[0], 5).send({ from: accounts[0] });\n                console.log(\"Free Paymaster Allowance Increased\")\n            })\n        })\n    }\n\n    async changeAllowancePaidPaymaster() {\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const netId = await window.ethereum.request({ method: 'net_version' })\n        console.log('Netid', netId)\n\n        const tokenAddress = await tokenJson.networks[netId].address\n        const tokenContract = new web3.eth.Contract(tokenJson.abi, tokenAddress);\n        web3.eth.getAccounts().then(async (accounts) => {\n            window.app.getAllAddresses().then(async (addr) => {\n                const increasedAllowance = await tokenContract.methods.increaseAllowance(addr[1], 5).send({ from: accounts[0] });\n                console.log(\"Paid Paymaster Allowance Increased\")\n            })\n        })\n\n    }\n\n    async getBalance() {\n        const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const netId = await window.ethereum.request({ method: 'net_version' })\n        console.log('Netid', netId)\n\n        const tokenAddress = await tokenJson.networks[netId].address\n        const tokenContract = new web3.eth.Contract(tokenJson.abi, tokenAddress);\n\n        web3.eth.getAccounts().then(async (accounts) => {\n\n\n\n\n            var balanceOfUser = await web3.eth.getBalance(accounts[0]);\n            var etherOfUser = web3.utils.fromWei(balanceOfUser, \"ether\")\n            //etherOfUser = parseFloat(etherOfUser).toFixed(4)\n            this.setState({ etherOfUser: etherOfUser })\n            console.log(\"User Balance: \" + etherOfUser + \" ETH\")\n\n            // User Token Balance\n\n            const tokenBalance = await tokenContract.methods.balanceOf(accounts[0]).call();\n            this.setState({ tokenOfUser: tokenBalance })\n            console.log(\"User Token Balance: \" + tokenBalance + \" tokens\")\n        });\n\n        window.app.getAllAddresses().then(async (addr) => {\n            console.log(\"add:\", addr[0], addr[1], addr[2])\n\n            // Ether Balances\n            // ------------------------------------------------------------)\n\n            const relayHubAddress = await relayHubAddressJson.address\n            console.log('relayHub address', relayHubAddress)\n\n            const RelayHub = await new web3.eth.Contract(relayHubJson.abi, relayHubAddress)\n\n            const nofeePmAddr = noFeePaymasterAddressJson.networks[netId].address\n            let noFeePmBal = await RelayHub.methods.balanceOf(nofeePmAddr).call()\n            console.log('No Fee Paymaster Balance: ', web3.utils.fromWei(noFeePmBal.toString()))\n\n            var balanceOfNoFeePaymaster = await RelayHub.methods.balanceOf(addr[0]).call();\n            var etherOfNoFeePaymaster = web3.utils.fromWei(balanceOfNoFeePaymaster.toString(), \"ether\")\n            this.setState({ etherOfNoFeePaymaster: etherOfNoFeePaymaster })\n            console.log(\"No Fee Paymaster Balance: \" + etherOfNoFeePaymaster + \" ETH\")\n\n            var balanceOfFeePaymaster = await RelayHub.methods.balanceOf(addr[1]).call();\n            var etherOfFeePaymaster = web3.utils.fromWei(balanceOfFeePaymaster.toString(), \"ether\")\n            this.setState({ etherOfFeePaymaster: etherOfFeePaymaster })\n            console.log(\"Fee Paymaster Balance: \" + etherOfFeePaymaster + \" ETH\")\n\n            var balanceOfRecepient = await web3.eth.getBalance(addr[2]);\n            var etherOfRecepient = web3.utils.fromWei(balanceOfRecepient, \"ether\")\n            this.setState({ etherOfRecepient: etherOfRecepient })\n            console.log(\"Recepient Balance: \" + etherOfRecepient + \" ETH\")\n            // ------------------------------------------------------------\n\n            // Token Balances\n            // ------------------------------------------------------------\n            // const tokenAddress = await tokenJson.address\n            // const tokenContract = new web3.eth.Contract(tokenJson.abi, tokenAddress);\n\n            // No Fee Paymaster Token Balance\n            const tokenBalanceOfNoFeePaymaster = await tokenContract.methods.balanceOf(addr[0]).call();\n            this.setState({ tokenOfNoFeePaymaster: tokenBalanceOfNoFeePaymaster })\n            console.log(\"No Fee Paymaster Token Balance: \" + tokenBalanceOfNoFeePaymaster + \" tokens\")\n\n            // Fee Paymaster Token Balance\n            const tokenBalanceOfFeePaymaster = await tokenContract.methods.balanceOf(addr[1]).call();\n            this.setState({ tokenOfFeePaymaster: tokenBalanceOfFeePaymaster })\n            console.log(\"No Fee Paymaster Token Balance: \" + tokenBalanceOfFeePaymaster + \" tokens\")\n\n            // Recepient Token Balance\n            const tokenBalanceOfRecepient = await tokenContract.methods.balanceOf(addr[2]).call();\n            this.setState({ tokenOfRecepient: tokenBalanceOfRecepient })\n            console.log(\"Recepient Token Balance: \" + tokenBalanceOfRecepient + \" tokens\")\n            // ------------------------------------------------------------\n\n            // Paymaster Alowances\n            // ----\n            web3.eth.getAccounts().then(async (accounts) => {\n                const tokenAllowanceFreePaymaster = await tokenContract.methods.allowance(accounts[0], addr[0]).call();\n                this.setState({ freePaymasterAllowance: tokenAllowanceFreePaymaster })\n\n                const tokenAllowancePaidPaymaster = await tokenContract.methods.allowance(accounts[0], addr[1]).call();\n                this.setState({ paidPaymasterAllowance: tokenAllowancePaidPaymaster })\n\n                const tokenBankAddress = await tokenBankJson.networks[netId].address;\n                var tokenBankTokenBalance = await tokenContract.methods.balanceOf(tokenBankAddress).call()\n                this.setState({ tokenBankTokenBalance: tokenBankTokenBalance })\n\n                var tokenBankEtherBalance = await web3.eth.getBalance(tokenBankAddress);\n                tokenBankEtherBalance = web3.utils.fromWei(tokenBankEtherBalance.toString(), \"ether\")\n                this.setState({ tokenBankEtherBalance: tokenBankEtherBalance })\n            })\n            // ----\n\n            // recepient is not hosted on RelayHub (get directly)\n        })\n    }\n\n    async getTokenBalance(walletAddress) {\n        //balance = await contract.methods.balanceOf(walletAddress).call();\n        //console.log(balance)\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            etherOfUser: 0,\n            etherOfNoFeePaymaster: 0,\n            etherOfFeePaymaster: 0,\n            etherOfRecepient: 0,\n            tokenOfUser: 0,\n            tokenOfNoFeePaymaster: 0,\n            tokenOfFeePaymaster: 0,\n            tokenOfRecepient: 0,\n            tokenBankEtherBalance: 0,\n            tokenBankTokenBalance: 0,\n            freePaymasterAllowance: 0,\n            paidPaymasterAllowance: 0\n        }\n        this.getBalance = this.getBalance.bind(this)\n        const Web3 = require(\"web3\");\n\n        const ethEnabled = async () => {\n            if (window.ethereum) {\n                await window.ethereum.send('eth_requestAccounts');\n                window.web3 = new Web3(window.ethereum);\n                return true;\n            }\n            return false;\n        }\n\n        ethEnabled().then(function (result) {\n            const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n            web3.eth.getAccounts().then(function (accounts) {\n                console.log(accounts)\n            });\n        })\n\n    }\n\n    render() {\n        return (\n            <div className='text-monospace'>\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Container>\n                        <Navbar.Brand href=\"#home\">Option 10: BlueJay Gasless Tokens</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\n                            <Nav className=\"me-auto\">\n                            </Nav>\n                            <Nav>\n                                <Nav.Link>Numair Fazili</Nav.Link>\n                                <Nav.Link>Jay Gupta</Nav.Link>\n                                <Nav.Link>Ritwik Kanodia</Nav.Link>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n\n                <Container className='mt-5'>\n                    <CardGroup>\n                        <Card className=\"text-center\">\n                            <div class=\"row mt-5\">\n                                <FaUserTie style={{ color: 'brown', fontSize: '100px' }} />\n                            </div>\n                            <Card.Body>\n                                <Card.Title>User</Card.Title>\n                                <Card.Text>\n                                    Entity that does not require Ether to execute a transaction on the Ethereum Platform.\n                                </Card.Text>\n                                <ListGroup>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ETH (Ether)</div>\n                                        </div>\n                                        <Badge variant=\"primary\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.etherOfUser}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ERC20 (Tokens)</div>\n                                        </div>\n                                        <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.tokenOfUser}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                </ListGroup>\n\n                                <InputGroup className=\"mt-4\">\n                                    <FormControl aria-label=\"Number of Tokens\" placeholder=\"1 Token\" disabled />\n                                    <DropdownButton\n                                        variant=\"success\"\n                                        title=\"Choose and Pay\"\n                                        id=\"typePaymaster\">\n                                        <Dropdown.Item onClick={this.freePayMaster}>Pay with Free Paymaster</Dropdown.Item>\n                                        <Dropdown.Item onClick={this.paidPayMaster}>Pay with Paid Paymaster</Dropdown.Item>\n                                    </DropdownButton>\n                                </InputGroup>\n                            </Card.Body>\n\n                        </Card>\n                        <Card className=\"text-center\">\n                            <div class=\"row mt-5\">\n                                <SiEthereum style={{ color: 'blue', fontSize: '100px' }} />\n                            </div>\n                            <Card.Body>\n                                <Card.Title>Free Paymaster</Card.Title>\n                                <Card.Text>\n                                    Paymaster receives the transactions via the relayer and pays the Gas Fee for the transactions.\n                                </Card.Text>\n\n                                <ListGroup>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ETH (Ether)</div>\n                                        </div>\n                                        <Badge variant=\"primary\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.etherOfNoFeePaymaster}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ERC20 (Tokens)</div>\n                                        </div>\n                                        <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.tokenOfNoFeePaymaster}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card.Body>\n                        </Card>\n                        <Card className=\"text-center\">\n                            <div class=\"row mt-5\">\n                                <SiEthereum style={{ color: 'blue', fontSize: '100px' }} />\n                            </div>\n                            <Card.Body>\n                                <Card.Title>Paid Paymaster</Card.Title>\n                                <Card.Text>\n                                    Paymaster receives the transactions via the relayer and pays the Gas Fee via the tokens supplied by the user.\n                                </Card.Text>\n\n                                <ListGroup>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ETH (Ether)</div>\n                                        </div>\n                                        <Badge variant=\"primary\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.etherOfFeePaymaster}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ERC20 (Tokens)</div>\n                                        </div>\n                                        <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.tokenOfFeePaymaster}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card.Body>\n                        </Card>\n                        <Card className=\"text-center\">\n                            <div class=\"row mt-5\">\n                                <FaUserSecret style={{ fontSize: '100px' }} />\n                            </div>\n                            <Card.Body>\n                                <Card.Title>Recepient</Card.Title>\n                                <Card.Text>\n                                    Entity that receives the transactions that are sent from the user through the relayer.\n                                </Card.Text>\n\n                                <ListGroup>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ETH (Ether)</div>\n                                        </div>\n                                        <Badge variant=\"primary\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.etherOfRecepient}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item\n                                        as=\"li\"\n                                        className=\"d-flex justify-content-between align-items-start\"\n                                    >\n                                        <div className=\"ms-2 me-auto\">\n                                            <div className=\"fw-bold\">ERC20 (Tokens)</div>\n                                        </div>\n                                        <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                            {this.state.tokenOfRecepient}\n                                        </Badge>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card.Body>\n                        </Card>\n                    </CardGroup>\n                </Container>\n\n                <Container className='mt-3'>\n                    <CardGroup>\n                        <Card>\n                            <Card.Header>Token Bank - Buy Tokens</Card.Header>\n                            <Card.Body>\n                                <InputGroup className=\"mt-4\">\n                                    <FormControl aria-label=\"Buy for\" placeholder=\"20 Tokens\"\n                                        disabled />\n                                    <DropdownButton\n                                        variant=\"outline-secondary\"\n                                        title=\"Buy\"\n                                        id=\"input-group-dropdown-3\"\n                                    >\n                                        <Dropdown.Item onClick={this.buyUserTokens}>for User</Dropdown.Item>\n                                    </DropdownButton>\n                                </InputGroup>\n                            </Card.Body>\n                        </Card>\n\n\n                        <Card>\n                            <Card.Header>Token Bank Balances</Card.Header>\n                            <Card.Body>\n\n                                <ListGroup.Item\n                                    as=\"li\"\n                                    className=\"d-flex justify-content-between align-items-start\"\n                                >\n                                    <div className=\"ms-2 me-auto\">\n                                        <div className=\"fw-bold\">Ether Balance</div>\n                                    </div>\n                                    <Badge bg=\"primary\" pill style={{ fontSize: '15px' }}>\n                                        {this.state.tokenBankEtherBalance}\n                                    </Badge>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item\n                                    as=\"li\"\n                                    className=\"d-flex justify-content-between align-items-start\"\n                                >\n                                    <div className=\"ms-2 me-auto\">\n                                        <div className=\"fw-bold\">Token Balance</div>\n                                    </div>\n                                    <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                        {this.state.tokenBankTokenBalance}\n                                    </Badge>\n                                </ListGroup.Item>\n                            </Card.Body>\n                        </Card>\n\n\n                        <Card>\n                            <Card.Header>Paymaster Allowance Manager</Card.Header>\n                            <Card.Body>\n                                <InputGroup className=\"mt-4\">\n                                    <FormControl aria-label=\"\" placeholder=\"5 tokens\"\n                                        disabled />\n                                    <DropdownButton\n                                        variant=\"outline-danger\"\n                                        title=\"Increase allowance\"\n                                        id=\"input-group-dropdown-3\"\n                                    >\n                                        <Dropdown.Item onClick={this.changeAllowanceFreePaymaster}>for Free Paymaster</Dropdown.Item>\n                                        <Dropdown.Item onClick={this.changeAllowancePaidPaymaster}>for Paid Paymaster</Dropdown.Item>\n                                    </DropdownButton>\n                                </InputGroup>\n                            </Card.Body>\n                        </Card>\n\n                        <Card>\n                            <Card.Header>Paymaster Allowances (in Tokens)</Card.Header>\n                            <Card.Body>\n                                <ListGroup.Item\n                                    as=\"li\"\n                                    className=\"d-flex justify-content-between align-items-start\"\n                                >\n                                    <div className=\"ms-2 me-auto\">\n                                        <div className=\"fw-bold\">Free Paymaster (ERC20)</div>\n                                    </div>\n                                    <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                        {this.state.freePaymasterAllowance}\n                                    </Badge>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item\n                                    as=\"li\"\n                                    className=\"d-flex justify-content-between align-items-start\"\n                                >\n                                    <div className=\"ms-2 me-auto\">\n                                        <div className=\"fw-bold\">Paid Paymaster (ERC20)</div>\n                                    </div>\n                                    <Badge bg=\"warning\" text=\"dark\" pill style={{ fontSize: '15px' }}>\n                                        {this.state.paidPaymasterAllowance}\n                                    </Badge>\n                                </ListGroup.Item>\n\n\n                            </Card.Body>\n                        </Card>\n\n                    </CardGroup>\n                </Container>\n\n                <Container className='mt-2'>\n                    <Card style={{ width: '40%' }}>\n                        <Card.Body>\n                            <Button as=\"input\" value=\"Refresh all Balances\" onClick={this.getBalance} />\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);","C:\\Users\\nomif\\Desktop\\Programming\\Blockchain\\ethereum-gasless-transactions\\OpenGSN\\ui\\src\\ethereum.js",["18","19","20","21","22","23","24"],"const ethers = require('ethers')\r\nconst { formatEther } = require('ethers/lib/utils')\r\nconst { RelayProvider } = require('@opengsn/provider')\r\n\r\n\r\nconst contractArtifact = require('../../build/contracts/TargetContract.json')\r\n\r\nconst noFeePaymasterArtifact = require('../../build/contracts/NoFeePaymaster.json')\r\nconst tokenFeePaymasterArtifact = require('../../build/contracts/TokenFeePaymaster.json')\r\n\r\nconst tokenBankArtifact = require('../../build/contracts/TokenBank.json')\r\n\r\nlet targetContractNoFeePaymaster\r\nlet targetContractTokenFeePaymaster\r\nlet noFeePaymasterContract\r\nlet tokenFeePaymasterContract\r\nlet tokenBankContract\r\n\r\nlet contractAddress\r\n\r\nlet artifactNetwork\r\nlet networkId\r\nlet TokenFeeprovider\r\nlet NoFeeprovider\r\n\r\nasync function getAllAddresses() {\r\n\r\n    if (!window.ethereum) {\r\n        throw new Error('provider not found')\r\n    }\r\n    window.ethereum.on('accountsChanged', () => {\r\n        console.log('acct');\r\n        window.location.reload()\r\n    })\r\n    window.ethereum.on('chainChanged', () => {\r\n        console.log('chainChained');\r\n        window.location.reload()\r\n    })\r\n\r\n    networkId = await window.ethereum.request({ method: 'net_version' })\r\n\r\n\r\n    let noFeePaymasterAddr = noFeePaymasterArtifact.networks[networkId].address\r\n    let feePaymasterAddr = tokenFeePaymasterArtifact.networks[networkId].address\r\n    let recepientAddr = contractArtifact.networks[networkId].address\r\n    return [noFeePaymasterAddr, feePaymasterAddr, recepientAddr]\r\n}\r\n\r\nasync function initNoFeePaymaster() {\r\n\r\n    if (!window.ethereum) {\r\n        throw new Error('provider not found')\r\n    }\r\n    window.ethereum.on('accountsChanged', () => {\r\n        console.log('acct');\r\n        window.location.reload()\r\n    })\r\n    window.ethereum.on('chainChanged', () => {\r\n        console.log('chainChained');\r\n        window.location.reload()\r\n    })\r\n\r\n    networkId = await window.ethereum.request({ method: 'net_version' })\r\n\r\n    const gsnProviderNoFeePaymaster = await RelayProvider.newProvider({\r\n        provider: window.ethereum,\r\n        config: {\r\n            paymasterAddress: noFeePaymasterArtifact.networks[networkId].address\r\n        }\r\n    }).init()\r\n\r\n\r\n    NoFeeprovider = new ethers.providers.Web3Provider(gsnProviderNoFeePaymaster)\r\n\r\n    const noFeeNetwork = await NoFeeprovider.getNetwork()\r\n    artifactNetwork = contractArtifact.networks[networkId]\r\n\r\n\r\n    if (!artifactNetwork)\r\n        throw new Error('Can\\'t find deployment on network ' + networkId)\r\n\r\n    contractAddress = artifactNetwork.address\r\n\r\n\r\n    targetContractNoFeePaymaster = new ethers.Contract(\r\n        contractAddress, contractArtifact.abi, NoFeeprovider.getSigner())\r\n\r\n    noFeePaymasterContract = new ethers.Contract(\r\n        noFeePaymasterArtifact.networks[networkId].address, noFeePaymasterArtifact.abi, NoFeeprovider.getSigner())\r\n\r\n\r\n\r\n    await listenToNoFeeEvents()\r\n    return { contractAddress, noFeeNetwork }\r\n}\r\n\r\nasync function initTokenFeePaymaster() {\r\n\r\n    if (!window.ethereum) {\r\n        throw new Error('provider not found')\r\n    }\r\n    window.ethereum.on('accountsChanged', () => {\r\n        console.log('acct');\r\n        window.location.reload()\r\n    })\r\n    window.ethereum.on('chainChanged', () => {\r\n        console.log('chainChained');\r\n        window.location.reload()\r\n    })\r\n\r\n    networkId = await window.ethereum.request({ method: 'net_version' })\r\n\r\n    const gsnProviderTokenFeePaymaster = await RelayProvider.newProvider({\r\n        provider: window.ethereum,\r\n        config: {\r\n            paymasterAddress: tokenFeePaymasterArtifact.networks[networkId].address\r\n        }\r\n    }).init()\r\n\r\n\r\n    TokenFeeprovider = new ethers.providers.Web3Provider(gsnProviderTokenFeePaymaster)\r\n\r\n    const TokenFeeNetwork = await TokenFeeprovider.getNetwork()\r\n    artifactNetwork = contractArtifact.networks[networkId]\r\n\r\n\r\n    if (!artifactNetwork)\r\n        throw new Error('Can\\'t find deployment on network ' + networkId)\r\n\r\n    contractAddress = artifactNetwork.address\r\n\r\n\r\n    targetContractTokenFeePaymaster = new ethers.Contract(\r\n        contractAddress, contractArtifact.abi, TokenFeeprovider.getSigner())\r\n\r\n\r\n    tokenFeePaymasterContract = new ethers.Contract(\r\n        tokenFeePaymasterArtifact.networks[networkId].address, tokenFeePaymasterArtifact.abi, TokenFeeprovider.getSigner())\r\n\r\n    await listenToTokenFeeEvents()\r\n    return { contractAddress, TokenFeeNetwork }\r\n}\r\n\r\n\r\nasync function noFeeContractCall() {\r\n    await window.ethereum.send('eth_requestAccounts')\r\n\r\n    let transaction = await targetContractNoFeePaymaster.noCommissionTx()\r\n    let hash = transaction.hash\r\n    console.log(`Transaction ${hash} sent`)\r\n    let receipt = await NoFeeprovider.waitForTransaction(hash)\r\n    console.log(`Mined in block: ${receipt.blockNumber}`)\r\n\r\n}\r\n\r\n\r\nasync function tokenFeeContractCall() {\r\n\r\n    await window.ethereum.send('eth_requestAccounts')\r\n\r\n    let transaction = await targetContractTokenFeePaymaster.tokenCommissionTx()\r\n    let hash = transaction.hash\r\n    console.log(`Transaction ${hash} sent`)\r\n    let receipt = await TokenFeeprovider.waitForTransaction(hash)\r\n    console.log(`Mined in block: ${receipt.blockNumber}`)\r\n\r\n\r\n}\r\n\r\n\r\n// let logview\r\n\r\n// function log(message) {\r\n//     message = message.replace(/(0x\\w\\w\\w\\w)\\w*(\\w\\w\\w\\w)\\b/g, '<b>$1...$2</b>')\r\n//     if (!logview) {\r\n//         logview = document.getElementById('logview')\r\n//     }\r\n//     logview.innerHTML = message + \"<br>\\n\" + logview.innerHTML\r\n// }\r\n\r\n\r\n// async function listenToEvents() {\r\n\r\n//   targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n//     log(`No FEE Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n//     console.log(`NO FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n//   })\r\n\r\n\r\n//   targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n//     log(`Token Fee Flag Captured from&nbsp;${previousHolder} by&nbsp;${currentHolder}`)\r\n//     console.log(`TOKEN FEE Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n//   })\r\n\r\n// }\r\n\r\n\r\n\r\nasync function listenToNoFeeEvents() {\r\n    targetContractNoFeePaymaster.on('NoFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n        console.log(`No Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n    })\r\n}\r\n\r\nasync function listenToTokenFeeEvents() {\r\n    targetContractTokenFeePaymaster.on('TokenFeeFlagCaptured', (previousHolder, currentHolder, rawEvent) => {\r\n        console.log(`Token Fee Flag Captured from ${previousHolder} by ${currentHolder}`)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nwindow.app = {\r\n    initNoFeePaymaster,\r\n    initTokenFeePaymaster,\r\n    noFeeContractCall,\r\n    tokenFeeContractCall,\r\n    getAllAddresses,\r\n    noFeeContractCall,\r\n    tokenFeeContractCall\r\n}",["25","26"],{"ruleId":"27","severity":1,"message":"28","line":9,"column":128,"nodeType":"29","messageId":"30","endLine":9,"endColumn":135},{"ruleId":"27","severity":1,"message":"31","line":10,"column":35,"nodeType":"29","messageId":"30","endLine":10,"endColumn":45},{"ruleId":"27","severity":1,"message":"32","line":91,"column":17,"nodeType":"29","messageId":"30","endLine":91,"endColumn":26},{"ruleId":"27","severity":1,"message":"33","line":105,"column":23,"nodeType":"29","messageId":"30","endLine":105,"endColumn":41},{"ruleId":"27","severity":1,"message":"33","line":120,"column":23,"nodeType":"29","messageId":"30","endLine":120,"endColumn":41},{"ruleId":"27","severity":1,"message":"34","line":2,"column":9,"nodeType":"29","messageId":"30","endLine":2,"endColumn":20},{"ruleId":"27","severity":1,"message":"35","line":11,"column":7,"nodeType":"29","messageId":"30","endLine":11,"endColumn":24},{"ruleId":"27","severity":1,"message":"36","line":17,"column":5,"nodeType":"29","messageId":"30","endLine":17,"endColumn":22},{"ruleId":"27","severity":1,"message":"37","line":88,"column":5,"nodeType":"29","messageId":"30","endLine":88,"endColumn":27},{"ruleId":"27","severity":1,"message":"38","line":137,"column":5,"nodeType":"29","messageId":"30","endLine":137,"endColumn":30},{"ruleId":"39","severity":1,"message":"40","line":220,"column":5,"nodeType":"41","messageId":"42","endLine":220,"endColumn":22},{"ruleId":"39","severity":1,"message":"43","line":221,"column":5,"nodeType":"41","messageId":"42","endLine":221,"endColumn":25},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'FaThumbsUp' is defined but never used.","'buyTokens' is assigned a value but never used.","'increasedAllowance' is assigned a value but never used.","'formatEther' is assigned a value but never used.","'tokenBankArtifact' is assigned a value but never used.","'tokenBankContract' is defined but never used.","'noFeePaymasterContract' is assigned a value but never used.","'tokenFeePaymasterContract' is assigned a value but never used.","no-dupe-keys","Duplicate key 'noFeeContractCall'.","ObjectExpression","unexpected","Duplicate key 'tokenFeeContractCall'.","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-global-assign","no-unsafe-negation"]